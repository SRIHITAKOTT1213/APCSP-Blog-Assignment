<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://srihitakott1213.github.io/APCSP-Blog-Assignment/feed.xml" rel="self" type="application/atom+xml" /><link href="https://srihitakott1213.github.io/APCSP-Blog-Assignment/" rel="alternate" type="text/html" /><updated>2022-09-03T15:39:16-05:00</updated><id>https://srihitakott1213.github.io/APCSP-Blog-Assignment/feed.xml</id><title type="html">APCSP</title><subtitle>Computer Science Principles Blog</subtitle><entry><title type="html">Tp120 Python_lists</title><link href="https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/03/TP120-Python_Lists.ipynb" rel="alternate" type="text/html" title="Tp120 Python_lists" /><published>2022-09-03T00:00:00-05:00</published><updated>2022-09-03T00:00:00-05:00</updated><id>https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/03/TP120-Python_Lists</id><author><name></name></author><summary type="html"><![CDATA[{ "cells": [ { "cell_type": "code", "execution_count": 10, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "name Sri Kotturi \n", "age 16 \n", "score 90.0 \n", "\n", "langs ['Python', 'JavaScript', 'Java', 'Bash', 'html'] \n", "- langs[2] Java \n", "\n", "person {'name': 'Sri Kotturi', 'age': 16, 'score': 90.0, 'langs': ['Python', 'JavaScript', 'Java', 'Bash', 'html']} \n", "- person[\"name\"] Sri Kotturi \n" ] } ], "source": [ "# Sample of Python Variables\n", "\n", "# variable of type string\n", "name = \"Sri Kotturi\"\n", "print(\"name\", name, type(name))\n", "\n", "# variable of type integer\n", "age = 16\n", "print(\"age\", age, type(age))\n", "\n", "# variable of type float\n", "score = 90.0\n", "print(\"score\", score, type(score))\n", "\n", "print()\n", "\n", "# variable of type list (many values in one variable)\n", "langs = [\"Python\", \"JavaScript\", \"Java\", \"Bash\", \"html\"]\n", "print(\"langs\", langs, type(langs))\n", "print(\"- langs[2]\", langs[2], type(langs[2]))\n", "\n", "print()\n", "\n", "# variable of type dictionary (a group of keys and values)\n", "person = {\n", " \"name\": name,\n", " \"age\": age,\n", " \"score\": score,\n", " \"langs\": langs\n", "}\n", "print(\"person\", person, type(person))\n", "print('- person[\"name\"]', person[\"name\"], type(person[\"name\"]))\n" ] }, { "cell_type": "code", "execution_count": 11, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "[{'FirstName': 'Srihita', 'LastName': 'Kotturi', 'DOB': 'December 13', 'Residence': 'San Diego', 'Email': 'srihita.kotturi@gmail.com', 'Owns_Cars': ['Hundai Accent']}]\n" ] } ], "source": [ "# Define an empty List called InfoDb\n", "InfoDb = []\n", "\n", "# Append to List a Dictionary of key/values related to a person and cars\n", "InfoDb.append({\n", " \"FirstName\": \"Srihita\",\n", " \"LastName\": \"Kotturi\",\n", " \"DOB\": \"December 13\",\n", " \"Residence\": \"San Diego\",\n", " \"Email\": \"srihita.kotturi@gmail.com\",\n", " \"Owns_Cars\": [\"Hundai Accent\"]\n", " \n", " \n", "})\n", "\n", "\n", "print(InfoDb)" ] }, { "cell_type": "code", "execution_count": 12, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "For loop output\n", "\n", "Srihita Kotturi\n", "\t Residence: San Diego\n", "\t Birth Day: December 13\n", "\t Cars: Hundai Accent\n", "\n" ] } ], "source": [ "# given and index this will print InfoDb content\n", "def print_data(d_rec):\n", " print(d_rec[\"FirstName\"], d_rec[\"LastName\"]) # using comma puts space between values\n", " print(\"\\t\", \"Residence:\", d_rec[\"Residence\"]) # \\t is a tab indent\n", " print(\"\\t\", \"Birth Day:\", d_rec[\"DOB\"])\n", " print(\"\\t\", \"Cars: \", end=\"\") # end=\"\" make sure no return occurs\n", " print(\", \".join(d_rec[\"Owns_Cars\"])) # join allows printing a string list with separator\n", " print()\n", "\n", "\n", "# for loop iterates on length of InfoDb\n", "def for_loop():\n", " print(\"For loop output\\n\")\n", " for record in InfoDb:\n", " print_data(record)\n", "\n", "for_loop()" ] }, { "cell_type": "code", "execution_count": 13, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "While loop output\n", "\n", "Srihita Kotturi\n", "\t Residence: San Diego\n", "\t Birth Day: December 13\n", "\t Cars: Hundai Accent\n", "\n" ] } ], "source": [ "# while loop contains an initial n and an index incrementing statement (n += 1)\n", "def while_loop():\n", " print(\"While loop output\\n\")\n", " i = 0\n", " while i < len(InfoDb):\n", " record = InfoDb[i]\n", " print_data(record)\n", " i += 1\n", " return\n", "\n", "while_loop()" ] }, { "cell_type": "code", "execution_count": 9, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "Recursive loop output\n", "\n", "Srihita Kotturi\n", "\t Residence: San Diego\n", "\t Birth Day: December 13\n", "\t Cars: Hundai Accent\n", "\n" ] } ], "source": [ "# recursion simulates loop incrementing on each call (n + 1) until exit condition is met\n", "def recursive_loop(i):\n", " if i < len(InfoDb):\n", " record = InfoDb[i]\n", " print_data(record)\n", " recursive_loop(i + 1)\n", " return\n", " \n", "print(\"Recursive loop output\\n\")\n", "recursive_loop(0)" ] } ], "metadata": { "kernelspec": { "display_name": "Python 3.8.10 64-bit", "language": "python", "name": "python3" }, "language_info": { "codemirror_mode": { "name": "ipython", "version": 3 }, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.8.10" }, "orig_nbformat": 4, "vscode": { "interpreter": { "hash": "916dbcbb3f70747c44a77c7bcd40155683ae19c65e1c03b4aa3499c5328201f1" } } }, "nbformat": 4, "nbformat_minor": 2 }]]></summary></entry><entry><title type="html">Bash Project</title><link href="https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/03/Bash-project.ipynb" rel="alternate" type="text/html" title="Bash Project" /><published>2022-09-03T00:00:00-05:00</published><updated>2022-09-03T00:00:00-05:00</updated><id>https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/03/Bash-project</id><author><name></name></author><summary type="html"><![CDATA[{ "cells": [ { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "shellscript" } }, "outputs": [], "source": [ " echo \"Using conditional statement to create a project directory and project\"\n", "\n", "# Variable section\n", "export project_dir=$HOME/vscode-SRIHITAKOTT1213 # change vscode to different name to test git clone\n", "export project=$project_dir/APCSP-Blog-Assignment # change APCSP to name of project from git clone\n", "export project_repo=\"https://github.com/SRIHITAKOTT1213/APCSP-Blog-Assignment.git\" # change to project of choice\n", "\n", "cd ~ # start in home directory\n", "\n", "# Conditional block to make a project directory\n", "if [ ! -d $project_dir ]\n", "then \n", " echo \"Directory $project_dir does not exists... makinng directory $project_dir\"\n", " mkdir -p $project_dir\n", "fi\n", "echo \"Directory $project_dir exists.\" \n", "\n", "# Conditional block to git clone a project from project_repo\n", "if [ ! -d $project ]\n", "then\n", " echo \"Directory $project does not exists... cloning $project_repo\"\n", " cd $project_dir\n", " git clone $project_repo\n", " cd ~\n", "fi\n", "echo \"Directory $project exists.\" " ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "shellscript" } }, "outputs": [], "source": [ "# You must run cells above to define variable and project\n", "\n", "echo \"Navigate to project, then navigate to area wwhere files were cloned\"\n", "cd $project\n", "pwd\n", "\n", "echo \"\"\n", "echo \"list top level or root of files with project pulled from github\"\n", "ls\n", "\n", "echo \"\"\n", "echo \"list again with hidden files pulled from github\"\n", "ls -a # hidden files flag, many shell commands have flags\n", "\n", "echo \"\"\n", "echo \"list all files in long format\"\n", "ls -al # all files and long listing" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "shellscript" } }, "outputs": [], "source": [ "# You must run cells above to define variable and project\n", "\n", "echo \"Look for posts\"\n", "export posts=$project/_posts # _posts inside project\n", "cd $posts # this should exist per fastpages\n", "pwd # present working directory\n", "ls -l # list posts" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "shellscript" } }, "outputs": [], "source": [ "# You must run cells above to define variable and project\n", "\n", "echo \"Look for notebooks\"\n", "export notebooks=$project/_notebooks # _notebooks is inside project\n", "cd $notebooks # this should exist per fastpages\n", "pwd # present working directory\n", "ls -l # list notebooks" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "shellscript" } }, "outputs": [], "source": [ "# You must run cells above to define notebooks location\n", "\n", "echo \"Look for images in notebooks, print working directory, list files\"\n", "cd $notebooks/images # this should exist per fastpages\n", "pwd\n", "ls -l" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "shellscript" } }, "outputs": [], "source": [ "# You must run cells above to define project\n", "echo \"Navigate to project, then navigate to area wwhere files were cloned\"\n", "\n", "cd $project\n", "echo \"show the contents of README.md\"\n", "echo \"\"\n", "\n", "cat README.md # show contents of file, in this case markdown\n", "echo \"\"\n", "echo \"end of README.md\"" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "shellscript" } }, "outputs": [], "source": [ "# This command has no dependencies\n", "\n", "echo \"Show the shell environment variables, key on left of equal value on right\"\n", "echo \"\"\n", "\n", "env" ] }, { "cell_type": "code", "execution_count": null, "metadata": { "vscode": { "languageId": "shellscript" } }, "outputs": [], "source": [ "# This command has dependencies on project\n", "\n", "cd $project\n", "\n", "echo \"\"\n", "echo \"show the secrets of .git\"\n", "cd .git\n", "ls -l\n", "\n", "echo \"\"\n", "echo \"look at config file\"\n", "cat config" ] } ], "metadata": { "kernelspec": { "display_name": "Python 3.9.12 ('base')", "language": "python", "name": "python3" }, "language_info": { "codemirror_mode": { "name": "ipython", "version": 3 }, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.9.12" }, "orig_nbformat": 4, "vscode": { "interpreter": { "hash": "c592ff5847e581e8b66b02dcd331c526c35045e822da212864271a73a90b0063" } } }, "nbformat": 4, "nbformat_minor": 2 }]]></summary></entry><entry><title type="html">Apcsp Panel</title><link href="https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/08/29/APCSP-Panel.html" rel="alternate" type="text/html" title="Apcsp Panel" /><published>2022-08-29T00:00:00-05:00</published><updated>2022-08-29T00:00:00-05:00</updated><id>https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/08/29/APCSP-Panel</id><author><name></name></author><summary type="html"><![CDATA[Notes: How did you realize you wanted to do computers? A few of the people said that they took it because they liked problem solving, others said thhey liked it because they were good at it, and one more said she didn’t like it but it was useful for many things and doing a few internships solidified her choice.]]></summary></entry><entry><title type="html">Biology Quiz</title><link href="https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/08/27/Biology-Quiz.ipynb" rel="alternate" type="text/html" title="Biology Quiz" /><published>2022-08-27T00:00:00-05:00</published><updated>2022-08-27T00:00:00-05:00</updated><id>https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/08/27/Biology-Quiz</id><author><name></name></author><summary type="html"><![CDATA[{ "cells": [ { "cell_type": "markdown", "metadata": {}, "source": [ "# First Jupyter Notebook\n", "\n", "> Let's see how well you do!\n", "\n", "- title: Biology Quiz\n", "- toc: true\n", "- comments: true\n", "- title: Biology Quiz\n", "- image: /images/2022-08-28.png\n" ] }, { "cell_type": "code", "execution_count": 1, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "Hello,srihitak\n", "You will be asked 10 questions. \n", "Question: Are you ready to take the Quiz?\n", "yes is correct!\n", "Question: What are nitrogenous bases in DNA?\n", "thymine is incorrect\n", "The correct answer is Adenine, Guanine, Cytosine, Thymine\n", "Question: What does DNA stand for?\n", "Deoyribonucleic Acid is incorrect\n", "The correct answer is Deoxyribonucleic Acid\n", "Question: Who was the person who came up with the theory of Evolution?\n", "Charles Darwin is correct!\n", "Question: In what cell does photosynthesis take place?\n", "Chloroplast is correct!\n", "Question: What is the name of the relationship in which both sides benefit?\n", "Mutualism is correct!\n", "Question: Glycogen is a polymer of what?\n", "Glycogen is incorrect\n", "The correct answer is Glucose\n", "Question: How many chromosomes do humans have?\n", "46 is correct!\n", "Question: What are the weak bonds between water molecules called?\n", "Hydrogen bonds is correct!\n", "Question: What is the division of body cells called?\n", "Mitosis is correct!\n", "Question: What is the division of gametes called?\n", "Meiosis is correct!\n", "srihitak you scored 8/10\n" ] } ], "source": [ "\n", "def question_and_answer(prompt):\n", "\n", " print(\"Question: \" + prompt)\n", " msg = input()\n", " print(\"Answer: \" + msg)\n", "\n", "\n", "import getpass, sys\n", "\n", "def question_with_response(prompt):\n", " print(\"Question: \" + prompt)\n", " msg = input()\n", " return msg\n", "\n", "questions = 10\n", "correct = 0\n", "\n", "print('Hello,' + getpass.getuser())\n", "print(\"You will be asked \" + str(questions) +\" questions. \")\n", "\n", "\n", "questions = [\"Are you ready to take the Quiz?\", \"What are nitrogenous bases in DNA?\", \"What does DNA stand for?\", \"Who was the person who came up with the theory of Evolution?\",\"In what cell does photosynthesis take place?\", \"What is the name of the relationship in which both sides benefit?\", \"Glycogen is a polymer of what?\", \"How many chromosomes do humans have?\", \"What are the weak bonds between water molecules called?\", \"What is the division of body cells called?\", \"What is the division of gametes called?\"]\n", "answers = [\"yes\", \"Adenine, Guanine, Cytosine, Thymine\", \"Deoxyribonucleic Acid\", \"Charles Darwin\",\"Chloroplast\", \"Mutualism\", \"Glucose\", \"46\", \"Hydrogen bonds\", \"Mitosis\", \"Meiosis\"]\n", "\n", "for i in range(len(questions)):\n", " rsp = question_with_response(questions[i])\n", " if rsp == answers[i]:\n", " print(rsp + \" is correct!\")\n", "\n", " correct += 1\n", "\n", " else:\n", " print(rsp + \" is incorrect\")\n", " print(\"The correct answer is \" + answers[i])\n", "\n", "print(getpass.getuser() + \" you scored \" + str(correct) +\"/10\")" ] } ], "metadata": { "kernelspec": { "display_name": "Python 3.8.10 64-bit", "language": "python", "name": "python3" }, "language_info": { "codemirror_mode": { "name": "ipython", "version": 3 }, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.8.10" }, "orig_nbformat": 4, "vscode": { "interpreter": { "hash": "916dbcbb3f70747c44a77c7bcd40155683ae19c65e1c03b4aa3499c5328201f1" } } }, "nbformat": 4, "nbformat_minor": 2 }]]></summary></entry></feed>