{
  
    
        "post0": {
            "title": "Lesson Notes 3.9-3.11",
            "content": "why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results? It is important to know that algorithms look different because that way you know that there is more than one way to solve the problem and you know how to approach the code if there is something wrong with it and you can start fixing it. | . . This is a binary tree and it works by taking the middle value and then putting the sides after that. The list for this is [92,43,74,66,30,12,1] . b. [-1, 2, 6, 9, 19] . Binary cannot have any negative numbers or signs, so this example would not work in a binary search. | . When collaborating or working on group projects, two people might come up with two different ways to solve a problem, and that happens a lot. . know that same goal can be achieved in many ways (the possibilities are endless) | make notes in you code! (explain how it works to others or you future self) | . am_sick = False am_not_sick = True # setting variables here (same as above to make comparison easier) driveSchool = not(am_sick) and am_not_sick if driveSchool == False: print(&quot;I don&#39;t want to go to school&quot;) if driveSchool == True: print(&quot;I&#39;ll go to school&quot;) . I&#39;ll go to school . I think the code above is a Boolean because it had true or false. .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/3.9/3.1/3.11/2022/12/08/Lesson9&11.html",
            "relUrl": "/3.9/3.1/3.11/2022/12/08/Lesson9&11.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Lesson Notes 3.8 and 3.10",
            "content": "iterable = [1, 2, 3, 4] for num in iterable: print(num) . 1 2 3 4 . The code above is an example of iteration, which is basically going over and over until the condition is met, then it stops. Or in this case it spits out everything that is in that list in order, and then stops . procedures and Procedure calls . It takes zero or more arguments . | The procedures in college board are block statements . | The return statemen may appear at any point inside the procedure and causes an immediate retrn from the procedure back to the calling statement . | . Robot . It basically gives directions to move left or right. Or rotate it 90 degrees or something like that. Then I think it is kind of like the turtle function where you can actually see a figure moving to those commands | . Listing Operations . there are several ways that you can list things: . | [value1, value2, value3] . | there are a few more ways to do a list but the one above is the most common way to do it. . | . Relational and Boolean Operators . It evaluates true if the condition is false; otherwise evaluates to false . | Boolean are true and false statements . | the AND and OR statements compare the two conditions and that is a boolean statement because it is a true or false comparison type of statement. . | . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met . | Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met . | Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop . | . Lists examples: . append() - adding element to the end of the list . names = [&#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # add element to the end of the list names.append(&#39;luna&#39;) # start with empty list names = [] names.append(&#39;taiyo&#39;) names.append(&#39;ethan&#39;) names.append(&#39;parav&#39;) names. append(&#39;nikhil&#39;) . insert() - adding an element in a specific position . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # adding in a specific position names.insert(0, &#39;taiyo&#39;) names.insert(3, &#39;ethan&#39;) . remove() - remove an item from the list . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # deleting by value names.remove(&#39;parav&#39;) # by position del names[-1] . pop() - takes the item off the top of the &quot;stack&quot; (by default it returns the last element of the list but you can also pop from any position) . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # pop last item of list most_recent_name = names.pop() print(most_recent_name) # pop first item of list first_name = names.pop(0) print(first_name) . nikhil luna . len() - returns the number of items in a list . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # find length of list num_names = len(names) print(&quot;There are &quot; + str(num_names) + &quot; names.&quot;) . There are 5 names. . sorted() - returns a copy of the list which leaves the original copy unchanged . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # sort permanently names.sort() # sort permanently in reverse alphabetical order names.sort(reverse=True) # temp. sort print(sorted(names)) print(sorted(names, reverse=True)) # reversing the order of a list names.reverse() . [&#39;ethan&#39;, &#39;luna&#39;, &#39;nikhil&#39;, &#39;parav&#39;, &#39;taiyo&#39;] [&#39;taiyo&#39;, &#39;parav&#39;, &#39;nikhil&#39;, &#39;luna&#39;, &#39;ethan&#39;] . range() - use to work with number efficiently . for number in range(11): print(number) # making list of numbers 1 to 10 # using the list() value can generate a large list of numbers numbers = list(range(1, 10)) . 0 1 2 3 4 5 6 7 8 9 10 . min() - find the least value in list . nums = [10, 30, 40, 60, 70, 60] least = min(nums) print(min(nums)) . 10 . max() - find the highest value in list . nums = [10, 30, 40, 60, 70, 60] highest = max(nums) print(max(nums)) . 70 . sum() - sum of all in list . nums = [10, 30, 40, 60, 70, 60] total = sum(nums) print(sum(nums)) . 270 .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/3.8/3.1/2022/12/08/Lesson8&10.html",
            "relUrl": "/3.8/3.1/2022/12/08/Lesson8&10.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Lesson Notes 3.5-3.7",
            "content": "What is a Boolean . The defention of a Boolean is a denoting a system of algebraic notation used to represent logical propositions, especially in computing and electronics. . | A boolean expresions are either true or false. . | Testing if two numbers or variables are equal is a common example. . | For example: The sky is blue = True . | . Operators: . AND: returns true if both of the values being compared are true and returns false if either of the values are false. | OR: Returns true if either of the conditions are true. And returns false if both of the conditions are false. | NOT: Returns true if the following condition is false. Returns false if it is true. | . iswindy = True result = not(iswindy) print(result) . False . This uses the NOT operator and I think that it outputs the oposite of what is said. So if iswindy was False, then the output would be True, because it is the opposite . Selection: A selection is a decision or a question. At some point in the program, the computer may need to ask a question because it has reached a point where there are one or more options available . | Algorithm: It is like a recipe. It is lines of codes that a computer follows to solve a problem . | Condition: They are basically a decision making statement in code. . | . Conditional Statement part 2: The code below is an example of a conditional statement . for i in range(2): password = input(&quot;Please enter the password&quot;) if password == &quot;python&quot; or password == &quot;Python&quot;: print(&quot;Welcome!!&quot;) else: print(&quot;This password is incorrect&quot;) . Welcome!! Welcome!! .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/3.5/3.6/3.7/2022/12/08/Lesson5&7.html",
            "relUrl": "/3.5/3.6/3.7/2022/12/08/Lesson5&7.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Lesson Notes 3.3 and 3.4",
            "content": "1.3 and 1.4 . Algorithms are basically sequences of code . | An iteration is a loop that does something over and over until the certain condition is met . | There are also symbols used to calculate math operations. (*) for multiplication, (/) is for division. . | An algorithm is a finite set of instructions that accomplish a task . | Three are three parts of an algorithm; sequencing, selection, and iteration . | Selection allows the algorithm to make decisions based on whether the condition is met . | the function len(str) means that it will return the number of letters, or characters in that string. The len stands for length. . | a substring gives the length of the entire string. That is the output . | the concat funtion is having two strings and addding them together to make one string, or word. . | A sequence is code in order of events . | . . This is an example of using math expressions. I don&#39;t really understand the % symbol, mostly because I don&#39;t really know what MOD meant. I think it means remainder. So for this one I have to figuree out what num2 equals and num3 before I proceed to solving for the result. The answer is three. .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/3.3/3.4/2022/12/08/Lesson3&4.html",
            "relUrl": "/3.3/3.4/2022/12/08/Lesson3&4.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Lesson Notes 3.1 and 3.2",
            "content": "1.1 and 1.2 . A variable is an abstraction that is in code that holds a value . | A variable is like a container with a name (the variable) and whatever you put inside should correspond to that variable to make it easier . | College board useless ← instead of = because college board writes in pseudo code . | Boolean is when it lists something as true or false . | Strings are a series of characters that can either be letters or numbers . | Lists are sequences of elements with each element being a variable. An example can be a list of students names . | Data Abstraction is taking code and boiling it down to what you see and making it user friendly . | To list some variables, you can just print out the list of the variables and the output would be the list of whatever the variables equal . | . Example of a string: . &quot;Merry Christmas&quot; or &quot;503-777-7777&quot; | . Example of Data Abstraction (The result): . when using a cell phone, you can figure out how to answer incoming calls and respond to text messages | . Some of the hacks from this particular topic: . This code is an example of why using lists can be useful. You just have to print one variable instead of multiple to get the same result. It also manages complexity and makes a programmers life much simpler. .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/3.1/3.2/2022/12/08/Lesson1&2.html",
            "relUrl": "/3.1/3.2/2022/12/08/Lesson1&2.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Lesson 12 and 13 Hacks",
            "content": "Hacks . Topic 3.12 (3.A): . Define procedure and parameter in your own words | a procedure is kind of like a function that makes the code work. Ex. multiply() makes whatever the variables are multiply with each other. And parameters are those variables that are used by the procedure. Ex. 3 and y. multiply(3,4), or something like that. | . Paste a screenshot of completion of the quiz | Define Return Values and Output Parameters in your own words | return values are used to return the value, kind of so they get printed as the output. | . Code a procedure that finds the square root of any given number. (make sure to call and return the function) |",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/12/08/Lesson-12-and-13.html",
            "relUrl": "/2022/12/08/Lesson-12-and-13.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Title",
            "content": "def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(roll_results) # remove this line after testing the app . [5, 3, 5] .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/12/07/Roll-The-Dice-Simulation.html",
            "relUrl": "/2022/12/07/Roll-The-Dice-Simulation.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Lesson 9-11 Hacks",
            "content": "Hack #1: . why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results? It is important to know that algorithms look different because that way you know that there is more than one way to solve the problem and you know how to approach the code if there is something wrong with it and you can start fixing it. | . for the converted conditional to boolean conversion(0.10) | . am_sick = False am_not_sick = True # setting variables here (same as above to make comparison easier) driveSchool = not(am_sick) and am_not_sick if driveSchool == False: print(&quot;I don&#39;t want to go to school&quot;) if driveSchool == True: print(&quot;I&#39;ll go to school&quot;) . I&#39;ll go to school . Hack #2: . countdown = 10 while (countdown &gt; 0): countdown -= 1 print(countdown) if countdown == 0: print(&quot;Times Up!!&quot;) . 9 8 7 6 5 4 3 2 1 0 Times Up!! . . Hack #3: . import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) #print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): #add something here return number #add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if guess &lt; number: print(&quot;You are bad at guessing&quot;) #change this lower_bound = guess elif guess &gt; number: print(&quot;You suck :(&quot;) #change this upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 1 and 100. You guessed 96. Guess a number between 0 and 100. You guessed the number in 1 guesses! . . Hacks #4: . calculate the middle index and create a binary tree for each of these lists | 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . Binary Trees: . . Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? | For the first set, it would be 80. For the second set, it would be 12 and for the third set it would be 84. | . Which of the following lists can NOT a binary search be used in order to find a targeted value? | a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . I think that C is the correct answer because it has to go in acending order. | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/12/06/Lesson9-11.html",
            "relUrl": "/2022/12/06/Lesson9-11.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Lesson 8 and 10 Hacks",
            "content": "Hacks Unit 3 Section 3.8.1 . Define an Iteration an iteration is a loop that goes on and on until a condition is met. . | Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) An example could be that you do a multiple choice quiz that has unlimited tries and you keep taking the quiz over and over until you get 100%, or at least the score you want. . you take the quiz for the first time | you realize that you get a 70% | you try again | you get an 80% | you try again until you get the score that you want. | | . Program a simple iteration: | iterable = [1, 2, 3, 4] for num in iterable: print(num) . 1 2 3 4 . Hacks Unit 3 Section 3.8.2 . What is an iteration statement, in your own words? An iteration statement is basically a loop that goes on and on until a condition is met | Create a descending list of numbers using for loop | . iterable = [4, 3, 2, 1] for num in iterable: print(num) . 4 3 2 1 . Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 . n = 81 i = 3 while i &lt;= n: print(i) i+=13 . 3 16 29 42 55 68 81 . HACKS Unit 3 Section 10 . Part 1 . nums = [&#39;38&#39;, &#39;45&#39;, &#39;67&#39;, &#39;83&#39;, &#39;78&#39;] minimum = min(nums) print(min(nums)) . 38 . Part 2 . procedures and Procedure calls . It takes zero or more arguments | The procedures in college board are block statements | The return statemen may appear at any point inside the procedure and causes an immediate retrn from the procedure back to the calling statement | . Robot . It basically gives directions to move left or right. Or rotate it 90 degrees or something like that. Then I think it is kind of like the turtle function where you can actually see a figure moving to those commands | . Listing Operations . there are several ways that you can list things: | [value1, value2, value3] | there are a few more ways to do a list but the one above is the most common way to do it. | . Relational and Boolean Operators . It evaluates true if the condition is false; otherwise evaluates to false | Boolean are true and false statements | the AND and OR statements compare the two conditions and that is a boolean statement because it is a true or false comparison type of statement. | . .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/12/05/Lesson-8-and-10.html",
            "relUrl": "/2022/12/05/Lesson-8-and-10.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Lesson 5-7 Hacks",
            "content": "Hacks 1: . Explain in your own words what each logical operator does AND: returns true if both of the values being compared are true and returns false if either of the values are false. OR: Returns true if either of the conditions are true. And returns false if both of the conditions are false. NOT: Returns true if the following condition is false. Returns false if it is true. | . Code your own scenario that makes sense for each logical operator: | . iswindy = True result = not(iswindy) print(result) . False . Hack 2: part 1 . Selection: A selection is a decision or a question. At some point in the program, the computer may need to ask a question because it has reached a point where there are one or more options available | Algorithm: It is like a recipe. It is lines of codes that a computer follows to solve a problem | Condition: They are basically a decision making statement in code. | . Conditional Statement part 2 . for i in range(2): password = input(&quot;Please enter the password&quot;) if password == &quot;python&quot; or password == &quot;Python&quot;: print(&quot;Welcome!!&quot;) else: print(&quot;This password is incorrect&quot;) . Welcome!! Welcome!! . Hack 3: . . Create a piece of code that displays four statements instead of three. . def get_week_day(argument): if(argument == 0): day=&quot;Sunday&quot; elif(argument == 1): day=&quot;Monday&quot; elif(argument == 2): day=&quot;Tuesday&quot; elif(argument == 3): day=&quot;Wednesday&quot; elif(argument == 4): day=&quot;Thursday&quot; elif(argument == 5): day=&quot;Friday&quot; elif(argument == 6): day=&quot;Saturday&quot; else: day=&quot;Invalid day&quot; return day # Driver program if __name__ == &quot;__main__&quot;: print (get_week_day(3)) print (get_week_day(1)) print (get_week_day(5)) . Wednesday Monday Friday . Make piece of code that gives three different recommandations for possible classes to take at a scholl based on two different condtions. These conditions could be if the student likes STEM or not. . def get_class(argument): if(argument == 0): subject=&quot;Physics&quot; elif(argument == 1): subject=&quot;Chemistry&quot; elif(argument == 2): subject=&quot;Biology&quot; elif(argument == 3): subject=&quot;AP Calc AB&quot; elif(argument == 4): subject=&quot;Medical Interventions&quot; elif(argument == 5): subject=&quot;AP Phsycology&quot; return subject # Driver program if __name__ == &quot;__main__&quot;: print (get_class(2)) print (get_class(3)) print (get_class(4)) . Biology AP Calc AB Medical Interventions .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/12/05/Lesson-5-7-Hacks.html",
            "relUrl": "/2022/12/05/Lesson-5-7-Hacks.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Lesson 3.12 & 3.13",
            "content": "Topic 3.12 (3.A) Calling &amp; Understanding Procedures - Kaiden &amp; Amay . Overview: Learning Objectives . Basics of Procedures | Calling Procedures | Determine Results of Procedures | . What is a procedure? . Essential Knowledge: . A procedure is a named set of instructions that can take in parameters and return values. May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | Procedures can be classified as sequencing, selection, and iteration. How? | . Example: . What is the procedure&#39;s name? | What are the parameters? | What did the procedure return? | . x = 5 y = 3 def multiply(x, y): product = x * y return product answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . The product of 5 times 3 is 15 . Calling Procedures . To call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure | Procedures do not require parameters, but the parentheses must be there | . Ex: . procedureName(parameter1, parameter2, ...) | How would you call this procedure? | . num = 5 def math(x): op1 = x * 2 op2 = op1 - 9 return op2 . Quiz (Part of Hacks) . Complete this quiz: . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Determining the Result of a Procedure . To determine the result of a procedure or any code, you must follow the code line by line and see what each one does . | Using syntax, you can determine the result by . function parameters | return value and statements | . | . To use return values, you have to write the syntax return followed by the expression you would like to return var | . A return statement exits a function and instructs python to continue executing the program and to return a certain value . | Value can be string, a tuple, or any other type that is being sent back to the main program . | . Ex: . def divide(num1,num2): x = num1/num2 return x . what is x being assigned to inside the function? . | As a reminder, to use function parameters, you would have to write the syntax name of the function followed by the parameters needed in parentheses . | Function parameters are the parameters that are used when calling the function in order to get a result. . | . What are the function parameters in this procedure? . What values are being passed to the function? . def function(first_name, last_name): print(first_name + &quot; &quot; + last_name) function(&quot;Peter&quot;,&quot;Parker&quot;) function(&quot;Safin&quot;, &quot;Singh&quot;) . Peter Parker Safin Singh . In the cell above, the function is being called twice, which shows the importance of function in order to accomplish the same thing with different parameters. . What is wrong with the function? . Can you translate the binary numbers into decimal notation? . def find_cube(num): result = bin(num * num * num) cube = find_cube(3) cube2 = find_cube(4) print(&#39;Cube:&#39;,cube) print(&#39;Cube:&#39;,cube2 ) . Cube: None Cube: None . Once again, I called the function twice, which is useful, because it allows the coder to do the same thing multiple times with different arguments. . Topic 3.13 (3.B) Managing Complexity - Safin . Overview: Learning Objectives . increasing code modularity using procedures abstracting large problems into smaller ones | extract shared features to reduce code duplication | . | using parameters to reuse procedures | improving code readability with procedures | manipulating procedure logic and preserving outputEssentially, we&#39;ll learn how and when it is appropriate to construct a function (procedural abstraction) and what its benefits are . | . Vocabulary: . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . Parameters . As we saw above, parameters can be used to make functions work with multiple different inputs. Let&#39;s review the following code . # these parameters are the inputs to the function, and they are used # inside the function to perform some operation def add(x, y): # inside the function, we can use the x and y parameters just like # we would use any other variable result = x + y return result # to call the function and pass in values for the x and y parameters, # we simply provide the values as arguments in the function call result = add(2, 3) print(result) # should output 5 # we can also use variables as arguments in the function call x = 5 y = 10 result = add(x, y) print(result) # should output 15 # we can even use the result of one function call as an argument # in another function call result = add(add(2, 3), add(4, 5)) print(result) # should output 14 . 5 15 14 . In the above example, parameters were used to create a function that could be called multiple times without code duplication. . Modularity . In the following example, we will use specialized functions and explain their benefits: . import math def hypotenuse(leg1, leg2): # notice we&#39;re using this &lt;var&gt; * &lt;var&gt; syntax multiple times? # this has multiple drawbacks: # - it&#39;s repetitive and makes the code longer # - if we wanted to change the operator being # applied to `leg1` and `leg2`, we&#39;d have to do it twice! leg1_squared = leg1 * leg1 leg2_squared = leg2 * leg2 return math.sqrt(leg1_squared + leg2_squared) ## VERSUS ## # this works, but let&#39;s try to write the &quot;squared&quot; variable assignment statements more concisely... def square(a): return a * a def hypotenuse_abstracted(leg1, leg2): # not only is this shorter, but we can now: # - better understand the code at a glance--we know exactly # what `square` should do # - change the operator in a single place (`square`) rather than # multiple times within this hypotenuse function leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) ## EXTRA CHALLENGE ## # is it possible to write the `hypotenuse` function in a single line? def hypotenuse_abstracted2(leg1, leg2): # ... pass assert hypotenuse(3, 4) == hypotenuse_abstracted(3, 4) == 5 . Abstracting Shared Features . Say we want to create a set of functions that count the number of words in a sentence that start with a certain character. We want to create... . count_words_starting_with_a_in_string(sentence) | count_words_starting_with_d_in_string(sentence) | . In order to count words starting with a certain character, we&#39;ll first need to split up the sentence into words. This behavior will be shared across both functions we intend to create, so procedural abstraction is appropriate here. . # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words starting with a:&quot;, a_count) print(&quot;Words starting with d:&quot;, d_count) . Words starting with a: 1 Words starting with d: 1 . In the above example, we have: . defined several functions that perform different tasks related to processing a string | abstracted away shared behavior for both functions that count the number of words starting with a specific character in a string | . Topic 3.13 (3.C) Developing Procedures - David &amp; Alex . Overview: Learning Objectives . parameters being used to manage complexity parameters storing variables | parameters storing arguments | . | calling functions with procedure names choosing procedure names | calling procedures in python and javascript | . | . Vocabulary: . Procedure - a module of code that is created to complete a certain task, this is basically a function | Procedure Name - the name that is given to a function/procedure | Parameters - a variable that is used in a function to allow for data to be imported into a function | Arguments - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters | . Functions - Basic Structure . Functions can be created in many different languages. Below are some examples in Collegeboard&#39;s format, Python, and Javascript. . Collegeboard . Above, the function is defined as PROCEDURE, which tells the coder that this is a function. The function is then named with procName, which is simply how the function is identified. parameter1, parameter2,... are variables that can be predefined elsewhere and repeatedly used in the same function. This will be gone over later in the lesson so don&#39;t worry if you don&#39;t get it. block of statements are just things that you would place inside a function to complete a certain task, such as print() in Python. . Python . def function(a,b): # function is defined print(a+b) # prints output of variables function(1,2) # one instance that it can be used function(2,3) # another instance . 3 5 . Python is similar to the Collegeboard example, where def defines the function, function, and then is followed by parameters a,b, which can later be interchanged with any numbers as shown with function(1,2). The numbers are called arguments, which are information provided to the function with parameters. In this case, the parameters are being added within the function and then printed. . Javascript . function Function(a,b) { return a + b; } Function(1,2) Function(2,3) . 3 5 . Javascript in this case is almost the exact same as Python, the only differences being that function is called with function and that the formatting is a little different. Otherwise, it does the exact same thing as the Python example. . Example . function div(a,b) { return (a+b)/2 } div(3,7) . What is the procedure name? | What are the parameters? | What operation is being done? | what would the output of this code be? | . Parameters . In functions, there are sometimes parameters that the functions have in which you can call to the function giving arguements that will provide input to the function For example: | . def function(num1, num2): if num1 &gt; num2: print(&quot;num1 is greater than num2&quot;) elif num1 &lt;num2: print(&quot;num1 is less than num 2&quot;) num1= 6 num2 = 8 function(num1,num2) . num1 is less than num 2 . In this function, it takes in two parameters num1 and num2 | Whithin this function it uses conditionals to determine if num 1 is larger or smaller than num2 | When calling to this function we must put in two arguements, num1 and num2 respectively | We put in 6 for num1 and 8 for num2 and the algorithm runs and gives us an outcome | . This basic function in python can be recreated in Javasript . function compare(a,b) { if(a&gt;b) { console.log(&quot;a is greater than b&quot;) } else if (a&lt;b) { console.log(&quot;a is less than b&quot;) } } // How do you call to this function? . what are the parameters? | What is the output? | what are the arguements? | . Calling functions . When calling functions, you have to ask yourself some questions Does the function have any parameters? | does the parameter have output? | . | Depending on these answers, the way you will call to a function will be different | . Example where it does does have parameters and gives output . def InchestoFeet(inches): Feet = 0 Feet = inches / 12 return Feet result = InchestoFeet(24) print(result) . 2 . If you look closely, there is a return at the end of the function, this returns a value when you call the function | This is why we have to set a variable, in this case result equal to the output of the function. | Also one thing to notice is that this function also takes in a parameter called inches | . Here&#39;s an example of calling functions in HTML with Javascript: . HI . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;HI&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a + b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; . Hacks . Topic 3.12 (3.A): . Define procedure and parameter in your own words | Paste a screenshot of completion of the quiz | Define Return Values and Output Parameters in your own words | Code a procedure that finds the square root of any given number. (make sure to call and return the function) | Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | Rubric . Each hack is worth 0.3 points . To get 0.3 points for each hack you must: Complete each hack correctly and completely | Submit by 11:59PM on Monday, December 12 | . | The last 0.1 points are if you do a good job on the binary calculator. | Anything missing or submitted late will have points deducted. | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/12/04/lesson3.12_3.13.html",
            "relUrl": "/2022/12/04/lesson3.12_3.13.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Lesson 3.3 and 3.4 Homework",
            "content": "Hack 1: sequencing: Set item to number to search for Selection: display “item not found”. iteration: get next number in the list . Hack 2: . Hack 3 cross word: . iterations | selection | sequences | Hack 4: .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/c7.2/2022/11/30/Lesson3&4-Homework.html",
            "relUrl": "/c7.2/2022/11/30/Lesson3&4-Homework.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 3 Sections 8 and 10",
            "content": "Section 8 - Iteration . Section Objectives: . Express an algorithm that uses iteration without using a programming language | Determine the result or side effect of iteration statements | Write iteration statement | . Section Vocabulary: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met . Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met . Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop. . . Unit 3 Section 8.1 . Unit 3 Section 8.1 - Taiyo Iwazaki . Lesson Objectives: . Express an algorithm that uses iteration without using a programming language | Define an iteration | The Basics Of Iteration | Examples | LESSON Vocab: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | Before we dive deeper, we need to understand that an iteration is a part of an algorithm. And in that iteration is a set of instructions that need to be followed until a certain desired output is met. . Examples . Here is an example using online shopping: . Lets say you are looking for a lost item inside of your house... What steps would you take? . Suppose there are n rooms to search... number the rooms 1-n . | Start by searching in room number 1 . | Search each room thoroughly for you item. . | Change the room number to the next highest number . | Repeat steps 3 and 4 until you have found your lost item. . | Enjoy the lost item. . | WAIT! There is a flaw in the program. . This is where a stopping condition is useful for when the iteration already meets the desired requirement and gets out of the loop. . Programming Examples . i = 0 while (i &lt; 5): print(&quot;Hello, World!&quot;) i = i + 1 . Hello, World! Hello, World! Hello, World! Hello, World! Hello, World! . i = 0 while (i &lt; 5): #Try changing the 5 and see what happens! print(&quot;Hello, World!&quot;) i = i + 1 if (i == 3): #Try Changing the 3 and see what happens! break . Hello, World! Hello, World! Hello, World! . These are just a few examples of what you can do with iteration. . Summary: . An Iteration is a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | We can use stopping conditions to stop an iteration if a condition is already met | . Unit 3 Section 3.8.2 . Unit 3 Section 3.8.2 - Parav Salaniwal . Lesson Objectives . Determine the result or side effect of iteration statements | Learn how to use iterations with for loops and while loops | Creating code to learn how to incrementally list numbers | Learn the range function and using variables in code | . Definition: Iteration Statement - cause statements to be executed zero or more times, subject to some loop-termination criteria . The first function we will learn is the range function, which we will use with for loop. As you may be able to guess, this will give us the sum based on the input provided. We always use a variable, such as i, to represent what the range of numbers the output will show. For example, if I wanted to list the numbers from 1-10 using the range function, it would look like this: . for i in range(11): print(i) . 0 1 2 3 4 5 6 7 8 9 10 . Now the first thing you may notice is my input for the range was 11, and you may wonder why is it not 10? This is because when using the range function, the last number, or the ending value, is not included in the output, therefore we would have to add 1 to receive the correct output. Now if we were looking to include a starting value to have it start from 1 and end at 10, the code would look like this: . for i in range(1,11): print(i) . 1 2 3 4 5 6 7 8 9 10 . When using the range with for loop, the you can list much more than just a increment of one, would anyone like to guess how we could include a change in the incremented value? Try making a change in the python code above to change the incremented value. When using the range function: . for i in range(starting value, ending value, incremented value): print(i) . Now with while loops, we can provide a similar output with a variation in the input. Similar to for loops, it requires a variable which is the starting value. . i=1 while i&lt;=10: print(i) i=i+1 . 1 2 3 4 5 6 7 8 9 10 . Based on your knowledge from for loops, which values in the code above are the starting, incrementing, and ending values? . LESSON . . Unit 3 Section 3.8.3 . Unit 3 Section 3.8.3 - Nikhil . Here is some basic code I have created, let&#39;s first look into this one: I created a list of pets, cat, dog, fish, and snake. Then I created a for loop, &quot;for i in pets&quot; and this looks at every element/value in pets, so &quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot; and &quot;snake&quot;. This next if statmenets checks if the element in the list is &quot;fish&quot; and if it is, it breaks the loop. The statement would just print, cat and dog since the loop breaks at fish. . pets = [&quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot;, &quot;snake&quot;] for i in pets: if i == &quot;fish&quot;: break print(i) . cat dog . This while loop checks if number less than 10 is even and if so, it will print out the even numbers. We set a starting value of number = 0, then while the number is less than 10, the percent sign means modulus so meaning if there is a remaninder when we dvide. So if number divided by 2 has no remainder then it will print number. Then after that it will add 1 to the number and repeat the process untill it reaches 10. So let&#39;s check for 0, while 0 is less than ten, then it moves to next statement, since 0 divded by 2 has a remainder of 0 it will print the value of 0. Now it will add 1 to zero. Then it will see that 1 is less than ten, and then check if 1 divided by 2 has a remainder of 0 which it does not, so it skips the print, and goes straight to addding one, so on so forth. . number = 0 while number &lt; 10: if number % 2 == 0: print(number) number += 1 . 0 2 4 6 8 . The purpose of this code is to find the sum of all the even numbers between and any number of your choosing. The integer input asks for the minimum and maximum value. The next statement puts a starting sum value set to 0. The for i in range (minimum,maximum+1) looks at every number between those two values, in this case 1 and 100. Then the if i modulus 2 checks if any numbers that are divisible by 2 and the remainder comes to 0. If there is a number that has a remainder of 0 when divided by 2, it adds that number to the sum. Then the last print statement, prints out the final sum of all even numbers between the two numbers of your choosing. . minimum = int(input(&quot;please enter a minimum number you want your range to be&quot;)) maximum = int(input(&quot;please enter a number that you want to be the maximum value&quot;)) sum = 0 for i in range(minimum,maximum+1): if i % 2 == 0: sum += i print(&quot;The sum of all the even numbers between&quot;, minimum, &quot;and&quot;, maximum, &quot;:&quot;, sum) . The sum of all the even numbers between 1 and 3 : 2 . LESSON . . HACKS Unit 3 Section 8 . Hacks Unit 3 Section 3.8.1 . Define an Iteration | Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) | Program a simple iteration. | Hacks Unit 3 Section 3.8.2 . What is an iteration statement, in your own words? | Create a descending list of numbers using for loop | Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 | . Section 10 - Lists - Luna Iwazaki, Ethan Tran . Section Objectives: . For list operations, write expressions that use list indexing and list procedures | For algorithms involving elements of a list, write iteration statements to traverse a list | For list operations, evaluate expression that use list indexing and list procedures | For algorithms involving elements of a list, determine the result of an algorithm that includes list traversals | . Section Vocabulary: . Traversing Lists: where all elements in the list are accessed, or a partial traversal, where only a portion of elements are accessed (can be a complete traversal) . Essential Knowledge: . List procedures are implemented in accordance with the syntax rules of the programming language . | Iteration Statements can be used to traverse a list . | !!! AP EXAM provides pseudocode for loops | Knowledge of existing algorithms that use iteration can help in constructing new algorithms: | . Unit 3 Section 10 . Section 10 - Lists . Lists Recap . append() - adding element to the end of the list . names = [&#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # add element to the end of the list names.append(&#39;luna&#39;) # start with empty list names = [] names.append(&#39;taiyo&#39;) names.append(&#39;ethan&#39;) names.append(&#39;parav&#39;) names. append(&#39;nikhil&#39;) . insert() - adding an element in a specific position . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # adding in a specific position names.insert(0, &#39;taiyo&#39;) names.insert(3, &#39;ethan&#39;) . remove() - remove an item from the list . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # deleting by value names.remove(&#39;parav&#39;) # by position del names[-1] . pop() - takes the item off the top of the &quot;stack&quot; (by default it returns the last element of the list but you can also pop from any position) . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # pop last item of list most_recent_name = names.pop() print(most_recent_name) # pop first item of list first_name = names.pop(0) print(first_name) . len() - returns the number of items in a list . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # find length of list num_names = len(names) print(&quot;There are&quot; + str(num_names) + &quot;names.&quot;) . sort() - changes order of list permanently . sorted() - returns a copy of the list which leaves the original copy unchanged . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # sort permanently names.sort() # sort permanently in reverse alphabetical order names.sort(reverse=True) # temp. sort print(sorted(names)) print(sorted(names, reverse=True)) # reversing the order of a list names.reverse() . range() - use to work with number efficiently . for number in range(11): print(number) # making list of numbers 1 to 10 # using the list() value can generate a large list of numbers numbers = list(range(1, 10)) . min() - find the least value in list . nums = [10, 30, 40, 60, 70, 60] least = min(nums) print(min(nums)) . max() - find the highest value in list . nums = [10, 30, 40, 60, 70, 60] highest = max(nums) print(max(nums)) . sum() - sum of all in list . nums = [10, 30, 40, 60, 70, 60] total = sum(nums) print(sum(nums)) . Practice Question . Using the information above fill in the missing code . nums = [] nums.#missing code &#39;15&#39; nums.#missing code &#39;43&#39; nums.#missing code &#39;81&#39; nums.#missing code &#39;25&#39; least = #missing code print(#missing code) . AP Exam Reference Sheet . Since CS is taught in different languages the pseudocode represents fundamental programming concepts. . provides basic operations on lists | provides pseudocode for loops | helps you understand code used in questions | students can use this reference sheet in the AP Exam | . APCSP Testing Reference Sheet . If you looked at the reference sheet and seem to not understand some concepts here is a Khan Academy resource which can help you understand specific topics. . Khan Academy Resource . Practice Question . If the list words contain [&#39;song&#39;, &#39;book&#39;, &#39;video&#39;, &#39;book&#39;] what will be the following code output . Unit 3.10 (Ethan Tran) . Traversing a list is the process of visiting each element in a list in a sequential order. It can be used to access, search for, and modify elements in the list. | . Traversing Lists . 1) Complete Traversal: All elements in a list are assessed . 2) Partial Traversal: Only a given portion of elements are assessed . 3) Iterative Traversal: When loops are used to iterate through a list and to access each single element at a time. . Quick Lists Reference Sheet . A given element of a list can be evaluated using index, [ ] | . 1) Ex. listName[i] 2) Ex. listName[3] . insert( ) allows a value to be inserted into a list at index i | append( ) allows a value to be added at the end of a list | remove( ) allows an element at index i to be deleted from a list | length( ) returns the number of elements currently in a specific list | . . A loop such as the example above allows a user to access each item within the list . College Board Example Question . . . HACKS Unit 3 Section 10 . Find the lowest value in a list (Luna Iwazaki) . Part 1 . Use the list made bellow | Make a variable to hold the minimum and set it to potential minimum value | Loop | Check each element to see if it is less than the minimum variable | If the element is less than the minimum variable, update the minimum | After all the elements of the list have been checked, display the minimum value | . nums = [&#39;38&#39;, &#39;45&#39;, &#39;67&#39;, &#39;83&#39;, &#39;78&#39;] minimum = min(nums) print(min(nums)) . 38 . Part 2 . look at the apcsp reference sheet and take notes about ones you don&#39;t understand (at least 4) . Lists Quiz (Ethan Tran) . Take a screenshot of your score on put it on your review ticket! . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . What allows an element at index i to be deleted from a list? remove() Correct! What allows a value to be added at the end of a list? append() Correct! What allows a value to be inserted into a list at index i? index() Correct! What returns the number of elements currently in a specific list? length() Correct! 100.00% Your total score is: 4 out of 4. Not too bad, keep on studying! . . . College Board Reference Sheets . List Operations . .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/lesson%20plans/2022/11/28/Unit_3.8_3.10.html",
            "relUrl": "/lesson%20plans/2022/11/28/Unit_3.8_3.10.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Lesson 3.1 and 3.2 Homework",
            "content": "Hack 1: . Hack 2: In your own words, briefly explain by writing down what an assignment operator is . an operator is a procedure that gives an output. | . In Collegeboard pseudocode, what symbol is used to assign values to variables? . the symbol &lt;– is used to assign a variable for college board (or in pseudo code). | . A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? . If you print x, then the value will be changed to 22 because the computer takes the variable that has been assigned the latest. Since assigning x to 22 is the most recent line of code, more recent than x = 15, the program will output 22. | . Hack 3: What is a list? . a list is a series of variables. | . What is an element . a smaller component in a larger system of code | . What is an easy way to reference the elements in a list or string? . it is easier to reference the elements in a list because that way they are all in one place and are in one line of code instead of multiple. | . What is an example of a string . 123-456-7890 (a phone number) | . List: . Index: . Hack 4: . Hack 5: Python Quiz . Before: . Simplified version: . Why are using lists better for a program, rather than writing out each line of code? . lists are better because that way you have all your variables in one place instead of multiple lines of code. It also manages complexity. | . My own version of a list (both the long way and the simple way :) .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/c7.2/2022/11/28/Lesson1&2-Homework.html",
            "relUrl": "/c7.2/2022/11/28/Lesson1&2-Homework.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Final Exam Reflection (Trimester 1)",
            "content": "Question 1: I thought that the answer was C because the function is being repeated three times, but I realize that C says that is being repeated 5 times, which is not what is happening. If you were to write out the function, it would be: 2 x 5 x 5 x 5, which is the same thing as 2(5)^3, hence why we limit it to C and D. But the correct answer is D because we multiply the result by 5 and that happens three times (repeats 3 times), that is why the Answer is D . . Question 4: I thought all three was correct because Alejandra would need their contacts in order to set up the meal. But as it turns out, onlly the user needs to give the contact, which when I see it, the question does say that. So only one and two are correct because they need the location of Alejandra to see what places are nearby and they need to know what are the dietary restrictions of each person in the group. . . Question 6: The answer is B because It will continue to repeat until the procedure has reached the max, whatever number that may be. The count starts at one, and since it hasn&#39;t reached the max yet, it will add two to it, making it the next odd integer and it will repeat through that cycle until it reaches the max, making it less than or equal to the max, printing only positive odd integers. When I first did this, I didn&#39;t understand what the first part of the code was doing. Now I do. . . Question 8: Since the numlist k and the numlist j were assigned to each other, they have been swapped, their values have been swapped. But what I couldn&#39;t understand is why it had to be between 1 and the length of the list. I think it is because one is the starting of the list in this case, and not 0, and obviously the end had to be the length of the list, so in a way it makes sense that j and k have to be in between those two numbers. . . Question 11: The j + 1 make it so that the program compares with all of the values that follow right after, not just one value that follows after, that is why C is wrong and why D must be wrong to because it doesn&#39;t only compare values that preceed it. B makes the most sense because it means that the program will compare the values in order, which makes more sense than the program comparing all the values randommly. . . Question 13: What the question was asking, and I didn&#39;t get this, was which one of the lists provided in the answer choices would give a different result than expected of the program. It makes sense that the answer is C because if you plug in A in the procedure, then it will return false for all the values, which is what we want to happen because it contains no positive values, the same goes for B, so we can cross them out. Then comes D, where all of the values will return true because they are positve, which is true because the entire list has positive values, so the program works for that list, so we can eliminate D. But when we get to C, the program says false for the first to numbers, but then true for 1, which shouldn&#39;t be true because in order for it to be true, the entire list would have to be full of positive integers, which is not the case. . . Question 18: C has to be the correct answer because the internet is a network, which C is the only option that mentions that. But also, the World Wide Web has to be several linked pages in programs and not just one because you can get all sorts of information from them and they are not apart of the same page, so C has to be the right answer. D isn&#39;t because I am pretty sure that the internet uses protocols and is not a protocol itself. . . Question 23: Analog data can be measured by samples, and a sequence of bits, which is why D makes the most sense. I didn&#39;t know that when I thought of the answer to this question, but now I do. . . Question 25: This was a simple mistake. since age was a word, I thought that it was a string, but it turns out that age is usually represented as a number. Maybe because we usually asign it to a number so that is probably why. . . Question 27: Student name is a string, because it is a word, but the absent part being a boolean confused me a litte. But it makes sense now because a boolean value is a value that either true of false. So, you can either be absent or not and that is why it is a boolean value. . . Question 35: The part with if else statement I got because it is pretty straightforward. But the other answer, A and B, I couldn&#39;t decide where to put the maxPS &lt;--50, on the top of the bottom. It is on the top, I think, because if that requirent is not met, then it will go down to the next line of code instead of the other way around. . . Question 36: It was the same problem I had with the previous question. I knew either C or D was the correct answer but I didn&#39;t know whether the APPEND function went first or not. Now I know that in this case it does. . . Question 45: I think it is B because since the value has to be greater than 0 for both, you can&#39;t start at 0. So then you got the next number, which is 1, and then the line of code starts to execute and that is why you get those numbers. . . What I did when I got stuck: . The first thing I did when I got stuck on these questions is that I looked at the question closely and see if there were any hints as to what the topic the question was directing to. Luckily, the question would say something like binary numbers or data abstraction, so that gave me a clue as to what topic I needed to look at. Then I would find that topic on college board (one of the topics straight up said Binary Numbers, or something like that) and then I would look at the videos on that topic to get a better idea of what that topic was, because I had no idea what that topic was. And then after that I would take that information and answer the question, which was a lot easier after seeing the college board videos. There were also questions that were more vocab based. One question asked something about Boolean values, and I didn&#39;t know what boolean meant, so then I would search it up on the internet to know what boolean meant and then approach the question. After submitting the test, the college board explanations for the questions that I didn&#39;t understand also helped me to better understand why one answer was better than the other, and If it didn&#39;t make sense, then I would search up and see if there was a response on the internet that would make more sense to me. This what I did to better help me understand these questions. | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/college%20board%20quizzes/tests/2022/11/06/Final-Exam-Reflection.html",
            "relUrl": "/college%20board%20quizzes/tests/2022/11/06/Final-Exam-Reflection.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit Notes",
            "content": "| Identifying and Correcting Errors | Python RapidAPI | College Board Questions | Team Project Idea | Unit Notes | . . Unit 1.1 Notes: . A computing innovation includes a program as an integral part of its function | One person is “the driver” where they type out the code. And the other person is “the navigator” who looks over the driver and monitors what they are doing | Sharing ideas with each other is important because then you get more idea | Leaving comments in code is helpful so you or your partner know where you left off or if there is something that needs fixing. | Ask people to test drive your program so that way you get more feedback. | . Unit 1.2 Notes: . There are physical devices such as watches and phones and pacemakers. There are applications such as media and games. And there are systems that are not stored on our local server. | Computers programs accept input in different forms | Computers can take in tactile, audio, visual and text “Events” are triggered by some action which send input to the program | Input effects the output | A statement is a single command and a group of statements are called code segments. | And code segments are different for different programming languages. | Program is often referred to as software | . Unit 1.3 Notes: . All programming starts with an idea and they are developed with a specific program in mind | There are several steps in the process. Both on what you should do and what you should not do | Once we have an idea, then we need to think on how we can turn this idea into reality. | There are time constraints too, so you have to understand how much time you have and plan accordingly. | Then brainstorm on what you have already figured out and it is another form of planning. | After brainstorming they will organize their ideas into modules and divide up the work so it is not too much work. | There is always testing after every step of the programming so they can monitor if the program is working correctly and if the user is able to interact with the program as intended. They also use user feedback to better their program. | . Unit 1.4 Notes: . Errors and programming go hand-in-hand and it is impossible to write a program without encountering at least one error. | A logic error is a mistake that the programmer makes when typing the line of code. | Syntax error is when a programmer makes a typo and the language doesn’t recognize it and the program fails to run. | A run-time error is when the program fails in the midst of running. This is commonly referred to as a bug | Overflow error results when the program is asked to calculate a problem that is outside the range of values | Use a number of test cases to make sure that your program works | Borderline cases should also be tested. | . Unit 4.1 Notes: . Computers are capable of sending and receiving data | A computer network is a group of interconnected computing devices capable of sending and receiving data. | Packet Switching: the message (file) is broken up into packets and sent in any order. | The packets are then reassembled by the recipient&#39;s device. | Bandwidth is the amount of data that can be sent in a fixed amount of time. | Protocols establish a common standard for how to send messages between devices on the internet | A packet contains data that is being transmitted as well as metadata containing information used for routing information. | The internet was designed to be scalable - able to change in size in order to meet new demands | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Unit/Notes",
            "relUrl": "/Unit/Notes",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "College Board Questions",
            "content": "| Identifying and Correcting Errors | Python RapidAPI | College Board Questions | Team Project Idea | Unit Notes | . . I got some things right, and some things wrong. | The ones that I got right were a little easy for me because it kind of had some math in it. the only thing I had to do was figure out what the program was trying to do and that wasn&#39;t so bad | The ones that I got wrong, I guess I didn&#39;t understand how it worked. But when I saw the answers I understood why the correct answer was a better answer then what I had picked. | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Collegeboard/Questions",
            "relUrl": "/Collegeboard/Questions",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Identifying and Correcting Errors",
            "content": "| Identifying and Correcting Errors | Python RapidAPI | College Board Questions | Team Project Idea | Unit Notes | . . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter c is the 3 letter in the alphabet . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . evens = [] i = 0 while i &lt; 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8] . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . menu = {&quot;burger&quot;:3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) #print(item) #code should add the price of the menu items selected by the user if item in menu: total = total =+ menu[item] print(total) if item not in menu: print(item, &quot;not found on menu&quot;) . Menu burger $3.99 fries $1.99 drink $0.99 donut not found on menu .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Python/Errors",
            "relUrl": "/Python/Errors",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Python RapidAPI",
            "content": "| Identifying and Correcting Errors | Python RapidAPI | College Board Questions | Team Project Idea | Unit Notes | . . import requests url = &quot;https://simple-elegant-translation-service.p.rapidapi.com/getSupportedLanguages&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;730331016fmsh1b9032a0b3ed8d7p143fa3jsn4f2e6f068f2f&quot;, &quot;X-RapidAPI-Host&quot;: &quot;simple-elegant-translation-service.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) #print(response.text) print(&quot;Language&quot;) languages = response.json().get(&#39;languages&#39;) for key, value in languages.items(): print(key,value) . Language af afrikaans am amharic ar arabic az azerbaijani be belarusian bg bulgarian bn bengali bs bosnian ca catalan ceb cebuano co corsican cs czech cy welsh da danish de german el greek en english eo esperanto es spanish et estonian eu basque fa persian fi finnish fil Filipino fr french fy frisian ga irish gd scots gaelic gl galician gu gujarati ha hausa haw hawaiian he Hebrew hi hindi hmn hmong hr croatian ht haitian creole hu hungarian hy armenian id indonesian ig igbo is icelandic it italian iw hebrew ja japanese jw javanese ka georgian kk kazakh km khmer kn kannada ko korean ku kurdish (kurmanji) ky kyrgyz la latin lb luxembourgish lo lao lt lithuanian lv latvian mg malagasy mi maori mk macedonian ml malayalam mn mongolian mr marathi ms malay mt maltese my myanmar (burmese) ne nepali nl dutch no norwegian ny chichewa pa punjabi pl polish ps pashto pt portuguese ro romanian ru russian sd sindhi si sinhala sk slovak sl slovenian sm samoan sn shona so somali sq albanian sr serbian st sesotho su sundanese sv swedish sw swahili ta tamil te telugu tg tajik th thai tl filipino tr turkish uk ukrainian ur urdu uz uzbek vi vietnamese xh xhosa yi yiddish yo yoruba zh-cn chinese (simplified) zh-tw chinese (traditional) zu zulu .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Python/RapidAPI",
            "relUrl": "/Python/RapidAPI",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Team Project",
            "content": "| Identifying and Correcting Errors | Python RapidAPI | College Board Questions | Team Project Idea | Unit Notes | . . Ideas . Our idea is to make a page where you can find a bunch of games that each one of us has created. We choose what games we want to create and we will put it on a blog for all to see and try! | . Now we started to brainstorm what games we could add to our blog. Games that weren&#39;t too complicated but also fit all the Collegeboard criteria. | Games such as Snake, Tetris, Pong, etc. | We decided that we would each pick a game to do and that would add up to multiple games. | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Team/Project",
            "relUrl": "/Team/Project",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Javascript Tutorial",
            "content": "| The Good Life Notes | App Lab Games | APCSP Panel Notes | Biology Quiz | Bio Quiz 2.0 | JavaScript | Python Lists | Bash Checks | . . console.log(&quot;Hello!&quot;); . var msg = &quot;Hello, World!&quot;; console.log(msg); . function logIt(output) { console.log(output); } logIt(msg); . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); logItType(2020); logItType([1, 2, 3]); . var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;unknown&quot;, 2024) ]; function Classroom(teacher, students){ teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } compsci = new Classroom(teacher, students); logItType(compsci.classroom); logItType(compsci.classroom[0].name); logItType(compsci.json[0]); logItType(JSON.parse(compsci.json[0])); . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Period&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Room #&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Javascript/Tutorial",
            "relUrl": "/Javascript/Tutorial",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "The Good Life Notes",
            "content": "| The Good Life Notes | App Lab Games | APCSP Panel Notes | Biology Quiz | Bio Quiz 2.0 | JavaScript | Python Lists | Bash Checks | . . Key Points . You can know the science of what makes you happy, but unless you practice it, you won&#39;t get any happier. | What we predict is going to make us happy, doesn&#39;t actually make us as happy as we think it will. | If you desire happiness, it requires perminent changes and effort everyday of your life. | Our mind lies to us when we think that something will make us happy (like money), when it really doesn&#39;t | Happy people prioritize people they care about first, and they are very social | Connecting with other people increases your wellbeing | Helping others hhelps us more then we expect | . .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/notes/Goodlife",
            "relUrl": "/notes/Goodlife",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "App Lab Game",
            "content": "| The Good Life Notes | App Lab Games | APCSP Panel Notes | Biology Quiz | Bio Quiz 2.0 | JavaScript | Python Lists | Bash Checks | . . About the process: My goal was to create an app like game and at first it was frustrating. I created this game, kind of like a ping pong game, where you have a ball that goes in all directions, and you have a paddle where it can bounce off of. And there is a coin that you have to try to get, and when you get it, you get a point and the ball moves a little faster and the game continues. I got all of the code to work and the images, but no matter what I did, the paddle and the ball would not move like it was supposed to. Eventually I just left it because there was nothing wrong with my code, but there was nothing I could do to change it. Instead I settled on a quiz about myself and that was pretty easy. Overall I thought being creative was fun and I liked doing this. Although, I hated the frustration of not getting my game to work. . My Quiz | My game that did not work and what it should have looked like if it had worked | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Games/Applab",
            "relUrl": "/Games/Applab",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "APCSP Panel Notes",
            "content": "| The Good Life Notes | App Lab Games | APCSP Panel Notes | Biology Quiz | Bio Quiz 2.0 | JavaScript | Python Lists | Bash Checks | . . Notes: How did you realize you wanted to do computers? . A few of the people said that they took it because they liked problem solving, others said thhey liked it because they were good at it, and one more said she didn&#39;t like it but it was useful for many things and doing a few internships solidified her choice. | . What is the biggest challenge you&#39;ve encountered in computers? . Starting sucks | There is a solution to everything and you just have to have enough patience | It is hard finding motivation to continue | Fighting the temptation to copy work just to get over it | always getting a syntax error is super frustrating and hard | . Are there any PBL scenarios in college computer science classes? . There are a few projects, one that you do in Freshman year and another you do in Senior year. | Both in class and out of class, a lot of people study in groups and work with other people to learn better because the Professor has too many students and won&#39;t always be able to answer your questions. | Finding a good group is important because you rely on them to learn | . Have you applied CS in your major? . Coding will be everywhere and it can be used for pretty much anything | It can be used for all of your assignments and is really useful | What we are now learning is applicable to pretty much everything | . For existing college students, have you had a job for school or with a professor? . They recommend resumes | Doing internships and jobs | Some professors have clubs and others have research labs, and you can ask if there is a spot available and join | There are path finding algorithms everywhere | . KEY TAKEAWAYS: Computer Science can be used for anything and coding is used for everything so it is an important skill to learn. There are also many jobs that use the things/tools that we are learning in class so the more we learn, the more we can put it to use. And yes, computers can be frustrating, but they are worth the hardwork and patience and when you get through it, the output is most of the time rewarding. So this class is important and it is important to always try our best and learn as much as possible. .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/APCSP/Panelnotes",
            "relUrl": "/APCSP/Panelnotes",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Biology Quiz",
            "content": "| The Good Life Notes | App Lab Games | APCSP Panel Notes | Biology Quiz | Bio Quiz 2.0 | JavaScript | Python Lists | Bash Checks | . . def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 10 correct = 0 print(&#39;Hello,&#39; + getpass.getuser()) print(&quot;You will be asked &quot; + str(questions) +&quot; questions. &quot;) questions = [&quot;Are you ready to take the Quiz?&quot;, &quot;What are nitrogenous bases in DNA?&quot;, &quot;What does DNA stand for?&quot;, &quot;Who was the person who came up with the theory of Evolution?&quot;,&quot;In what cell does photosynthesis take place?&quot;, &quot;What is the name of the relationship in which both sides benefit?&quot;, &quot;Glycogen is a polymer of what?&quot;, &quot;How many chromosomes do humans have?&quot;, &quot;What are the weak bonds between water molecules called?&quot;, &quot;What is the division of body cells called?&quot;, &quot;What is the division of gametes called?&quot;] answers = [&quot;yes&quot;, &quot;Adenine, Guanine, Cytosine, Thymine&quot;, &quot;Deoxyribonucleic Acid&quot;, &quot;Charles Darwin&quot;,&quot;Chloroplast&quot;, &quot;Mutualism&quot;, &quot;Glucose&quot;, &quot;46&quot;, &quot;Hydrogen bonds&quot;, &quot;Mitosis&quot;, &quot;Meiosis&quot;] for i in range(len(questions)): rsp = question_with_response(questions[i]) if rsp == answers[i]: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect&quot;) print(&quot;The correct answer is &quot; + answers[i]) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/10&quot;) . Hello,srihitak You will be asked 10 questions. Question: Are you ready to take the Quiz? yes is correct! Question: What are nitrogenous bases in DNA? thymine is incorrect The correct answer is Adenine, Guanine, Cytosine, Thymine Question: What does DNA stand for? Deoyribonucleic Acid is incorrect The correct answer is Deoxyribonucleic Acid Question: Who was the person who came up with the theory of Evolution? Charles Darwin is correct! Question: In what cell does photosynthesis take place? Chloroplast is correct! Question: What is the name of the relationship in which both sides benefit? Mutualism is correct! Question: Glycogen is a polymer of what? Glycogen is incorrect The correct answer is Glucose Question: How many chromosomes do humans have? 46 is correct! Question: What are the weak bonds between water molecules called? Hydrogen bonds is correct! Question: What is the division of body cells called? Mitosis is correct! Question: What is the division of gametes called? Meiosis is correct! srihitak you scored 8/10 .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Biology/Quiz",
            "relUrl": "/Biology/Quiz",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Bio  Quiz 2.0",
            "content": "| The Good Life Notes | App Lab Games | APCSP Panel Notes | Biology Quiz | Bio Quiz 2.0 | JavaScript | Python Lists | Bash Checks | . . # variable of type string print(&quot;What medicine do people use when they are sick?&quot;) name = &quot;Anti-biotics&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;How do you know which person got the illness first?&quot;) answer = &quot;You know if the person has a lot of antigens in their system. it means they were fighting the disease longer.&quot; print(&quot;answer&quot;, answer, type(answer)) print() # variable of type float print(&quot;What is my ideal score in any class?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;There are many types of antibiotics.&quot;) print(&quot;What are the names of some of them?&quot;) pills = [&quot;amoxicillin&quot;, &quot;Penicillin&quot;, &quot;cephalexin&quot;] print(&quot;pills&quot;, pills, type(pills), &quot;length&quot;, len(pills)) print(&quot;- pills[0]&quot;, pills[0], type(pills[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) questions_and_answers = { &quot;name&quot;: name, &quot;answer&quot;: answer, &quot;score&quot;: score, &quot;pills&quot;: pills } print(&quot;Question and answers&quot;, questions_and_answers, type(questions_and_answers), &quot;length&quot;, len(questions_and_answers)) print(&#39;- questions and answers[&quot;name&quot;]&#39;, questions_and_answers[&quot;name&quot;], type(questions_and_answers[&quot;name&quot;])) . What medicine do people use when they are sick? name Anti-biotics &lt;class &#39;str&#39;&gt; How do you know which person got the illness first? answer You know if the person has a lot of antigens in their system. it means they were fighting the disease longer. &lt;class &#39;str&#39;&gt; What is my ideal score in any class? score 90.0 &lt;class &#39;float&#39;&gt; There are many types of antibiotics. What are the names of some of them? pills [&#39;amoxicillin&#39;, &#39;Penicillin&#39;, &#39;cephalexin&#39;] &lt;class &#39;list&#39;&gt; length 3 - pills[0] amoxicillin &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? Question and answers {&#39;name&#39;: &#39;Anti-biotics&#39;, &#39;answer&#39;: &#39;You know if the person has a lot of antigens in their system. it means they were fighting the disease longer.&#39;, &#39;score&#39;: 90.0, &#39;pills&#39;: [&#39;amoxicillin&#39;, &#39;Penicillin&#39;, &#39;cephalexin&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - questions and answers[&#34;name&#34;] Anti-biotics &lt;class &#39;str&#39;&gt; .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Bioquiz/2",
            "relUrl": "/Bioquiz/2",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Python Lists",
            "content": "| The Good Life Notes | App Lab Games | APCSP Panel Notes | Biology Quiz | Bio Quiz 2.0 | JavaScript | Python Lists | Bash Checks | . . # variable of type string name = &quot;Sri Kotturi&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;, &quot;html&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[2]&quot;, langs[2], type(langs[2])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Sri Kotturi &lt;class &#39;str&#39;&gt; age 16 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;html&#39;] &lt;class &#39;list&#39;&gt; - langs[2] Java &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Sri Kotturi&#39;, &#39;age&#39;: 16, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;html&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Sri Kotturi &lt;class &#39;str&#39;&gt; . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Srihita&quot;, &quot;LastName&quot;: &quot;Kotturi&quot;, &quot;DOB&quot;: &quot;December 13&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;srihita.kotturi@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Hundai Accent&quot;], &quot;Favorite_Activity&quot;: &quot;Watching TV!&quot; }) print(InfoDb) . [{&#39;FirstName&#39;: &#39;Srihita&#39;, &#39;LastName&#39;: &#39;Kotturi&#39;, &#39;DOB&#39;: &#39;December 13&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;srihita.kotturi@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Hundai Accent&#39;], &#39;Favorite_Activity&#39;: &#39;Watching TV!&#39;}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Srihita Kotturi Residence: San Diego Birth Day: December 13 Cars: Hundai Accent . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Srihita Kotturi Residence: San Diego Birth Day: December 13 Cars: Hundai Accent . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Srihita Kotturi Residence: San Diego Birth Day: December 13 Cars: Hundai Accent .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Python/Lists",
            "relUrl": "/Python/Lists",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Back Checks",
            "content": "| The Good Life Notes | App Lab Games | APCSP Panel Notes | Biology Quiz | Bio Quiz 2.0 | JavaScript | Python Lists | Bash Checks | . . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode-SRIHITAKOTT1213 # change vscode to different name to test git clone export project=$project_dir/APCSP-Blog-Assignment # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/SRIHITAKOTT1213/APCSP-Blog-Assignment.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts . echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks # _notebooks is inside project cd $notebooks # this should exist per fastpages pwd # present working directory ls -l # list notebooks . echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images # this should exist per fastpages pwd ls -l . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project echo &quot;show the contents of README.md&quot; echo &quot;&quot; cat README.md # show contents of file, in this case markdown echo &quot;&quot; echo &quot;end of README.md&quot; . echo &quot;Show the shell environment variables, key on left of equal value on right&quot; echo &quot;&quot; env . cd $project echo &quot;&quot; echo &quot;show the secrets of .git&quot; cd .git ls -l echo &quot;&quot; echo &quot;look at config file&quot; cat config .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Bash/Checks",
            "relUrl": "/Bash/Checks",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Shift Left Plus Binary Octal Hexadecimal Decimal Minus . &lt;- | +1 | 00000000 | 0 | 0 | 0 | -1 | . 16 | 8 | 4 | 2 | 1 | . Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | . . Byte Binary Hexadecimal . 00000000 | # 000000 | . Red&emsp;&emsp; Blue&emsp;&emsp; Black&emsp;&emsp; Gray&emsp;&emsp; White&emsp;&emsp; Orange&emsp;&emsp;",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Schedule",
          "content": "Introduction to Tools and Resources . This is where all my assignments that are posted on my blog can be found . Week Work . 3 | App Lab Game | . 2 🚧 | Python Lists Bio Quiz 2.0 Panel Notes | . 1 💰 | Biology Quiz Bash Checks | . 0 💰 | Build a Website | .",
          "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/schedule",
          "relUrl": "/schedule",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Frontend",
          "content": "| The Good Life Notes | App Lab Games | APCSP Panel Notes | Biology Quiz | Bio Quiz 2.0 | JavaScript | Python Lists | Bash Checks | .",
          "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/frontend",
          "relUrl": "/frontend",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "API",
          "content": "| Identifying and Correcting Errors | Python RapidAPI | College Board Questions | Team Project Idea | Unit Notes | .",
          "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/api/overview",
          "relUrl": "/api/overview",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "About Me",
          "content": "This website is powered by APCSP 1. . A blog for computer science principles. &#8617; . |",
          "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}