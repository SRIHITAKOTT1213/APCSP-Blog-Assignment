{
  
    
        "post0": {
            "title": "Title",
            "content": "menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 . import requests url = &quot;https://currencyscoop.p.rapidapi.com/latest&quot; querystring = {&quot;date&quot;:&quot;2020-01-05&quot;} headers = { &#39;x-rapidapi-key&#39;: &quot;730331016fmsh1b9032a0b3ed8d7p143fa3jsn4f2e6f068f2f&quot;, &#39;x-rapidapi-host&#39;: &quot;currencyscoop.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) #print(response.text) response.json() . {&#39;meta&#39;: {&#39;code&#39;: 200, &#39;disclaimer&#39;: &#39;Usage subject to terms: https://currencyscoop.com/terms&#39;}, &#39;response&#39;: {&#39;date&#39;: &#39;2022-10-09T03:05:44Z&#39;, &#39;base&#39;: &#39;USD&#39;, &#39;rates&#39;: {&#39;ADA&#39;: 2.3749451, &#39;AED&#39;: 3.6725, &#39;AFN&#39;: 87.78115648, &#39;ALL&#39;: 120.0478389, &#39;AMD&#39;: 403.46195653, &#39;ANG&#39;: 1.78750004, &#39;AOA&#39;: 439.16499699, &#39;ARS&#39;: 149.20324734, &#39;ATS&#39;: 14.12732022, &#39;AUD&#39;: 1.5672593, &#39;AWG&#39;: 1.79, &#39;AZM&#39;: 8501.30839445, &#39;AZN&#39;: 1.70026168, &#39;BAM&#39;: 2.00799668, &#39;BBD&#39;: 2, &#39;BCH&#39;: 0.00849661, &#39;BDT&#39;: 102.75113644, &#39;BEF&#39;: 41.41586193, &#39;BGN&#39;: 2.00799668, &#39;BHD&#39;: 0.376, &#39;BIF&#39;: 2049.10436415, &#39;BMD&#39;: 1, &#39;BND&#39;: 1.43297038, &#39;BOB&#39;: 6.93499379, &#39;BRL&#39;: 5.20142931, &#39;BSD&#39;: 1, &#39;BTC&#39;: 5.159e-05, &#39;BTN&#39;: 82.81832929, &#39;BWP&#39;: 13.27730505, &#39;BYN&#39;: 2.53504668, &#39;BYR&#39;: 25350.46684911, &#39;BZD&#39;: 2.01520957, &#39;CAD&#39;: 1.37388668, &#39;CDF&#39;: 1999.14155178, &#39;CHF&#39;: 0.99464926, &#39;CLF&#39;: 0.03808099, &#39;CLP&#39;: 938.29122984, &#39;CNH&#39;: 7.13228126, &#39;CNY&#39;: 7.11275673, &#39;COP&#39;: 4615.14054536, &#39;CRC&#39;: 638.89802157, &#39;CUC&#39;: 1, &#39;CUP&#39;: 23.91587767, &#39;CVE&#39;: 113.21116551, &#39;CYP&#39;: 0.60088466, &#39;CZK&#39;: 25.13043019, &#39;DEM&#39;: 2.00799668, &#39;DJF&#39;: 177.99981658, &#39;DKK&#39;: 7.63457801, &#39;DOGE&#39;: 16.26246975, &#39;DOP&#39;: 53.78996861, &#39;DOT&#39;: 0.15878609, &#39;DZD&#39;: 141.13999574, &#39;EEK&#39;: 16.06397343, &#39;EGP&#39;: 19.66237468, &#39;ERN&#39;: 15, &#39;ESP&#39;: 170.82391388, &#39;ETB&#39;: 52.97582209, &#39;ETH&#39;: 0.00076391, &#39;EUR&#39;: 1.0266724, &#39;FIM&#39;: 6.10431689, &#39;FJD&#39;: 2.31336278, &#39;FKP&#39;: 0.90154817, &#39;FRF&#39;: 6.73452947, &#39;GBP&#39;: 0.90154817, &#39;GEL&#39;: 2.7997002, &#39;GGP&#39;: 0.90154817, &#39;GHC&#39;: 104027.13350752, &#39;GHS&#39;: 10.40271335, &#39;GIP&#39;: 0.90154817, &#39;GMD&#39;: 55.60376505, &#39;GNF&#39;: 8622.96254682, &#39;GRD&#39;: 349.83862017, &#39;GTQ&#39;: 7.89451439, &#39;GYD&#39;: 209.98498112, &#39;HKD&#39;: 7.84973485, &#39;HNL&#39;: 24.67659796, &#39;HRK&#39;: 7.72675836, &#39;HTG&#39;: 120.49907956, &#39;HUF&#39;: 435.94742364, &#39;IDR&#39;: 15230.10904275, &#39;IEP&#39;: 0.80857022, &#39;ILS&#39;: 3.5462737, &#39;IMP&#39;: 0.90154817, &#39;INR&#39;: 82.81832929, &#39;IQD&#39;: 1459.66209415, &#39;IRR&#39;: 42025.29754378, &#39;ISK&#39;: 143.64721423, &#39;ITL&#39;: 1987.91496723, &#39;JEP&#39;: 0.90154817, &#39;JMD&#39;: 151.24607294, &#39;JOD&#39;: 0.709, &#39;JPY&#39;: 145.35082174, &#39;KES&#39;: 120.94919245, &#39;KGS&#39;: 81.31608533, &#39;KHR&#39;: 4119.26612267, &#39;KMF&#39;: 505.08971043, &#39;KPW&#39;: 900.00000041, &#39;KRW&#39;: 1414.19946001, &#39;KWD&#39;: 0.31119844, &#39;KYD&#39;: 0.82000387, &#39;KZT&#39;: 472.12876879, &#39;LAK&#39;: 16641.13469545, &#39;LBP&#39;: 1507.5, &#39;LINK&#39;: 0.134451, &#39;LKR&#39;: 364.18548254, &#39;LRD&#39;: 153.65961457, &#39;LSL&#39;: 18.08907132, &#39;LTC&#39;: 0.01888817, &#39;LTL&#39;: 3.54489446, &#39;LUF&#39;: 41.41586193, &#39;LUNA&#39;: 0, &#39;LVL&#39;: 0.72154536, &#39;LYD&#39;: 4.982989, &#39;MAD&#39;: 10.98434922, &#39;MDL&#39;: 19.35058877, &#39;MGA&#39;: 4228.32331747, &#39;MGF&#39;: 21141.61658733, &#39;MKD&#39;: 63.1901835, &#39;MMK&#39;: 2095.7955716, &#39;MNT&#39;: 3365.09842965, &#39;MOP&#39;: 8.0852269, &#39;MRO&#39;: 379.50330596, &#39;MRU&#39;: 37.9503306, &#39;MTL&#39;: 0.44075046, &#39;MUR&#39;: 45.49818896, &#39;MVR&#39;: 15.66926606, &#39;MWK&#39;: 1018.41809832, &#39;MXN&#39;: 20.04361595, &#39;MXV&#39;: 2.85773612, &#39;MYR&#39;: 4.65106979, &#39;MZM&#39;: 63816.87522204, &#39;MZN&#39;: 63.81687522, &#39;NAD&#39;: 18.08907132, &#39;NGN&#39;: 433.68696352, &#39;NIO&#39;: 36.17339233, &#39;NLG&#39;: 2.26248823, &#39;NOK&#39;: 10.71637989, &#39;NPR&#39;: 132.57144061, &#39;NZD&#39;: 1.78374843, &#39;OMR&#39;: 0.38510212, &#39;PAB&#39;: 1, &#39;PEN&#39;: 3.94679966, &#39;PGK&#39;: 3.52111161, &#39;PHP&#39;: 58.92609412, &#39;PKR&#39;: 219.74215141, &#39;PLN&#39;: 4.99005143, &#39;PTE&#39;: 205.82933602, &#39;PYG&#39;: 7133.84802816, &#39;QAR&#39;: 3.64, &#39;ROL&#39;: 50575.09985645, &#39;RON&#39;: 5.05750999, &#39;RSD&#39;: 120.39524362, &#39;RUB&#39;: 62.35082853, &#39;RWF&#39;: 1041.6927996, &#39;SAR&#39;: 3.75, &#39;SBD&#39;: 8.16990667, &#39;SCR&#39;: 14.73078317, &#39;SDD&#39;: 56538.48437536, &#39;SDG&#39;: 565.38484375, &#39;SEK&#39;: 11.2224168, &#39;SGD&#39;: 1.43297038, &#39;SHP&#39;: 0.90154817, &#39;SIT&#39;: 246.03177385, &#39;SKK&#39;: 30.92953271, &#39;SLE&#39;: 16.43003866, &#39;SLL&#39;: 16430.03865809, &#39;SOS&#39;: 571.40406204, &#39;SPL&#39;: 0.16666667, &#39;SRD&#39;: 27.70343743, &#39;SRG&#39;: 27703.43743266, &#39;STD&#39;: 25199.15155387, &#39;STN&#39;: 25.19915155, &#39;SVC&#39;: 8.75, &#39;SYP&#39;: 2512.53436786, &#39;SZL&#39;: 18.08907132, &#39;THB&#39;: 37.62366656, &#39;TJS&#39;: 10.10732198, &#39;TMM&#39;: 17467.74353138, &#39;TMT&#39;: 3.49354871, &#39;TND&#39;: 3.26251984, &#39;TOP&#39;: 2.38379662, &#39;TRL&#39;: 18590633.15665266, &#39;TRY&#39;: 18.59063316, &#39;TTD&#39;: 6.77008072, &#39;TVD&#39;: 1.5672593, &#39;TWD&#39;: 31.76039851, &#39;TZS&#39;: 2330.47557898, &#39;UAH&#39;: 36.60362203, &#39;UGX&#39;: 3821.01412081, &#39;UNI&#39;: 15.24200253, &#39;USD&#39;: 1, &#39;UYU&#39;: 40.98376728, &#39;UZS&#39;: 11051.28816495, &#39;VAL&#39;: 1987.91496723, &#39;VEB&#39;: 819495007.1266052, &#39;VED&#39;: 8.19495007, &#39;VEF&#39;: 819495.00712661, &#39;VES&#39;: 8.19495007, &#39;VND&#39;: 23880.01607075, &#39;VUV&#39;: 122.75978198, &#39;WST&#39;: 2.78550617, &#39;XAF&#39;: 673.45294724, &#39;XAG&#39;: 0.04967063, &#39;XAU&#39;: 0.00059007, &#39;XBT&#39;: 5.159e-05, &#39;XCD&#39;: 2.70000358, &#39;XDR&#39;: 0.77971857, &#39;XLM&#39;: 7.98053658, &#39;XOF&#39;: 673.45294724, &#39;XPD&#39;: 0.00045153, &#39;XPF&#39;: 122.51460616, &#39;XPT&#39;: 0.00108842, &#39;XRP&#39;: 1.95685934, &#39;YER&#39;: 250.18004316, &#39;ZAR&#39;: 18.08907132, &#39;ZMK&#39;: 15910.53937569, &#39;ZMW&#39;: 15.91053938, &#39;ZWD&#39;: 361.9, &#39;ZWL&#39;: 626.77096887}}} . import requests url = &quot;https://covid-19-coronavirus-statistics.p.rapidapi.com/v1/stats&quot; querystring = {&quot;country&quot;:&quot;Canada&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;730331016fmsh1b9032a0b3ed8d7p143fa3jsn4f2e6f068f2f&quot;, &quot;X-RapidAPI-Host&quot;: &quot;covid-19-coronavirus-statistics.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) #print(response.text) response.json() . {&#39;error&#39;: False, &#39;statusCode&#39;: 200, &#39;message&#39;: &#39;OK&#39;, &#39;data&#39;: {&#39;lastChecked&#39;: &#39;2022-10-09T02:05:51.246Z&#39;, &#39;covid19Stats&#39;: [{&#39;city&#39;: None, &#39;province&#39;: &#39;Alberta&#39;, &#39;country&#39;: &#39;Canada&#39;, &#39;lastUpdate&#39;: &#39;2022-10-08T04:22:56+00:00&#39;, &#39;keyId&#39;: &#39;Alberta, Canada&#39;, &#39;confirmed&#39;: 607289, &#39;deaths&#39;: 4905, &#39;recovered&#39;: None}, {&#39;city&#39;: None, &#39;province&#39;: &#39;British Columbia&#39;, &#39;country&#39;: &#39;Canada&#39;, &#39;lastUpdate&#39;: &#39;2022-10-08T04:22:56+00:00&#39;, &#39;keyId&#39;: &#39;British Columbia, Canada&#39;, &#39;confirmed&#39;: 385599, &#39;deaths&#39;: 4321, &#39;recovered&#39;: None}, {&#39;city&#39;: None, &#39;province&#39;: &#39;Diamond Princess&#39;, &#39;country&#39;: &#39;Canada&#39;, &#39;lastUpdate&#39;: &#39;2020-12-21T13:27:30+00:00&#39;, &#39;keyId&#39;: &#39;Diamond Princess, Canada&#39;, &#39;confirmed&#39;: 0, &#39;deaths&#39;: 1, &#39;recovered&#39;: None}, {&#39;city&#39;: None, &#39;province&#39;: &#39;Grand Princess&#39;, &#39;country&#39;: &#39;Canada&#39;, &#39;lastUpdate&#39;: &#39;2020-12-21T13:27:30+00:00&#39;, &#39;keyId&#39;: &#39;Grand Princess, Canada&#39;, &#39;confirmed&#39;: 13, &#39;deaths&#39;: 0, &#39;recovered&#39;: None}, {&#39;city&#39;: None, &#39;province&#39;: &#39;Manitoba&#39;, &#39;country&#39;: &#39;Canada&#39;, &#39;lastUpdate&#39;: &#39;2022-10-08T04:22:56+00:00&#39;, &#39;keyId&#39;: &#39;Manitoba, Canada&#39;, &#39;confirmed&#39;: 150213, &#39;deaths&#39;: 2177, &#39;recovered&#39;: None}, {&#39;city&#39;: None, &#39;province&#39;: &#39;New Brunswick&#39;, &#39;country&#39;: &#39;Canada&#39;, &#39;lastUpdate&#39;: &#39;2022-10-08T04:22:56+00:00&#39;, &#39;keyId&#39;: &#39;New Brunswick, Canada&#39;, &#39;confirmed&#39;: 78056, &#39;deaths&#39;: 490, &#39;recovered&#39;: None}, {&#39;city&#39;: None, &#39;province&#39;: &#39;Newfoundland and Labrador&#39;, &#39;country&#39;: &#39;Canada&#39;, &#39;lastUpdate&#39;: &#39;2022-10-08T04:22:56+00:00&#39;, &#39;keyId&#39;: &#39;Newfoundland and Labrador, Canada&#39;, &#39;confirmed&#39;: 51955, &#39;deaths&#39;: 243, &#39;recovered&#39;: None}, {&#39;city&#39;: None, &#39;province&#39;: &#39;Northwest Territories&#39;, &#39;country&#39;: &#39;Canada&#39;, &#39;lastUpdate&#39;: &#39;2022-10-08T04:22:56+00:00&#39;, &#39;keyId&#39;: &#39;Northwest Territories,Canada&#39;, &#39;confirmed&#39;: 11511, &#39;deaths&#39;: 22, &#39;recovered&#39;: None}, {&#39;city&#39;: None, &#39;province&#39;: &#39;Nova Scotia&#39;, &#39;country&#39;: &#39;Canada&#39;, &#39;lastUpdate&#39;: &#39;2022-10-08T04:22:56+00:00&#39;, &#39;keyId&#39;: &#39;Nova Scotia, Canada&#39;, &#39;confirmed&#39;: 126598, &#39;deaths&#39;: 544, &#39;recovered&#39;: None}, {&#39;city&#39;: None, &#39;province&#39;: &#39;Nunavut&#39;, &#39;country&#39;: &#39;Canada&#39;, &#39;lastUpdate&#39;: &#39;2022-10-08T04:22:56+00:00&#39;, &#39;keyId&#39;: &#39;Nunavut, Canada&#39;, &#39;confirmed&#39;: 3531, &#39;deaths&#39;: 7, &#39;recovered&#39;: None}, {&#39;city&#39;: None, &#39;province&#39;: &#39;Ontario&#39;, &#39;country&#39;: &#39;Canada&#39;, &#39;lastUpdate&#39;: &#39;2022-10-08T04:22:56+00:00&#39;, &#39;keyId&#39;: &#39;Ontario, Canada&#39;, &#39;confirmed&#39;: 1477931, &#39;deaths&#39;: 14495, &#39;recovered&#39;: None}, {&#39;city&#39;: None, &#39;province&#39;: &#39;Prince Edward Island&#39;, &#39;country&#39;: &#39;Canada&#39;, &#39;lastUpdate&#39;: &#39;2022-10-08T04:22:56+00:00&#39;, &#39;keyId&#39;: &#39;Prince Edward Island, Canada&#39;, &#39;confirmed&#39;: 52047, &#39;deaths&#39;: 61, &#39;recovered&#39;: None}, {&#39;city&#39;: None, &#39;province&#39;: &#39;Quebec&#39;, &#39;country&#39;: &#39;Canada&#39;, &#39;lastUpdate&#39;: &#39;2022-10-08T04:22:56+00:00&#39;, &#39;keyId&#39;: &#39;Quebec, Canada&#39;, &#39;confirmed&#39;: 1207016, &#39;deaths&#39;: 16836, &#39;recovered&#39;: None}, {&#39;city&#39;: None, &#39;province&#39;: &#39;Repatriated Travellers&#39;, &#39;country&#39;: &#39;Canada&#39;, &#39;lastUpdate&#39;: &#39;2022-10-08T04:22:56+00:00&#39;, &#39;keyId&#39;: &#39;Repatriated Travellers, Canada&#39;, &#39;confirmed&#39;: 13, &#39;deaths&#39;: 0, &#39;recovered&#39;: None}, {&#39;city&#39;: None, &#39;province&#39;: &#39;Saskatchewan&#39;, &#39;country&#39;: &#39;Canada&#39;, &#39;lastUpdate&#39;: &#39;2022-10-08T04:22:56+00:00&#39;, &#39;keyId&#39;: &#39;Saskatchewan, Canada&#39;, &#39;confirmed&#39;: 143747, &#39;deaths&#39;: 1507, &#39;recovered&#39;: None}, {&#39;city&#39;: None, &#39;province&#39;: &#39;Yukon&#39;, &#39;country&#39;: &#39;Canada&#39;, &#39;lastUpdate&#39;: &#39;2022-10-08T04:22:56+00:00&#39;, &#39;keyId&#39;: &#39;Yukon, Canada&#39;, &#39;confirmed&#39;: 4923, &#39;deaths&#39;: 31, &#39;recovered&#39;: None}]}} .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/10/07/API.html",
            "relUrl": "/2022/10/07/API.html",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Team Project",
            "content": "Ideas . Our idea is to make a page where you can find a bunch of games that each one of us has created. We choose what games we want to create and we will put it on a blog for all to see and try! | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/26/Team-Final-Project-Plan.html",
            "relUrl": "/2022/09/26/Team-Final-Project-Plan.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Javascript Tutorial",
            "content": "console.log(&quot;Hello!&quot;); . var msg = &quot;Hello, World!&quot;; console.log(msg); . function logIt(output) { console.log(output); } logIt(msg); . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); logItType(2020); logItType([1, 2, 3]); . var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;unknown&quot;, 2024) ]; function Classroom(teacher, students){ teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } compsci = new Classroom(teacher, students); logItType(compsci.classroom); logItType(compsci.classroom[0].name); logItType(compsci.json[0]); logItType(JSON.parse(compsci.json[0])); . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Period&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Room #&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/25/PBL-js_tutorial.html",
            "relUrl": "/2022/09/25/PBL-js_tutorial.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "The Good Life Notes",
            "content": "&lt;table&gt; &lt;tr&gt; &lt;td&gt;&lt;img src=&quot;{{site.baseurl}}//images/logo.png&quot; height=&quot;60&quot; title=&quot;Frontend&quot; alt=&quot;&quot;&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/20/The-Good-Life-Notes.html&quot;&gt;The Good Life Notes&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/11/Applab-Game.html&quot;&gt;App Lab Games&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/07/APCSP-Panel-Notes.html&quot;&gt;APCSP Panel Notes&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/06/Biology-Quiz.html&quot;&gt;Biology Quiz&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/06/Bio-Quiz2.html&quot;&gt;Bio Quiz 2.0&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/25/PBL-js_tutorial.html&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/04/Python-Lists.html&quot;&gt;Python Lists&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/04/Bash-Project.html&quot;&gt;Bash Checks&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; . Key Points . You can know the science of what makes you happy, but unless you practice it, you won&#39;t get any happier. | What we predict is going to make us happy, doesn&#39;t actually make us as happy as we think it will. | If you desire happiness, it requires perminent changes and effort everyday of your life. | Our mind lies to us when we think that something will make us happy (like money), when it really doesn&#39;t | Happy people prioritize people they care about first, and they are very social | Connecting with other people increases your wellbeing | Helping others hhelps us more then we expect | . .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/20/The-Good-Life-Notes.html",
            "relUrl": "/2022/09/20/The-Good-Life-Notes.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "App Lab Game",
            "content": "About the process: My goal was to create an app like game and at first it was frustrating. I created this game, kind of like a ping pong game, where you have a ball that goes in all directions, and you have a paddle where it can bounce off of. And there is a coin that you have to try to get, and when you get it, you get a point and the ball moves a little faster and the game continues. I got all of the code to work and the images, but no matter what I did, the paddle and the ball would not move like it was supposed to. Eventually I just left it because there was nothing wrong with my code, but there was nothing I could do to change it. Instead I settled on a quiz about myself and that was pretty easy. Overall I thought being creative was fun and I liked doing this. Although, I hated the frustration of not getting my game to work. . My Quiz | My game that did not work and what it should have looked like if it had worked | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/11/Applab-Game.html",
            "relUrl": "/2022/09/11/Applab-Game.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "APCSP Panel Notes",
            "content": "Notes: How did you realize you wanted to do computers? . A few of the people said that they took it because they liked problem solving, others said thhey liked it because they were good at it, and one more said she didn&#39;t like it but it was useful for many things and doing a few internships solidified her choice. | . What is the biggest challenge you&#39;ve encountered in computers? . Starting sucks | There is a solution to everything and you just have to have enough patience | It is hard finding motivation to continue | Fighting the temptation to copy work just to get over it | always getting a syntax error is super frustrating and hard | . Are there any PBL scenarios in college computer science classes? . There are a few projects, one that you do in Freshman year and another you do in Senior year. | Both in class and out of class, a lot of people study in groups and work with other people to learn better because the Professor has too many students and won&#39;t always be able to answer your questions. | Finding a good group is important because you rely on them to learn | . Have you applied CS in your major? . Coding will be everywhere and it can be used for pretty much anything | It can be used for all of your assignments and is really useful | What we are now learning is applicable to pretty much everything | . For existing college students, have you had a job for school or with a professor? . They recommend resumes | Doing internships and jobs | Some professors have clubs and others have research labs, and you can ask if there is a spot available and join | There are path finding algorithms everywhere | . KEY TAKEAWAYS: Computer Science can be used for anything and coding is used for everything so it is an important skill to learn. There are also many jobs that use the things/tools that we are learning in class so the more we learn, the more we can put it to use. And yes, computers can be frustrating, but they are worth the hardwork and patience and when you get through it, the output is most of the time rewarding. So this class is important and it is important to always try our best and learn as much as possible. .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/07/APCSP-Panel-Notes.html",
            "relUrl": "/2022/09/07/APCSP-Panel-Notes.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Biology Quiz",
            "content": "def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 10 correct = 0 print(&#39;Hello,&#39; + getpass.getuser()) print(&quot;You will be asked &quot; + str(questions) +&quot; questions. &quot;) questions = [&quot;Are you ready to take the Quiz?&quot;, &quot;What are nitrogenous bases in DNA?&quot;, &quot;What does DNA stand for?&quot;, &quot;Who was the person who came up with the theory of Evolution?&quot;,&quot;In what cell does photosynthesis take place?&quot;, &quot;What is the name of the relationship in which both sides benefit?&quot;, &quot;Glycogen is a polymer of what?&quot;, &quot;How many chromosomes do humans have?&quot;, &quot;What are the weak bonds between water molecules called?&quot;, &quot;What is the division of body cells called?&quot;, &quot;What is the division of gametes called?&quot;] answers = [&quot;yes&quot;, &quot;Adenine, Guanine, Cytosine, Thymine&quot;, &quot;Deoxyribonucleic Acid&quot;, &quot;Charles Darwin&quot;,&quot;Chloroplast&quot;, &quot;Mutualism&quot;, &quot;Glucose&quot;, &quot;46&quot;, &quot;Hydrogen bonds&quot;, &quot;Mitosis&quot;, &quot;Meiosis&quot;] for i in range(len(questions)): rsp = question_with_response(questions[i]) if rsp == answers[i]: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect&quot;) print(&quot;The correct answer is &quot; + answers[i]) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/10&quot;) . Hello,srihitak You will be asked 10 questions. Question: Are you ready to take the Quiz? yes is correct! Question: What are nitrogenous bases in DNA? thymine is incorrect The correct answer is Adenine, Guanine, Cytosine, Thymine Question: What does DNA stand for? Deoyribonucleic Acid is incorrect The correct answer is Deoxyribonucleic Acid Question: Who was the person who came up with the theory of Evolution? Charles Darwin is correct! Question: In what cell does photosynthesis take place? Chloroplast is correct! Question: What is the name of the relationship in which both sides benefit? Mutualism is correct! Question: Glycogen is a polymer of what? Glycogen is incorrect The correct answer is Glucose Question: How many chromosomes do humans have? 46 is correct! Question: What are the weak bonds between water molecules called? Hydrogen bonds is correct! Question: What is the division of body cells called? Mitosis is correct! Question: What is the division of gametes called? Meiosis is correct! srihitak you scored 8/10 .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/06/Biology-Quiz.html",
            "relUrl": "/2022/09/06/Biology-Quiz.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Bio  Quiz 2.0",
            "content": "# variable of type string print(&quot;What medicine do people use when they are sick?&quot;) name = &quot;Anti-biotics&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;How do you know which person got the illness first?&quot;) answer = &quot;You know if the person has a lot of antigens in their system. it means they were fighting the disease longer.&quot; print(&quot;answer&quot;, answer, type(answer)) print() # variable of type float print(&quot;What is my ideal score in any class?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;There are many types of antibiotics.&quot;) print(&quot;What are the names of some of them?&quot;) pills = [&quot;amoxicillin&quot;, &quot;Penicillin&quot;, &quot;cephalexin&quot;] print(&quot;pills&quot;, pills, type(pills), &quot;length&quot;, len(pills)) print(&quot;- pills[0]&quot;, pills[0], type(pills[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) questions_and_answers = { &quot;name&quot;: name, &quot;answer&quot;: answer, &quot;score&quot;: score, &quot;pills&quot;: pills } print(&quot;Question and answers&quot;, questions_and_answers, type(questions_and_answers), &quot;length&quot;, len(questions_and_answers)) print(&#39;- questions and answers[&quot;name&quot;]&#39;, questions_and_answers[&quot;name&quot;], type(questions_and_answers[&quot;name&quot;])) . What medicine do people use when they are sick? name Anti-biotics &lt;class &#39;str&#39;&gt; How do you know which person got the illness first? answer You know if the person has a lot of antigens in their system. it means they were fighting the disease longer. &lt;class &#39;str&#39;&gt; What is my ideal score in any class? score 90.0 &lt;class &#39;float&#39;&gt; There are many types of antibiotics. What are the names of some of them? pills [&#39;amoxicillin&#39;, &#39;Penicillin&#39;, &#39;cephalexin&#39;] &lt;class &#39;list&#39;&gt; length 3 - pills[0] amoxicillin &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? Question and answers {&#39;name&#39;: &#39;Anti-biotics&#39;, &#39;answer&#39;: &#39;You know if the person has a lot of antigens in their system. it means they were fighting the disease longer.&#39;, &#39;score&#39;: 90.0, &#39;pills&#39;: [&#39;amoxicillin&#39;, &#39;Penicillin&#39;, &#39;cephalexin&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - questions and answers[&#34;name&#34;] Anti-biotics &lt;class &#39;str&#39;&gt; .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/06/Bio-Quiz2.html",
            "relUrl": "/2022/09/06/Bio-Quiz2.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Python Lists",
            "content": "# variable of type string name = &quot;Sri Kotturi&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;, &quot;html&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[2]&quot;, langs[2], type(langs[2])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Sri Kotturi &lt;class &#39;str&#39;&gt; age 16 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;html&#39;] &lt;class &#39;list&#39;&gt; - langs[2] Java &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Sri Kotturi&#39;, &#39;age&#39;: 16, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;html&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Sri Kotturi &lt;class &#39;str&#39;&gt; . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Srihita&quot;, &quot;LastName&quot;: &quot;Kotturi&quot;, &quot;DOB&quot;: &quot;December 13&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;srihita.kotturi@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Hundai Accent&quot;], &quot;Favorite_Activity&quot;: &quot;Watching TV!&quot; }) print(InfoDb) . [{&#39;FirstName&#39;: &#39;Srihita&#39;, &#39;LastName&#39;: &#39;Kotturi&#39;, &#39;DOB&#39;: &#39;December 13&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;srihita.kotturi@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Hundai Accent&#39;], &#39;Favorite_Activity&#39;: &#39;Watching TV!&#39;}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Srihita Kotturi Residence: San Diego Birth Day: December 13 Cars: Hundai Accent . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Srihita Kotturi Residence: San Diego Birth Day: December 13 Cars: Hundai Accent . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Srihita Kotturi Residence: San Diego Birth Day: December 13 Cars: Hundai Accent .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/04/Python-Lists.html",
            "relUrl": "/2022/09/04/Python-Lists.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Back Checks",
            "content": "echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode-SRIHITAKOTT1213 # change vscode to different name to test git clone export project=$project_dir/APCSP-Blog-Assignment # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/SRIHITAKOTT1213/APCSP-Blog-Assignment.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts . echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks # _notebooks is inside project cd $notebooks # this should exist per fastpages pwd # present working directory ls -l # list notebooks . echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images # this should exist per fastpages pwd ls -l . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project echo &quot;show the contents of README.md&quot; echo &quot;&quot; cat README.md # show contents of file, in this case markdown echo &quot;&quot; echo &quot;end of README.md&quot; . echo &quot;Show the shell environment variables, key on left of equal value on right&quot; echo &quot;&quot; env . cd $project echo &quot;&quot; echo &quot;show the secrets of .git&quot; cd .git ls -l echo &quot;&quot; echo &quot;look at config file&quot; cat config .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/09/04/Bash-Project.html",
            "relUrl": "/2022/09/04/Bash-Project.html",
            "date": " • Sep 4, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Schedule",
          "content": "Introduction to Tools and Resources . This is where all my assignments that are posted on my blog can be found . Week Work . 3 | App Lab Game | . 2 🚧 | Python Lists Bio Quiz 2.0 Panel Notes | . 1 💰 | Biology Quiz Bash Checks | . 0 💰 | Build a Website | .",
          "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/schedule",
          "relUrl": "/schedule",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Frontend",
          "content": "| The Good Life Notes | App Lab Games | APCSP Panel Notes | Biology Quiz | Bio Quiz 2.0 | JavaScript | Python Lists | Bash Checks | .",
          "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/frontend",
          "relUrl": "/frontend",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "About Me",
          "content": "This website is powered by APCSP 1. . A blog for computer science principles. &#8617; . |",
          "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}