{
  
    
        "post0": {
            "title": "3.1-3.5 Lesson on Variables and Assignments, Data Abstraction, Mathematical Expressions, Strings, and Boolean Expressions",
            "content": "3.1: Variables and Assignments . What is a variable? . A variable is an abstracttion inside a program that can hold a value. . | It is important to know that using meaningful variable names helps with teh readability of program code and the understanding of what values are being represented by the variables . | . Examples of Variables: . Answer the following questions: . What is the variable shown in the code below? | Why do you think that value is a variable? | . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . What about in this code block? What is the variable? | . n = 81 i = 3 while i &lt;= n: print(i) i+=13 . For the first code block the variable is &quot;alphabet&quot; because it is being assigned to a string that contains the alphabet (and also has a meaningful name whichc makes it easy for the user to know exactly what that variable means). And in the second code block the variable is &quot;n&quot; because it is being assigned to an integer. . What is an assignment? What does it mean to assign something? . An assignment is essentially setting a value or giving a value to a variable. | . Consider the code segment below: . What is num1 initially being assigned to? | Does num1 stay that same value or does it change? If it does change then why? | . num1 = 25 num2 = 15 num3 = 55 num2 = num3 num3 = num1 num1 = num2 print(num1) print(num2) print(num3) . 3.2: Data Abstraction . What is Data Abstraction? . Data abstractions manage complexity in programs by giving a collection of data a name without referencing the specific details of the representation. . | Some examples of Data Abstraction are lists and strings . | . Strings . What are strings? Strings are an ordered sequence of characters that may contain letters, numbers, and all other special characters | . | . Some examples of strings: . Words | Phrases | Sentences | ID numbers . | Why do you think it wouldn&#39;t make sense to consider a phone number, for example, as an integer instead of a string? . Because usually integers are something we can add and subtract and average, whereas it would make sense to average a phone number because don&#39;t really consider them as just a bunch of numbers. | . | . Lists: . What are Lists? Lists are an ordered sequence of elements, where each element is a variable | . | . Some examples of lists: . Playlist of songs | names of students in a class | contacts on your phone . | Each element of a string is referenced by an index (which is a number) and they generally start 0 but for the AP Exam it starts at 1. . AP Exam: 1,2,3,4 etc. | Python: 0,1,2,3 etc. | . | . How do lists Manage Complexity of a program? . We may not need as many variables. For example: One Variable that holds all students would be better than having a variable for EACH student | There can also be a list of test scores so if they need to be curved then the same calculation can be applied to the list (that has all the students) instead of doing the calculations one at a time | . | . Answer the following questions about the code block below: . What is an example of a string? Are there multiple? | What is an example of a list? | . # variable of type string name = &quot;Sri Kotturi&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;, &quot;html&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[2]&quot;, langs[2], type(langs[2])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . 3.3: Mathematical Expression . What is an algorithm? . it is a finite set of instructions that accomplishes a specific task | . Sequencing . means that there is an order in which to do things | . Selection . Helps to choose two different outcomes based off of a decision that the programmer wants to make | . Iteration . Repeat something until the condition is met. (also refered to as repetition) | . What is the output of the cell below? What Mathematical Expressions do you see being used? . grade1 = 10 grade2 = grade1 average_grade = (grade1 + grade2)/ 2 print(average_grade) . The problem above is being done in a specific order. | . What is the value of num1, num2, and num3? Explain the result for at least one of the values? . num1 = 2 num2 = 4 num3 = 6 num1 = num2 + num3 num3 = num1 + 5 num2 = (num1 + num3)/5 print(num1) print(num2) print(num3) . Arithmetic Operators: . Addition: . a + b Ex. grade + 10 | . | Subtraction: . a - b Ex. 100 - pointsDeducted | . | Multiplication . a b Ex. base height | . | Division: . a / b Ex. sum / 28 | . | Modulus: . a MOD b Ex. 17 MOD 2 | (Used with a % and it is the remainder after division) | . | Just like in math, order of operations apply here :) . | . 3.4: Strings . What is a string? . ordered sequence of characters | . Some Examples of string procedures: . len(str) . which gives the length of the string (how many letters there are) . | len(&quot;happy&quot;) returns 5 . | . | concat(str1, str2) . which combines str1 and str2 into one word . | concat(&quot;key&quot;, &quot;board&quot;) returns &quot;keyboard&quot; . | . | substring(str1, start, length) . starts with a letter within a string and then the length starts with the starting letter and prints each consecutive letter afterwards for however long the length is . | substring(&quot;APCSPrinciples&quot;, 3, 6) returns &quot;CSPrin&quot; . | . | . 3.5: Boolean Expressions . A Boolean Value is either true or false. | . Relational Operators: . Equal to: . a = b Ex. num_students = 30 | . | Not Equal to: . a ≠ b Ex. count ≠ 10 | . | Greater Than: . a &gt; b Ex. grade &gt; 70 | . | Less Than: . a &lt; b Ex. high_score &lt; current_score | . | Greater Than or Equal to: . a ≥ b Ex. num_pets ≥ 0 | . | Less Than or Equal to: . a ≤ b Ex. tacos ≤ 3 | . | . Write a Boolean expression to determine if num1 odd: . num1 MOD 2 = 1 | . | Write a Boolean expression to check if the temperature outside is less than 90 degrees. . temp &lt; 90 | . | . These examples use the relational operators above to display boolean expressions. . NOT: . isRaining = False . result = NOT(isRaining) . isRaining currently is false but when you use the NOT operator, the value outputted is true. . AND: . grade = 85 . result = grade &gt; 70 AND grade ≤ 100 . if the grade is above 70 and grade is less than or equal to 100 aare both true, then the entire expression is true. Since 85 is greater than 70 that part of that condition is true, and since 85 is less than 100 that part is true so since both of those values are true, the overall value will output TRUE. . grade = 45 . result = grade &gt; 70 AND grade ≤ 100 . For this one, 45 is less than 100 so that condition is true, but 45 is not greater than 70 so that condition is false. since both conditions are not true, the output of this expression is FALSE. . BOTH CONDITIONS HAVE TO BE TRUE IN ORDER TO OUTPUT TRUE. IF ONE OR BOTH OR FALSE, THEN THE OUTPUT IS FALSE . OR: . score = 175 . high_score = 150 . lives = 2 . result = score &gt; high_score OR lives = 0 . Since one of these values equals true, the value that is outputted by this expression is true because it either the first value OR the second value that has to be true. . score = 100 . high_score = 150 . lives = 1 . result = score &gt; high_score OR lives = 0 . Since both expressions are false, the entire expression ends up being false. .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/bigidea3/lesson",
            "relUrl": "/bigidea3/lesson",
            "date": " • Apr 12, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is O(1). | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # It only prints the number in ascending order # It prints the duplicate values only once # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # Maybe because It looks for only one value? # And eliminates duplicates (dictionaries also can&#39;t have duplicates) . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # Dictionaries # List, Integers, String # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = set([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # What can you change to make sure there are no duplicate producers? # Remove the second Taylor Swift # Or use a &quot;set&quot; so it removes duplicates # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: {&#39;Jack Antonoff&#39;, &#39;Taylor Swift&#39;, &#39;Joel Little&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;}} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}, &#39;producer&#39;: {&#39;Jack Antonoff&#39;, &#39;Taylor Swift&#39;, &#39;Joel Little&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;}} . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # .items and can return two values # . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;] tracks: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} producer: {&#39;Jack Antonoff&#39;, &#39;Taylor Swift&#39;, &#39;Joel Little&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;} . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # # . Invalid Search . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Time and Space Complexity Hacks",
            "content": "Notes . Constant O(1) . numbers = list(range(1000)) print(numbers) . Time: . print(numbers[263]) ncaa_bb_ranks = {1:&quot;Alabama&quot;,2:&quot;Houston&quot;, 3:&quot;Purdue&quot;, 4:&quot;Kansas&quot;} #look up a value in a dictionary given a key print(ncaa_bb_ranks[1]) . Space: . def sum(a, b): return a + b print(sum(90,88)) print(sum(.9,.88)) . Linear O(n) . Time: . for i in numbers: print(i) . Space: . def reverse_list(arr): n = len(arr) reversed_arr = [None] * n #create a list of None based on the length or arr for i in range(n): reversed_arr[n-i-1] = arr[i] #stores the value at the index of arr to the value at the index of reversed_arr starting at the beginning for arr and end for reversed_arr return reversed_arr print(numbers) print(reverse_list(numbers)) . Quadratic O(n^2) . Time: . for i in numbers: for j in numbers: print(i,j) . Space: . def multiply_matrices(matrix1, matrix2): m = len(matrix1) n = len(matrix2[0]) result = [[0] * n] * m #this creates the new matrix based on the size of matrix 1 and 2 for i in range(m): for j in range(n): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result print(multiply_matrices([[1,2],[3,4]], [[3,4],[1,2]])) . Logarithmic O(logn) . Time: . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 #integer division if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 263 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . Exponential O(2^n) . Time: . def fibonacci(n): if n &lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) #print(fibonacci(5)) #print(fibonacci(10)) #print(fibonacci(20)) #print(fibonacci(30)) print(fibonacci(40)) . Space: . def generate_subsets(s): if not s: return [[]] subsets = generate_subsets(s[1:]) return [[s[0]] + subset for subset in subsets] + subsets print(generate_subsets([1,2,3,4,5,6])) #print(generate_subsets(numbers)) . Hacks . Record your findings when testing the time elapsed of the different algorithms. . Images: when running the image that is only basewidth 5000, it takes 0.8 seconds to generate the image. But as I increase the basewidth, it takes longer for my computer to generate the image. For example, my computer took 7.9 seconds to generate an image with a basewidth 20000. | . | Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. . Time complexity I think is compressing the data so that the program runs faster. If the program is too slow, then it might not execute properly. For me, when I tried running the largest image file in the line of code, 40000, it not only took a really long time to run, but once it was done, the image didn&#39;t show up. I ran it another time and it crashed my vscode and I had to restart my computer to get it working normally again. | . | Why is time and space complexity important when choosing an algorithm? . I think it&#39;s important because it can effect how fast or how well the program runs. If there is not enough space then the program might stop short because there is not enough space for the algorithm to run completely. As with the previous question, if it takes a very long time, then the program might fail as well. | . | Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? . For both constant and exponential time, there are certain programs that need different types of time algorithms and not one works for all. Constant is used to access specific elements in an array whereas exponential is exponential uses a nested loop. | . | What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? . The more complex the algorithms get, the more time it takes for the algorithm to run. Instead of just adding two numbers together, if you did a binary search or multiplying matrices, that would take longer. | . | . PRACTICE PROBLEMS: . 1. What is the time, and space complexity of the following code: . a = 0 b = 0 for i in range(N): a = a + random() . for i in range(M): b= b + random() . O(N * M) time, O(1) space | O(N + M) time, O(N + M) space | O(N + M) time, O(1) space | O(N * M) time, O(N + M) space | Number 3 because In the code the it looks like there are some variables being added together. I am not too sure about the space part. . 2. What is the time complexity of the following code: . a = 0; for i in range(N): for j in reversed(range(i,N)): a = a + i + j; . O(N) | O(N*log(N)) | O(N * Sqrt(N)) | O(N*N) | I&#39;m not quite sure about this one? I thought it was number 1 because it has the reverse function in it but it is numebr 4 and I&#39;m not sure why. . 3. What is the time complexity of the following code: . k = 0; for i in range(n//2,n): for j in range(2,n,pow(2,j)): k = k + n / 2; . O(n) | O(N log N) | O(n^2) | O(n^2Logn) | The answer is 2 because j keeps doubling. . 4. What does it mean when we say that an algorithm X is asymptotically more efficient than Y? . X will always be a better choice for small inputs | X will always be a better choice for large inputs | Y will always be a better choice for small inputs | X will always be a better choice for all inputs | The answer is 2 because it makes sense that if X is more efficient than Y, then it will be better at handling the large inputs than Y, so it would be a better choice. .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Space/Time",
            "relUrl": "/Space/Time",
            "date": " • Mar 23, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "2.4a and 2.4b Hacks/Notes",
            "content": "Lesson Notes: . .model inherits is a parameter of class user (this is referencing the code in the lesson) . | When you want to set something, you can create it or update it. . | Use debugging to take a closer look at the code and how it works . | For the initial data code block, if you were to put a red dot next to u6 and one at initusers(), when you debug it, it would go straight to initusers because that is the first time it is called. . | Object Relational Model query, you can have a user give you an input, there will then be a query filter, meaning it will look if the user id is the same as the input, . | JSON is easier to read in most code languages . | . College Board Notes: . Programs are used in an iterative and interactive way when processing information to allow users to gain insight and knowledge about data . | Programmers can use programs to filter and clean digital data, which is gaining insight and knowledge from data . | Combining data sources, clustering data, and classifyin data are parts of the process of using programs to gain insight and knowledge from data . | Insight and knowledge can be obtained from translating and transforming digitally representeed information . | Patterns can emerge when data are transformed using programs . | People can filter, sort, combine, transform, cluster, or even classify the data in the program and that can lead to more knowledge and insight. . | Programs can be used to process data to acquire information . | Tables, diagrams, text and other visual tools can be used to communicate insight and knowledge gained from data . | Search tools are useful for efficiently finding information . | Data filtering systems are important tools for finding information and recognizing patterns in data . | Programs such as spreadsheets help efficiently organize and find trends in information . | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///example.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class Info(db.Model): __tablename__ = &#39;info&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _email = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _fname = db.Column(db.String(255), unique=True, nullable=False) _lname = db.Column(db.String(255), unique=False, nullable=False) _score = db.Column(db.String(255), unique=False, nullable=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, fname, uid, lname, email, score): self._fname = fname self._uid = uid # variables with self prefix become part of the object, self._lname = lname self.email = email self._score = score # a name getter method, extracts name from object @property def fname(self): return self._fname # a setter function, allows name to be updated after initial object creation @fname.setter def fname(self, fname): self._fname = fname @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # a getter method, extracts email from object @property def lname(self): return self._lname # a setter function, allows name to be updated after initial object creation @lname.setter def lname(self, lname): self._lname = lname @property def email(self): return self._email # a setter function, allows name to be updated after initial object creation @email.setter def email(self, email): self._email = email # dob property is returned as string, to avoid unfriendly outcomes @property def score(self): return self._score # a setter function, allows name to be updated after initial object creation @score.setter def score(self, score): self._score = score # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;uid&quot;: self.uid, &quot;fname&quot;: self.fname, &quot;lname&quot;: self.lname, &quot;email&quot;: self.email, &quot;score&quot;: self.score, } . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initInfo(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = Info(fname=&#39;Srihita&#39;, uid=&#39;sri&#39;, lname=&#39;Kotturi&#39;, email=&#39;srihitak@gmail.com&#39;, score=&#39;10&#39;) u2 = Info(fname=&#39;Lalitha&#39;, uid=&#39;lallu&#39;, lname=&#39;Chittila&#39;, email=&#39;lalithac@gmail.com&#39;, score=&#39;11&#39;) u3 = Info(fname=&#39;Chandram&#39;, uid=&#39;ram&#39;, lname=&#39;Kotturi&#39;, email=&#39;chandramk@gmail.com&#39;, score=&#39;12&#39;) u4 = Info(fname=&#39;Sumedh&#39;, uid=&#39;sumi&#39;, lname=&#39;Kotturi&#39;, email=&#39;sumedhk@gmail.com&#39;, score=&#39;13&#39;) u5 = Info(fname=&#39;Sobha&#39;, uid=&#39;sailu&#39;, lname=&#39;Chittila&#39;, email=&#39;sobhac@gmail.com&#39;, score=&#39;14&#39;) u6 = Info(fname=&#39;Aneel&#39;, uid=&#39;aneel&#39;, lname=&#39;Maha&#39;, email=&#39;aneelm@gmail.com&#39;, score=&#39;15&#39;) infos = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for info in infos: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = info.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {info.uid}, or error.&quot;) initInfo() . Records exist uid sri, or error. Records exist uid lallu, or error. Records exist uid ram, or error. Records exist uid sumi, or error. Records exist uid sailu, or error. Records exist uid aneel, or error. .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/other%20projects/2023/03/19/2.4-Hacks.html",
            "relUrl": "/other%20projects/2023/03/19/2.4-Hacks.html",
            "date": " • Mar 19, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . The Tri 2 Final Project is an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . What is the purpose of identity Column in SQL database? | What is the purpose of a primary key in SQL database? It is easy to access, that is what a primary key is. Primary keys should also be uniqe (bames would not work) | What are the Data Types in SQL table? Integer, String, Boolean, Images, any structures can work. Lists can also work. | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? The user doesn&#39;t actually access this but uses it? | Same for cursor object? Same for the cursor object as for the connection | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? Conn, cursor, results. | Is &quot;results&quot; an object? How do you know? results has data in it so that could make it an object. It has attributes as well (methods) so that is what makes it an object. | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$d6tlB2EPrWI6hPsU$ecba09619ff1b02d04c7255968148dd3ab3339a6a2507c875e267bae59f1bf7a&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$Cbcn1BgG9XCkwONR$09bf9ade66a3f9cec03fb687713123b28fcd30c5978c4c0371590d3f98edbfee&#39;, &#39;2023-03-19&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$HnfGlyo2rja79BoE$d87d9af976644d85ecd2a493816531013112b58d8170de7ccd29cf55cac3675c&#39;, &#39;2023-03-19&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$l7n4jNlWrD5yaaiG$77986ff81499eb7d2c8a9204ffc0e08601ea84c05a3279833abe7ed2af4b1a0b&#39;, &#39;2023-03-19&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$rmyppBD8vlJFvNLz$24540fb5d14a53af0ecdaa41e4f86e797b54d9a70d3fab6468e8411f379e260c&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$4Fbjzr6FQsrjftO4$b406cc72d3e9a70c1bb97864e6f30848980631f15f0c793007c77d94fda23b3b&#39;, &#39;1921-10-21&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compare create() in both SQL lessons. What is better or worse in the two implementations? This code seems less repetative than the previous one and still works the same way as the last one. This code seems to be more efficient because it uses a list with only one try and expcept code for all the variables as opposed to the last code had multiple try and except functions because one was used for each variable. | Explain purpose of SQL INSERT. Is this the same as User init? | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . Error while executing the INSERT: UNIQUE constraint failed: users._uid . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? it updates the user ID. | Explain try/except, when would except occur? except works when try does not work. | What code seems to be repeated in each of these examples to point, why is it repeated? | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() update() . The row with user id 123srik the password has been successfully updated . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? Yes because there is no safety mechanism or warning to stop someone from deleting something. So someone ccan delete all the information in the database and that would be bad. | What is the &quot;f&quot; and {uid} do? so that the program knows that it is the uid that is being deleted and not a name or a password. Or maybe the uid is the first in that row, so deleting that will delete the entire row whereas deleting the other parts would not have done that. | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() delete() . The row with uid 123srik was successfully deleted . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Create a new Table or do something new, sqlite documentation | In implementation in previous bullet, do you see procedural abstraction? | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/other%20projects/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/other%20projects/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? | . Flask app object: The project that we did last trimester is an example of where I saw this type of code2. SQLAlchemy object: After inputting the data we would use SQLSalchemy for the SQLite table that would have all the data that we inputted stored. | &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class | class User purpose: it creates an object that has attributes- db.Model inheritance: Db.model inherits is a parameter of class user | init method: Initializes the program and it is the constructor. | @property, @.setter:&lt;/strong&gt; This is the setter and getter method where you can get data (for the getter) and you can change or update or create (wich is the setter)&lt;/li&gt; additional methods: Update and delete methods | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? | . Create All Tables from db Object: The values that are inputted get stored and are added in the SQLite table2. User Object Constructors: the Init method? | Try / Except: IF there is an error, it will go to the except method, but there isn&#39;t then it just runs the program. | &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Records exist uid toby, or error. Records exist uid niko, or error. Records exist uid lex, or error. Records exist uid whit, or error. Records exist uid indi, or error. Records exist uid raven, or error. . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following | . User.query.filter_by | user.password | def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following | . user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dbo}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Created {&#39;id&#39;: 7, &#39;name&#39;: &#39;&#39;, &#39;uid&#39;: &#39;123sri&#39;, &#39;dob&#39;: &#39;12-12-2005&#39;, &#39;age&#39;: 17} . def update(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) if user is None: print(f&quot;User with ID {uid} not found&quot;) return # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date updated_user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: updated_user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: updated_user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd&quot;) # write object to database with app.app_context(): try: updated_user.update() print(f&quot;User with ID {uid} updated successfully&quot;) except: # error raised if object not created print(f&quot;Error updating user with ID {uid}&quot;) update() . User with ID srik123 not found . def delete(): # optimize user time to see if uid exists uid = input(&quot;Enter user ID to delete:&quot;) user = find_by_uid(uid) if user is None: print(f&quot;User with ID {uid} not found&quot;) return # delete object from database with app.app_context(): try: user.delete() print(f&quot;User with ID {uid} deleted successfully&quot;) except: print(f&quot;Error deleting user with ID {uid}&quot;) delete() . User with ID srik123 not found . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following | . User.query.all | json_ready assignment | # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # each user adds user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-20-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-20-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-20-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;&#39;, &#39;uid&#39;: &#39;123sri&#39;, &#39;dob&#39;: &#39;12-12-2005&#39;, &#39;age&#39;: 17}] . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Add Update functionality to this blog. | Add Delete functionality to this blog. | . &lt;/div&gt; | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/other%20projects/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/other%20projects/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": ". Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. . Clouds Impression | Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Displaying images in Python Jupyter notebook . Python Libraries and Concepts used for Jupyter and Files/Directories . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Heart Emoji&quot;, &#39;file&#39;: &quot;Heart_emoji.jpeg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Smiley Face&quot;, &#39;file&#39;: &quot;Smiley_Face.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Heart Emoji&quot;, &#39;file&#39;: &quot;Heart_emoji.jpeg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Smiley Face&quot;, &#39;file&#39;: &quot;Smiley_Face.png&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Heart Emoji Internet JPEG RGB Original size: (474, 445) Scaled size: (320, 300) -- original image -- . grey image - . - meta data -- Smiley Face Internet PNG RGBA Original size: (2400, 2400) Scaled size: (320, 320) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Heart Emoji&quot;, &#39;file&#39;: &quot;Heart_emoji.jpeg&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Smiley Face&quot;, &#39;file&#39;: &quot;Smiley_Face.png&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Heart Emoji Internet Heart_emoji.jpeg JPEG RGB Original size: (474, 445) Scaled size: (320, 300) -- scaled image -- . grey image . - meta data -- Smiley Face Peter Carolin Smiley_Face.png PNG RGBA Original size: (2400, 2400) Scaled size: (320, 320) -- scaled image -- . grey image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/other%20projects/2023/03/07/AP-unit2-2.html",
            "relUrl": "/other%20projects/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Tri 2 Final Exam Reflection",
            "content": "Question # 1: . Reflection: I guess this makes sense because if the cookies are deleted then anything that you did on that browser would also be deleted. . Question # 3: . . Reflection: This would make sense because all the information, I think, is stored on this upgraded system unlike the old one so it would be easier for customers information to be compromised if an unauthorized person got into the system . Question # 9: . Reflection: I guess this is because there is only one mechanism being useed more than once so it would count as multifactoral because there is only one factor, but that one factor being used multiple times, where as the other answer choices have multiple verification steps in order to login to somewhere. . Question # 21: . Reflection: I guess this is because there are other numbers that would make the program NOT run as intended and you can plug in other numbers that are not in the given list to see if the program still works. . Question # 23: . Reflection: When you add the results of the binary form of 5 and 3, then that combined number would be too big for the 3 bit to hold and that is why it results in an overflow error. . Question # 26: . Reflection: This makes sense because after you pick that one student, then there are a total of 29 students to choose from for the second round, so D makes sense. . Question # 28: . Reflection: I got this one completely wrong but it is actually simple to understand. If I payed attention a little more than I would have gotten this question corect . Question # 29: . Reflection: I got this wrong because I thought C was true. But a would be false because the new assigned value was false because it didn&#39;t meet both requirements so C, since it needs to be both true and is not, is also false. . Question # 31: . Reflection: I didn&#39;t get this one, but I guess the gate has to be closed in order for the sensor to turn on in the first place. . Question # 32: . Reflection: I guess this makes sense because if num is greater than minimum, the you wouldn&#39;t assign that to be the minimum value. . Question # 40: . . Reflection: I didn&#39;t have the energy to think this one through because I kept getting stuck because I got confused on the program but I think I got it now . Question # 42: . Reflection: this makes sense because in order for the binary search to work, the list must be sorted. . Question # 47: . . Reflection: This makes it so that you score A 25% of the time, B 25% of the time and then Cand D combined make 50% of the time. . Question # 50: . Reflection: A, even though had big numbers at the beginning, throughout the 5 runs had an average or below average run time compared to the others. .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Final3/Reflection",
            "relUrl": "/Final3/Reflection",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Tecnhnological Achievements",
            "content": "Things we Accomplished! . We were able to deploy flask after having so many errors. We kept on getting errors that some part of the code didn&#39;t work or some other difficult problem when doing deployment. But after LOTS of help we finally got that done! . | For me, fetching on my computer never really worked but my code on Alexa&#39;s computer did, so I had to figure out why that was and eventually my computuer was able to fetch. . | The biggest challenge for me was that Undefined error that I get instead of names for my table: . Whenever the user inputs their information in the form, the table just says &quot;undefined&quot; for their first name, last name, and workout type, but for some reason the data and number of hours they did a certain workout works. . | I first thought it was the backend code, because that is where the fetching happens. So I made sure that the values for my table were a different value and then I looked in both the database and api a million times to make sure that those variables stayed the same througout the entire form. They were all the exact same and they were all DEFINED. But I still got that error. . | Next I thought it had to be in the frontend because it was fetching something. There was, technically, tester data there and it was fetching and adding onto the table after I inputted something, so the backend was working. But what showed on the frontend was undefined, again only in 3 of the 5 parts of the table, which was weird so it must have been a frontend problem. . | Then I did the same thing with the frontend that I did with the backend and I went through the entire thing a good number of times and all my variables were the same and there was nothing wrong. . | what was even more troubling was not that I couldn&#39;t find anything wrong with my code, but that it was nearly identical to Alexa&#39;s, Ava&#39;s, and Lydia&#39;s, only the variables were different and I checked to make sure they all matched. So for some reason mine was the only one that had that problem and I couldn&#39;t figure out why. . | Usually I ask for help at this point. Alexa looked it over and said there was nothing wrong with my code. So did Ava, and even Azeem said that everything looked good. . | I finally came to a conclusion that it couldn&#39;t have been my fault because I went through all the steps and made sure that everything was right and I feel like if there was an error I would have caught it by now, or at the very least one of the people I mentioned who checked my code would have too. . | Also, when I clicked inspect on the page there was no error message. Everything was perfect. All my tester data, with all the names and everything, was seen there too so I really don&#39;t know why it doesn&#39;t show up. . | . | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/tech/achievements",
            "relUrl": "/tech/achievements",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "CPT write up",
            "content": "Row 1 (Purpose &amp; Function): . The overall purpose of the program is for people to be able to record their workouts, find motivation to continue their workouts, and use the website for educational purpose (P.E). . | The video shows the user typing in their name, the date they completed their workout, what type of workout they did, and the duration into the form and then that data gets added to the table. . | When the user inputs their name and the other information, that data is sent to be stored in the database (helped being transmitted with the API) and the information comes back to the frontend to be displayed on the table. . | . Row 2 (Data Abstraction): . . . The list is called uo . | The data contained in the list is the ID assigned to each section of the form the user has to input. (ex. name, workout type, etc.) . | . Row 3 (Managing Complexity): . The list manages complexity because there is only a numbered amount of places where every user has their information (lets say 4 places) instead of having countless number of variables for each user (if there were 50 people using the program, then having 50 lists, one for each person, would make it less efficient). It&#39;s better to have just a few variables (one for ALL names, and one for ALL workouts) than to have one for each person for multiple people. (The list is above) | . Row 4 (Procedural Abstraction): . . What this does is it takes the uo list and uses create which is what allows the user to add on a new row in the table. | . Row 5 (Algorithm Implementation): . It basically repeats each step if the user doesn&#39;t input something and makes the user type what is needed in order to move onto the next step. If the user were to type in nothing, it wouldn&#39;t move forward and add a blank table. The user needs to input something in order for the program to work. This specific peice of code is for the form that is used for the users to input their information in order to add it to the table, but it&#39;s not the actual form but &quot;garbage data&quot;, or variables that can&#39;t be entered, in order for the program to work as intended. The class is workout API and within that class is another class called create. Then under that the program defines fname (for first name) and lname (for last name) and so on and has specific requirements. For example, it the name is less than two characters than you would get an error message and it would ask you to try again. Likewise, the following lines have code have a specific number of characters or requirements in order for the form to be filled out correctly and added to the table. | . Row 6 (Testing): . First Call: The user inputs their name, workout, the date, and # of hours and submit . Conditions: It checks if the data is being added | Result: Data will appear in the table just below the form | . | Second Call: User enters something that is not accepted by the program (like numbers in the name entry) . Conditions: Checks if the data is valid and if it is invalid it will get rid of it. | Result: The program will return a message asking the user to correct their error. | . | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/CPT/Outline",
            "relUrl": "/CPT/Outline",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "N@tM",
            "content": "| N@tM | My Part in the CPT Project | Model and Object-Oriented Programming | Javascript Tutorial | Back Checks | . . N@tM: Night of the museum was the same as last trimester, except this time I got to see other projects other than just the ones in the room. I thought this night of the museum was better because we had a lot of people come and see our project and it was pretty relaxed. Other than the computer science projects I saw the CSA projects, ceramics, digital media, and photography. Those were all really great projects to see. I personally think that this trimester&#39;s N@tM was better than last trimesters. . Fitness Page: . Sponsors super Mort | Exercise Tracker | Calender | Goals | Forum (talking about good exercise habits) | Statistics | Pics: | . Place to Buy Cars: . Car finder (categories) | Feature finder | Car wishlist | Pics: | . Arcade Website: . Four games (Pong, snake, etc.) | Login | The website is interactive | When playing the games it keeps track of score | Pics: | . Flash Cards: . Similar to quizlet and has the same idea | You can add terms and create flashcards with them | You can review the word and then flip it over for the definition | If you are stuck on a definition or feel like you haven&#39;t memorized it then you can SAVE it or mark the incorrect button and when you go to the homepage, it&#39;ll be there for you to review it without having to go through the entire thing. | It also autogenerates a quiz for you to take to test your skills. | They also have a search bar so you can search for the term. | Pics: | . Other Projects From N@tM: . Ceramics: (pics) . . Another Pic :) .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/NattM2",
            "relUrl": "/NattM2",
            "date": " • Feb 24, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "5.5 and 5.6 Notes",
            "content": "| 5.1 and 5.2 Blog | 5.3 and 5.4 Blog | 5.5 and 5.6 Blog | . . 5.5 Notes: . Any closed source system you usually have to pay for. Open source is free. . | if you use someone elses code, then you can&#39;t use it. . | using someone elses code can be used as a learning tool such as linux and ubuntu . | GPL liscense is about community whereas closed sources is more of a capitalism and making money . | Greatest lie on the internet is &quot;I agree&quot; to the t erms and conditions . | people participate in digital rights on their phones . | all the terms and conditions we agree to are apart of the digital rights . | Apple patent the app store and took it away from the earliest appstore which was made by Qualcomm . | we violate music, which is a digital right . | . 5.6 Notes: . never ride a skateboard while computing :) . | Malware can damage your computer as well as steal your information and selling it to others . | Phishing is where unknown sources try to make you click something that you should NEVER click . | 2FA (2 factor authentication) to access your account is good to verify whether it is you who is logging in . | Asymmetric Cryptography means that you use two keys, a public one and a private one, encrypt and decrypt data . | Symmetric uses one key to encrypt and decrypt data . | . Hacks: . 5.5 Hacks: . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. Done . | In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. . | You can use other peoples code and build off of it but you can&#39;t sell it or profit off of it because its not your own. And If you have your own code then you can profit off of it. Usually you have to pay for closed sources and open sources are free and you are a part of a community when you use open sources. | . Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. | this is for Fitness for baddies: | . 5.6 Hacks: . Describe PII you have seen on project in CompSci Principles. | In computer science we have been working on a login which has you put your name and email to sign in. We also have forms for each of out pages which asks what the users name is, what workout they did, what the date is, what grade they have (or will get), etc. | . What are your feelings about PII and your personal exposure? | I think that PII&#39;s are a good thing because that way all of our information is protected and other people won&#39;t be able to see it. Things like bank accounts and credit card numbers need to be kep sage like that. | . Describe good and bad passwords? What is another step that is used to assist in authentication. | Good passwords are something that no one else would be able to guess and a bad password would be something like 123. A good password is something that has 8 characters, a capital at least once, to make sure that no one else can guess it. | . Try to describe Symmetric and Asymmetric encryption. | Symmetric is when you only use one key to encrypt and decrypt information whereas Asymmetric is where you use two keys - public and private- to encrypt and decrypt information. I think one example of Asymmetric encryption is Github, because when you are trying to create a repository then it requires you to copy and paste both the public key and the private key. | . Provide an example of encryption we used in AWS deployment. | I think we used symmetric encryption because I remember when doing one of the steps I was given I think a public key and I copied that and saved it just in case I needed it later on. Since there was only one key, i&#39;m guessing it is symmetric encryption. | . Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. | One example I could think of is a weird one. It was more of me looking for trouble. Sometimes when I can&#39;t find movies on Netflix then I go to websites, only three which I thought were safe, and I would find movies there. There was nothing wrong with the website itself but there were so many ads and I guess because of those ads my laptop got a virus. I had to install a bunch of protection stuff to get rid of it but that is one example. | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Unit5/5and6",
            "relUrl": "/Unit5/5and6",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "5.3 and 5.4 Notes",
            "content": "| 5.1 and 5.2 Blog | 5.3 and 5.4 Blog | 5.5 and 5.6 Blog | . . Part 1 . Google “What age groups use Facebook” vs “… TikTok”? What does the data say? Is there purposeful exclusion in these platforms? Is it harmful? Should it be corrected? Is it good business? . Facebook users are around 25+ and attracting a more older community and tik tok is more for the newer community . | Facebook is mainly sharing photos and tik tok is more of sharing videos . | This age gap could divide the old and new generation . | I don’t think the division is that big and it is good business because there are target ads for each group . | There could be some content on either Facebook or Tik Tok that is not meant for people who are underaged for it. . | . Why do virtual assistants have female voices? Amazon, Alexa Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? . Females have softer voices so it makes customers more comfortable. It could be a bias based on previous gender roles. . | There is an option to change the voice to a male or a different accent . | . Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) . Netflix algorithm shows you what shows you’ve already seen and comes up with movies you might want based on what you have already seen . | On youtube if you watch a certain video, then youtube will prompt you to watch more of that video because you already viewed it once. . | . Part 2 . Does the owner of the computer think this was intentional? If yes or no, justify you conclusion. . Maybe he just doesn&#39;t feel included and he might think that it is intentional that the computer doesn&#39;t follow his face, cause he has darker skin, but it follows his light skinned co-worker | . How do you think this happened? . This might have happened because HP only tested their face recognition only on what people so when a person with darker skinned uses the face ID, the program didn&#39;t work as intended. | . Is this harmful? Was it intended to be harmful or exclude? . Yes, because this type of technology is excluding people just because they look different and that is not their fault. It should work for everyone and it could make people feel excluded. | . Should it be corrected? . Yes, because more than one type of person should be able to use face recognition. | . What would you or should you do to produce a better outcome? . Get everyone&#39;s perspective so they can reduce the amount of Bias that goes into the project. | . Hacks: I think that there are many negatives as well as positive to everything technology and that it is important to encourage diversity in the team so that every view point is acknowledged to make the project work for everyone. . 5.4 Notes: . the more you crowdsource, the more you can reduce bias . | ex. learning history in one state might portray the U.S as good while others may view the U.S as not so good. . | Facebook users are around 25+ and attracting a more older community and tik tok is more for the newer community . | Facebook is mainly sharing photos and tik tok is more of sharing videos . | This age gap could divide the old and new generation . | I don’t think the division is that big and it is good business because there are target ads for each group . | There could be some content on either Facebook or Tik Tok that is not meant for people who are underaged for it. . | Females have softer voices so it makes customers more comfortable. It could be a bias based on previous gender roles. . | Netflix algorithm shows you what shows you’ve already seen and comes up with movies you might want based on what you have already seen . | . Hacks CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? . Maybe combine classes to talk sometime, because there are a lot of people in each class and when we all come together we can share ideas. We already combined classes once or twice before but for different reasons but that idea could work. | . What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? If we opened it up to people at Del Norte them they could give us their opinion on our project and ideas on howw to make it better. . What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. Maybe things that we use in school? I am not really sure what a workout would do to others but we could look at others and get an idea on how we can make our project better. .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Unit5/3and4",
            "relUrl": "/Unit5/3and4",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "My Part in the CPT Project",
            "content": "| N@tM | My Part in the CPT Project | Model and Object-Oriented Programming | Javascript Tutorial | Back Checks | . . College Board Requirements . Row 1 (Purpose &amp; Function): . For the workout log, you input your name, last name, workout, and the number of hours you&#39;ve done that workout and the program is supposed to take that information and put it into a table that is right below the workout log. . | The purpose of the program is for people to be able to record their workouts and helps them to be organized and keep track of their workouts so they can work towards a goal . | The function of the program is that when you input the information in the form, the data is organized and put into a table right below it. . | The input is your name, workout, the date, and the number of hours and the output is that information appearing on a table. . | . Row 2 (Data Abstraction): . The list will contain the information that was inputted . | The name will probably be a class called workouts . | The data in the list is whatever the user inputted into the form that they want added to their workout log. . | . Row 3 (Managing Complexity): . Again, the list will be the information that was inputted by the user (name, date, workout, hours) . | The list manages complexity because there is only a numbered amount of places where every user has their information (lets say 4 places) instead of having countless number of variables for each user (if there were 50 people using the program, then having 50 lists, one for each person, would make it less efficient). The written work is still in progress . | . Row 4 (Procedural Abstraction): . Not sure what code segment I want to show for this part, but I will figure that part out . | Like I said, still haven&#39;t figured that part out, but it will allow the user to actually be able to add onto the table so they can keep track of their workouts. . | . Row 5 (Algorithm Implementation): . Haven&#39;t finished the code for the workout log yet so that is still a work in progress as well. . | Once the code is finished, then I will go into steps on how it works and figure out how to explain so someoe can replicate but not write an entire essay on it. . | . Row 6 (Testing): . First Call: The user inputs their name, workout, the date, and # of hours and submit . Conditions: It checks if the data is being added | Result: Data will appear in the table just below the form | . | Second Call: User enters something that is not accepted by the program (like numbers in the name entry) . Conditions: Checks if the data is valid and if it is invalid it will get rid of it. | Result: The program will return a message asking the user to correct their error. | . | . My Part of The Project . . . This is the workout logg, where users can record their workouts and have a way to keep track of them and stay organized. . This allows users to input the information that is requested above, and then it is supposed to add onto the table below the input and should be saved (if the user would like) so it can keep accumulating | The form requests for the following: name | Type of workout | Date of completion | number of hours of workout | . | when they submit it will be added onto the table | Users will be able to keep adding and also delete/edit the information they add whenever they want. | . Code Plan . Frontend: . It will look like the one above | has a form that users will be requested to fill out with the information they want to add | there will be a table below that will keep adding rows based on what the user inputs | there might be a save button so when the user refreshes or exits, their work will still be saved | there is also a delete/edit button | . Backend: . HTML was used to make both the form and the table | I will most likely have to use java script in order to add a table based on the impact of the submit button. | And we might need a data base or something to store the users data so there is a record of it. | . Video Plan . In the video, the following will be shown: . Inputting name | Inputting type of workout | Inputting the date | Inputting the number of hours | . The output: . all of the information that the user inputted will show up on the table | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/CPT/Project",
            "relUrl": "/CPT/Project",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Test",
            "content": "Question #13: . | Test | Project Grading | Final Exam Reflection (Trimester 1) | College Board Questions | . . Question #13: The answer is all of the following except number 1 because 1 indicates old enough to drive AND old enough to vote which is not what the question is asking. . Question #15 I think D is correct, making the program incorrect, because there is no way to apply the left rotate function because it only ever needs the robot to go straight and right. I think that is why D is correct. . Question #17: I think both A and D are correct because in the original code segment, you needed both segments in order for the program to come back true and that is what both A and D do. . Question #20: There are 4 tries, so when head_counter = 2, that means there will be an even amount of heads than there is tails and that is why D is the correct answer. . Question #21: I think it runs in an infinite loop is because i is assigned to 1 so it will always be 1, which means that i will never reach 4 so the program will just keep on running. . Question #22: They are both, in different ways, basically adding up all the heights and then dividing them by 32, which does give the average height of the 32 students . Question #24: It is 3y because the program runs y times and then 3, indicating that it is 3 times y and not y to the power 3, which makes more sense. . Question #26: I think the key to getting this question right is actually going through the procedure and seeing how many times it would take the robot to get into one of the positions that is indicated below. A worked. . Question #30: I think C is also correct because since the circle that is being drawn is the outer most one, the drawcircle function has to be first before the modification. . Question #32: They both store the sum but in the opposite way. Program 1 starts from 1 and goes to n and adds all those numbers, whereas program 2 starts from n and goes all the way to 1, adding the numbers as well, so they both work. . Question #33: I think this is similar to the previous question, and isn&#39;t too bad to understand. . Question #34: This basically means how many times you have to divide the number to get back to 1. ex. 500/2 = 250, 250/2 = 125, 125/2 = 63 (rounded up) and you keep going till you get to one, and then count the number of divisions it took and that is what the question is asking. The number of divisions it took this one to get to 1 is 9 and the number closest to that is 10. . Question #35: Binary search basically divides things by 2, so I think its better because you can do it with any set of numbers and it would narrow it down faster, and I think that is why B is the correct answer. . Question #36: It works because the count will only increase by one when the item in the list is equal to target, which means every time there is the word &quot;target&quot; the program will add one to the count. . Question #38: I think this makes sense because if the number is even, then when you subract 2 from it, it will always at some point go to 0 before it goes to any negative number, so I understand why C is the correct answer. . Question #40: I think that the random (1,3) is the range at which how many times the roboot will rotate to the right. It could rotate once and step one or two squares forward. It could rotate twice and step one or two squares forward. or it could rotate three times and step one or two squares forward. And that is why B is the correct answer, shading in the squares that could be the possible solutions. . Question #41: This basically means that if the range is set to (1,10) then there is a 2/10 possibility (20%) which is why there is a chance that it could evaulate 1 or 2, and that is why D is also the correct answer. . Question #42: All of thtem are right because those all things that you can do with a simulation, no matter how small they might seem. So D is the correct answer . Question #44: This makes sense because you can model a simulation that is like a bank, but It won&#39;t be accurate because there is no user input so it won&#39;t mimic exactly what you want. That is why D is correct. . Question #45: I couldn&#39;t find anything to help me understand this question so I don&#39;t know how to get this answer . Question #47: This is an optimization problem, hence why it is the most benefitted by a hueristic problem . Question #48: The answer is D because if you changed lines 7 and 8, the average would only need to be calculated once, and would not be in that loop and also not change the program. . Question #50: This is one that I cannot get. I really don&#39;tt understand how to convert hexadecimal to decimal. . Reflection: I didn&#39;t do as well as i would have liked and some of these questions were pretty easy but I just had to understand the code and maybe if I had spent a little bit more time on it I would have gotten them correct. The ones that I didn&#39;t understand, no matter how hard I looked at the question, I looked at the college board videos and that helped me a little bit. I also tried the internet to see if it gave a better explanation and eventually I understood what I did wrong. .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Test2/Corrections",
            "relUrl": "/Test2/Corrections",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "5.1 & 5.2 Blog",
            "content": "| 5.1 and 5.2 Blog | 5.3 and 5.4 Blog | 5.5 and 5.6 Blog | . . Notes on 5.1 and 5.2 . Chat GPT was sponsored by microsoft and put 1 million dollars in it . | Chat GPT is good because it gives you an answer right away but it is bad because it only gives you one point of view whereas in our work we often have to consider multiple. . | Computer bias is something we have to take into consideration as programmers . | Ex. face recognition only worked on light skinned people because they only tested on light skinned people, so when they put it out into the world it didn’t work on darker skinned people. That is an example of bias. . | In the future, with AI’s and stuff, we might need to learn how to work with it, not against it. . | Technology is not always positive just as it is not always negative. . | Google has supercomputers, 4 billion dollar headquarters, better wifi, so they have more resources when compared to highschool students. . | . Reflection Questions (Blog) . 5.1: Come up with three of your own Beneficial and corresponding Harmful Effects of Computing . Pros: 1) websites like google allow people to get information that can help them with school homework, getting internships, fixing a car, and any other information that you need in order to get the task at hand done. 2) It is faster for designs and creation and in a way you can back up data so that way it is in a safe spot and you won&#39;t lose the data. 3) Websites have different perspectives so you can get even more information on a topic than you would if it were just one perspective. Cons: 1) Sometimes the information on the websites might not be true or might be biased, so the information might not be accurate. 2) If you forget to save your data, because it is as much as you as it is a computer, then there is a chance that everything that you had could be lost and might not be able to be recovered. 3) Sometimes those different perspectives lead to contraversy and it might be hard to come to a conclusion to what the information from the sources are trying to say. It may be more anticlamatic. | . Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? . I personally have nothing impacting my studies from school and I do believe that dopamine issues are real under the right circumstance. My parents always tell me not to watch too much of the screen because they say that it ruins your eyes and disrupts your sleep, and I believe that, which makes that a negative. I don&#39;t need computers or devices to be happy but that doesn&#39;t mean that it doesn&#39;t contribute to my happiness. For me, watching movies is a nice pass time, but I get happiness from spending time with my friends (Like I did this weekend). | . 5.2: How does someone empower themself in a digital world? . I think the best way someone can empower themself in the digital world is to learn as much as they can whenever they can. If you don&#39;t have a phone, for example, but your parents do, you can always ask to borrow it or that they can help out with texting someone or something, and learn how to use it. | . How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. . I think the best example of this is APCSP because I learn from other people who have experience with code and I get them to help me and them explaining it helps us both. It lets me gain knowledge on the digital world and helps reinforce theirs, making it a win win situation. | . Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? . I think it depends on the type of people you are with. Right now I think that we are in a digital age and that paper is only used in some, and not all, classes and that most are embracing the fact of using the devices. For me, I use my computer as much as a use paper and I think that in the future, more devices will be used and less of paper because it is both enviornmentally friendly and more convenient. | . Reflection Questions (Canvas) . Think of three beneficial effects of your projects based on 5.1 Unit . 1) It gives a place where people can record their workouts so they can keep track. 2) Helps people find motivation to continue their workouts. 3) They can keep a record and make a plan to work towards their goal. | . Think of a potential harmful effect of your project. . It could be hard for people to keep recording their workouts in the long run because it is tedious to maintain and if they don&#39;t then they lose track of their workouts. | . What are pros/cons on internet blockers at router and lack of admin password on lab machines at school? . Pros to having internet blockers means that people won&#39;t be able to view inappropriate content, at least during the school day, and not having an admin password for lab machines means that anyone can use it if they really need to. Cons of having internet blockers is that half the stuff we do is on the computer and data plan can only last so long, so we would need internet and the lack of internet would be a problem. and a con for not having an admin password to lab machines means that people with bad intentions can damage it so that no one else can use it, which isn&#39;t great. | . What concerns do you have personally about the digital divide? For yourself or for others. . I personally don&#39;t have any concerns about digital divide. But I do feel sad that there are those who aren&#39;t as privileged as the people at Del Norte so they have limited oppurtunites to learn what we do. | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Unit5/1and2",
            "relUrl": "/Unit5/1and2",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Model and Object-Oriented Programming",
            "content": "| N@tM | My Part in the CPT Project | Model and Object-Oriented Programming | Javascript Tutorial | Back Checks | . . Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$tA6...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$5x1...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$7w4...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$TSc...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$cM4...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$tA6...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$5x1...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$AwH...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$TSc...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$cM4...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$tA66LGOW4sOyLtRS$924d9e6fc8ac471f858f5f8c63d7a752c27de954abb8ab7d0fa559b196e64820&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$5x19YGkGXOEpV4ob$8c838a728227ec747b1a09bb19854f3d6d1cb8ca8b604d02763934260ed6c6f3&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$AwHd6x0W2yhF46fW$9142757bc1c66494906012dc721eb8f0cc7d61674c15acd943ea4b90d6156de8&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$TScTk47lL3JyJwy8$976928361417278fcd9d003b16e2f5bad5f32d7a8a59218e21e012e64c307944&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$cM4Eys3EtZEzspH3$03f9d89d6e81753afe875cb2436032813b44ae5cae5fcf6d06d5a71c5ce2e114&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$tA66LGOW4sOyLtRS$924d9e6fc8ac471f858f5f8c63d7a752c27de954abb8ab7d0fa559b196e64820&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$5x19YGkGXOEpV4ob$8c838a728227ec747b1a09bb19854f3d6d1cb8ca8b604d02763934260ed6c6f3&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$AwHd6x0W2yhF46fW$9142757bc1c66494906012dc721eb8f0cc7d61674c15acd943ea4b90d6156de8&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$TScTk47lL3JyJwy8$976928361417278fcd9d003b16e2f5bad5f32d7a8a59218e21e012e64c307944&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$cM4Eys3EtZEzspH3$03f9d89d6e81753afe875cb2436032813b44ae5cae5fcf6d06d5a71c5ce2e114&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start of Hacks . class date: from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2005, 12, 13) age = calculate_age(dob) print(age) . 17 . class classof: def __init__(self, gradyear): self._gradyear = gradyear @property def gradyear(self): return self._gradyear @gradyear.setter def gradyear(self, gradyear): self._gradyear = gradyear student = classof(gradyear=2024) print(&quot;You Graduate in&quot;, student.gradyear,&quot;!!!!&quot;) . You Graduate in 2024 !!!! . # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password, gradCLASS, dob, age): self._name = name # variables with self prefix become part of the object, self._uid = uid self._gradCLASS = gradCLASS self._dob = dob self._age = age self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # a name getter method, extracts name from object @property def gradCLASS(self): return self._gradCLASS # a setter function, allows name to be updated after initial object creation @name.setter def gradCLASS(self, gradCLASS): self._gradCLASS = gradCLASS # a name getter method, extracts name from object @property def age(self): return self._age # a setter function, allows name to be updated after initial object creation @name.setter def age(self, age): self._age = age # a name getter method, extracts name from object @property def dob(self): return self._dob # a setter function, allows name to be updated after initial object creation @name.setter def dob(self, dob): self._dob = dob @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) # tester method to print users def tester(users, uid, psw, gradCLASS, dob, age): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Chandram Kotturi&#39;, uid=&#39;ram&#39;, password=&#39;123ram&#39;, gradCLASS=&#39;1990&#39;, dob=(1972, 6, 9), age=calculate_age(date(1972, 6, 9))) u2 = User(name=&#39;Sumedh Kotturi&#39;, uid=&#39;sumedh&#39;, password=&#39;123sumedh&#39;, gradCLASS=&#39;2029&#39;, dob=(2010, 12, 8), age=calculate_age(date(2010, 12, 8))) u3 = User(name=&#39;Lalitha Chittila&#39;, uid=&#39;lalitha&#39;, password=&#39;123lalitha&#39;, gradCLASS=&#39;1995&#39;, dob=(1977, 6, 15), age=calculate_age(date(1977, 12, 15))) u4 = User(name=&#39;Srihita Kotturi&#39;, uid=&#39;sri&#39;, password=&#39;123sri&#39;, gradCLASS=&#39;2024&#39;, dob=(2005, 12, 13), age=calculate_age(date(2005, 12, 13))) # put user objects in list for convenience users = [u1, u2, u3, u4] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lalitha&quot;, u3.gradCLASS, u3.dob, u3.age) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u.gradyear = &#39;2024&#39; dob = &#39;11-2-16&#39; u = tester(users, u.uid, &quot;123qwerty&quot;, u.gradCLASS, u.dob, u.age) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Chandram Kotturi&#34;, id: &#34;ram&#34;, psw: &#34;sha256$cI2...&#34; name: &#34;Sumedh Kotturi&#34;, id: &#34;sumedh&#34;, psw: &#34;sha256$xXU...&#34; * name: &#34;Lalitha Chittila&#34;, id: &#34;lalitha&#34;, psw: &#34;sha256$N36...&#34; name: &#34;Srihita Kotturi&#34;, id: &#34;sri&#34;, psw: &#34;sha256$4Jf...&#34; Test 2, change user 3 name: &#34;Chandram Kotturi&#34;, id: &#34;ram&#34;, psw: &#34;sha256$cI2...&#34; name: &#34;Sumedh Kotturi&#34;, id: &#34;sumedh&#34;, psw: &#34;sha256$xXU...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$Zou...&#34; name: &#34;Srihita Kotturi&#34;, id: &#34;sri&#34;, psw: &#34;sha256$4Jf...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Chandram Kotturi&#34;, &#34;_uid&#34;: &#34;ram&#34;, &#34;_gradCLASS&#34;: &#34;1990&#34;, &#34;_dob&#34;: [1972, 6, 9], &#34;_age&#34;: 50, &#34;_password&#34;: &#34;sha256$cI23xuJMw3chad9v$01340b1736f40f20c69d889c0f1914ad1a07c7287fda77a3799c7bd0e6811e85&#34;}, {&#34;_name&#34;: &#34;Sumedh Kotturi&#34;, &#34;_uid&#34;: &#34;sumedh&#34;, &#34;_gradCLASS&#34;: &#34;2029&#34;, &#34;_dob&#34;: [2010, 12, 8], &#34;_age&#34;: 12, &#34;_password&#34;: &#34;sha256$xXUyjAfLG0bW5jv9$7a3683e367686ebe119ce0f961ce7ae3df2686ed31e82a0369d3c56cff3f38f5&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_gradCLASS&#34;: &#34;1995&#34;, &#34;_dob&#34;: [1977, 6, 15], &#34;_age&#34;: 45, &#34;_password&#34;: &#34;sha256$ZouUOGFUVM9ttZGh$77b092106a01bd5b57cf3451729fcec5e18d20fa6388fa3170551342ecbc732f&#34;, &#34;gradyear&#34;: &#34;2024&#34;}, {&#34;_name&#34;: &#34;Srihita Kotturi&#34;, &#34;_uid&#34;: &#34;sri&#34;, &#34;_gradCLASS&#34;: &#34;2024&#34;, &#34;_dob&#34;: [2005, 12, 13], &#34;_age&#34;: 17, &#34;_password&#34;: &#34;sha256$4JfICJtW9zTbRVon$64ff6c11ffc357fc3469cf0102d0f1e3f5afa744f245b8d102cc38fb75d40d10&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Chandram Kotturi&#34;, &#34;_uid&#34;: &#34;ram&#34;, &#34;_gradCLASS&#34;: &#34;1990&#34;, &#34;_dob&#34;: [1972, 6, 9], &#34;_age&#34;: 50, &#34;_password&#34;: &#34;sha256$cI23xuJMw3chad9v$01340b1736f40f20c69d889c0f1914ad1a07c7287fda77a3799c7bd0e6811e85&#34;}, {&#34;_name&#34;: &#34;Sumedh Kotturi&#34;, &#34;_uid&#34;: &#34;sumedh&#34;, &#34;_gradCLASS&#34;: &#34;2029&#34;, &#34;_dob&#34;: [2010, 12, 8], &#34;_age&#34;: 12, &#34;_password&#34;: &#34;sha256$xXUyjAfLG0bW5jv9$7a3683e367686ebe119ce0f961ce7ae3df2686ed31e82a0369d3c56cff3f38f5&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_gradCLASS&#34;: &#34;1995&#34;, &#34;_dob&#34;: [1977, 6, 15], &#34;_age&#34;: 45, &#34;_password&#34;: &#34;sha256$ZouUOGFUVM9ttZGh$77b092106a01bd5b57cf3451729fcec5e18d20fa6388fa3170551342ecbc732f&#34;, &#34;gradyear&#34;: &#34;2024&#34;}, {&#34;_name&#34;: &#34;Srihita Kotturi&#34;, &#34;_uid&#34;: &#34;sri&#34;, &#34;_gradCLASS&#34;: &#34;2024&#34;, &#34;_dob&#34;: [2005, 12, 13], &#34;_age&#34;: 17, &#34;_password&#34;: &#34;sha256$4JfICJtW9zTbRVon$64ff6c11ffc357fc3469cf0102d0f1e3f5afa744f245b8d102cc38fb75d40d10&#34;}] . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, gradyear): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._gradyear = gradyear @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name @property def gradyear(self): return self._gradyear # a setter function, allows name to be updated after initial object creation @gradyear.setter def gradyear(self, gradyear): self._gradyear = gradyear # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;gradyear&quot; : self.gradyear } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob}, gradyear={self.gradyear})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Srihita Kotturi&#39;, uid=&#39;sri&#39;, password=&#39;123sri&#39;, dob=date(2005, 12, 13), gradyear = 2024) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . JSON ready string: {&#34;name&#34;: &#34;Srihita Kotturi&#34;, &#34;uid&#34;: &#34;sri&#34;, &#34;dob&#34;: &#34;12-13-2005&#34;, &#34;age&#34;: 17, &#34;gradyear&#34;: 2024} Raw Variables of object: {&#39;_name&#39;: &#39;Srihita Kotturi&#39;, &#39;_uid&#39;: &#39;sri&#39;, &#39;_password&#39;: &#39;sha256$FOMYDJdPNOx2GhWE$679e51799ccb480e4ca96752f3b6d51859bf422f0ffdbfd1b6382e64e28e7c48&#39;, &#39;_dob&#39;: datetime.date(2005, 12, 13), &#39;_gradyear&#39;: 2024} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_dob&#39;, &#39;_gradyear&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;gradyear&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Srihita Kotturi, uid=sri, password=sha256$FOMYDJdPNOx2GhWE$679e51799ccb480e4ca96752f3b6d51859bf422f0ffdbfd1b6382e64e28e7c48,dob=2005-12-13, gradyear=2024) .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Model/Programming",
            "relUrl": "/Model/Programming",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Project Grading",
            "content": "| Test | Project Grading | Final Exam Reflection (Trimester 1) | College Board Questions | . . Project 1 . Video | Written Response | College Board Grading | . Category My score College Board Score Criteria (My scoring) . Program Purpose and Function | 1/1 | 0/1 | Program has input, Program functionality, and output describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | . Data Abstraction | 1/1 | 1/1 | includes two program code segments: 1) one that shows how data has been stored in this list (or other collection type). 2) one that shows the data in this same list being used as part of fulfilling the program’s purpose identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | . Managing Complexity | 0/1 | 0/1 | includes a program code segment that shows a list being used to manage complexity in the program explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . Procedural Abstraction | 1/1 | 1/1 | includes two program code segments: 1) one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. 2) one showing where the student-developed procedure is being called. describes what the identified procedure does and how it contributes to the overall functionality of the program. | . Algorithm Implentation | 1/1 | 1/1 | includes a program code segment of a student-developed algorithm that includes: sequencing, selection, and iteration explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . Testing | 1/1 | 1/1 | describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | . Total: | 5/6 | 4/6 | | . Reflection: . For the most part, me and college board seem to agree on what the scoring for most of the criteria should be. For me, I didn&#39;t give the points for managing complexity because the person who submitted this video did not submit a code segment to show how it was managing complexity, which was part of the criteria, so I didn&#39;t give them points. College board didn&#39;t give them points because they said that it didn&#39;t meet any of the criteria so the it did not recive the point. I gave a point for the Purpose and function because I thought that it functioned well with an input and output and function and that the person answered and described the functions as part of the criteria. But college board didn&#39;t give that person the point because they did not describe the purpose of the program and instead the function, which did not meet college board criteria. In my opinion I think that is a little harsh because they met 5/6 of the criteria and still got a 0 but I understand why college board didn&#39;t give them the point. | . Project 2 . Video | Written Response | College Board Grading | . Category My score College Board Score Criteria (My scoring) . Program Purpose and Function | 1/1 | 1/1 | Program has input, Program functionality, and output describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | . Data Abstraction | 1/1 | 1/1 | includes two program code segments: 1) one that shows how data has been stored in this list (or other collection type). 2) one that shows the data in this same list being used as part of fulfilling the program’s purpose identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | . Managing Complexity | 0/1 | 1/1 | includes a program code segment that shows a list being used to manage complexity in the program explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . Procedural Abstraction | 1/1 | 1/1 | includes two program code segments: 1) one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. 2) one showing where the student-developed procedure is being called. describes what the identified procedure does and how it contributes to the overall functionality of the program. | . Algorithm Implentation | 0/1 | 1/1 | includes a program code segment of a student-developed algorithm that includes: sequencing, selection, and iteration explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . Testing | 1/1 | 1/1 | describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | . Total: | 4/6 | 6/6 | | . Reflection: . This one was a little confusing because I gave less points to this person because there were a few places where it asked for pieces of code and I didn&#39;t see any, so I thought they didn&#39;t meet some of the criteria and didn&#39;t give them the point, even though their explanations were really good. But maybe they reused pieces of code or I just didn&#39;t see it because College Board gave them full points. I did like how they explained their code and they definitely met that part of the criteria. I thought the responses were hard to read though, because I don&#39;t know what the labels mean. | . Project 3 . Video | Written Response | College Board Grading | . Category My score College Board Score Criteria (My scoring) . Program Purpose and Function | 0/1 | 1/1 | Program has input, Program functionality, and output describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | . Data Abstraction | 0/1 | 0/1 | includes two program code segments: 1) one that shows how data has been stored in this list (or other collection type). 2) one that shows the data in this same list being used as part of fulfilling the program’s purpose identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | . Managing Complexity | 1/1 | 0/1 | includes a program code segment that shows a list being used to manage complexity in the program explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . Procedural Abstraction | 1/1 | 0/1 | includes two program code segments: 1) one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. 2) one showing where the student-developed procedure is being called. describes what the identified procedure does and how it contributes to the overall functionality of the program. | . Algorithm Implentation | 0/1 | 1/1 | includes a program code segment of a student-developed algorithm that includes: sequencing, selection, and iteration explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . Testing | 1/1 | 1/1 | describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | . Total: | 3/6 | 3/6 | | . Reflection: . For the first row, I didn&#39;t give them the point because I felt like they didn&#39;t describe the function (the how it works) and more of the purpose (of what it does). College Board thought they met three of the siz criteria needed for this row. I didn&#39;t give them points for the second row either because for the first part of the criteria, they were supposed to give a list, which they did, and then that same list being part of some bigger piece of code, but they gave the same list with different variables (one list of images and another list of those same image but in names), so they did not show the bigger part of the code. College Board also thought that they didn&#39;t meet this same criteria. For both the third row and the fourth I gave them the point because I thought they were reusing their code from the previous question like the project before this one that I graded, but it looks like College Board thought the same thing I did and didn&#39;t see the lines of code that was needed for both of these areas and therefore didn&#39;t meet the criteria. I didn&#39;t give the point for the 5th row because they only explained what it does and didn&#39;t give steps so I definitely wouldn&#39;t even know how to begin to start recreating it even though the other projects gave a few steps that I would be able to build off of so they didn&#39;t earn the point in this row. And lastly, I gave them the point for testing because they met all the criteria for that. I think that I went more easy on them then College Board, but I see why they got such a low score. even though it was such an amazing looking project, they didn&#39;t know what they were talking about or what the criterias were. | . Project 4 . Video | Written Response | College Board Grading | . Category My score College Board Score Criteria (My scoring) . Program Purpose and Function | 1/1 | 1/1 | Program has input, Program functionality, and output describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | . Data Abstraction | 0/1 | 1/1 | includes two program code segments: 1) one that shows how data has been stored in this list (or other collection type). 2) one that shows the data in this same list being used as part of fulfilling the program’s purpose identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | . Managing Complexity | 0/1 | 1/1 | includes a program code segment that shows a list being used to manage complexity in the program explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . Procedural Abstraction | 1/1 | 1/1 | includes two program code segments: 1) one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. 2) one showing where the student-developed procedure is being called. describes what the identified procedure does and how it contributes to the overall functionality of the program. | . Algorithm Implentation | 1/1 | 1/1 | includes a program code segment of a student-developed algorithm that includes: sequencing, selection, and iteration explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . Testing | 1/1 | 1/1 | describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | . Total: | 4/6 | 6/6 | | . Reflection: . College Board thought that this project got full credit and I see why, because they explained everything in great detail. The only reason I took points off is because for Row 2, I didn&#39;t see that same code being shown in a bigger piece of code but two seperate code segments and I thought that was bad, but it is apparently ok. And the other place I took off points was because I didn&#39;t see where they included the line segment that was required but maybe they reused a piece of code that they used for a previous question and missed it. | . Project 5 . Video | Written Response | College Board Grading | . Category My score College Board Score Criteria (My scoring) . Program Purpose and Function | 1/1 | 1/1 | Program has input, Program functionality, and output describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | . Data Abstraction | 1/1 | 0/1 | includes two program code segments: 1) one that shows how data has been stored in this list (or other collection type). 2) one that shows the data in this same list being used as part of fulfilling the program’s purpose identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | . Managing Complexity | 1/1 | 0/1 | includes a program code segment that shows a list being used to manage complexity in the program explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . Procedural Abstraction | 1/1 | 0/1 | includes two program code segments: 1) one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. 2) one showing where the student-developed procedure is being called. describes what the identified procedure does and how it contributes to the overall functionality of the program. | . Algorithm Implentation | 0/1 | 0/1 | includes a program code segment of a student-developed algorithm that includes: sequencing, selection, and iteration explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . Testing | 1/1 | 0/1 | describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | . Total: | 5/6 | 1/6 | | . Reflection: . For this one, my scoring was way off. I thought that they did well on everything but the 5th row because I couldn&#39;t see the code that was required for that and it looks like College Board agreed. College Board liked the first row and thought that it met all of the criteria. For the 2nd row, there were two code segments, but only one of them was a list and they didn&#39;t like that. they also didn&#39;t like the fact that the description following the lines of code were inaccurate. For the the 3rd row, it included the code segment but did not explain why the code couldn&#39;t be written another way then the one provided or why it would be inefficient, which was part of the criteria so they got no points for that part. For the 4th row, it did not include a parameter and inaccurately described the function of it so it met none of the criteria for that section and recieved no points for that. For the 5th row, doesn&#39;t include iteration, and the response only partially explains the algorithm and not explain it fully. And lastly, they did not recieve any points for the 6th row because they did correctly answer the question by describing the two parameters called, the two conditions, and the two results. That is why College Board gave them such a low score and I should have paid more attention to those details and probably would have given them a lower score if I looked at it again. But I didn&#39;t think they did THAT bad, which means that College Board is really, really stict on its criteria. | . Project 6 . Video | Written Response | College Board Grading | . Category My score College Board Score Criteria (My scoring) . Program Purpose and Function | 1/1 | 1/1 | Program has input, Program functionality, and output describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | . Data Abstraction | 1/1 | 1/1 | includes two program code segments: 1) one that shows how data has been stored in this list (or other collection type). 2) one that shows the data in this same list being used as part of fulfilling the program’s purpose identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | . Managing Complexity | 1/1 | 1/1 | includes a program code segment that shows a list being used to manage complexity in the program explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . Procedural Abstraction | 1/1 | 1/1 | includes two program code segments: 1) one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. 2) one showing where the student-developed procedure is being called. describes what the identified procedure does and how it contributes to the overall functionality of the program. | . Algorithm Implentation | 0/1 | 1/1 | includes a program code segment of a student-developed algorithm that includes: sequencing, selection, and iteration explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . Testing | 1/1 | 0/1 | describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | . Total: | 5/6 | 5/6 | | . Reflection: . So for once, me and college board got the same score for this person, but we took points off in different areas. I took it of in the 5th row because I didn&#39;t see the code that was required for the question. I am seeing a common theme here. Maybe the students use the same lines of code for multiple questions. College Board took points off on row 6 because they didn&#39;t meet any of the criteria and that means that they didn&#39;t properly answer the question that was being asked. | . Project 7 . Video | Written Response | College Board Grading | . Category My score College Board Score Criteria (My scoring) . Program Purpose and Function | 1/1 | 1/1 | Program has input, Program functionality, and output describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | . Data Abstraction | 1/1 | 0/1 | includes two program code segments: 1) one that shows how data has been stored in this list (or other collection type). 2) one that shows the data in this same list being used as part of fulfilling the program’s purpose identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | . Managing Complexity | 0/1 | 0/1 | includes a program code segment that shows a list being used to manage complexity in the program explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . Procedural Abstraction | 1/1 | 0/1 | includes two program code segments: 1) one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. 2) one showing where the student-developed procedure is being called. describes what the identified procedure does and how it contributes to the overall functionality of the program. | . Algorithm Implentation | 0/1 | 1/1 | includes a program code segment of a student-developed algorithm that includes: sequencing, selection, and iteration explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . Testing | 1/1 | 1/1 | describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | . Total: | 4/6 | 3/6 | | . Reflection: . Ok, so I was close to the grading on this one. I gave full points for the the first row because it seemed that the program functioned fine. I gave full points for the second row as well but college board didn&#39;t because the person didn&#39;t meet the criteria of showing the list being used in the second line of code, which I actually thought about and noticed that same thing, but I thought that it was ok since the person showed values that were contained in the list being used but not the actual list in the second code segment so it makes sense that the row didn&#39;t get full points from college board. I didn&#39;t give any points for the third row because it didn&#39;t explain in great detail so that I could replicate it, which I can&#39;t, and they didn&#39;t answer the second half of the question which is why it wouldn&#39;t work, or why it would be inefficient, if the code were written in a different way other than the one provided, so I didn&#39;t give them that point, and neither did college board. For the fourth row, I gave them the point because even though I didn&#39;t see a piece of code I assumed that they reused the same piece of code from the previous questsions but the problem was that they didn&#39;t answer the question properly, and I understand that because I couldn&#39;t tell whether their answer was for this particular question or answering in a different row altogether. I didn&#39;t give them the fifth row point because once again I couldn&#39;t tell whether I was reading the right answer choices for this question but it looked like it was answering the question, but college board thought that they explained it well, and I think that I just need to read carefully and figure out if it was actually answering the question. And lastly for the sixth row, both me and College Board gave them the points because they met all the criteria, answering what happens at the first and second calls, the conditions, and the results. | . Project 8 . Video | Written Response | College Board Grading | . Category My score College Board Score Criteria (My scoring) . Program Purpose and Function | 1/1 | 1/1 | Program has input, Program functionality, and output describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | . Data Abstraction | 0/1 | 1/1 | includes two program code segments: 1) one that shows how data has been stored in this list (or other collection type). 2) one that shows the data in this same list being used as part of fulfilling the program’s purpose identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | . Managing Complexity | 1/1 | 1/1 | includes a program code segment that shows a list being used to manage complexity in the program explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . Procedural Abstraction | 1/1 | 1/1 | includes two program code segments: 1) one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. 2) one showing where the student-developed procedure is being called. describes what the identified procedure does and how it contributes to the overall functionality of the program. | . Algorithm Implentation | 1/1 | 1/1 | includes a program code segment of a student-developed algorithm that includes: sequencing, selection, and iteration explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . Testing | 1/1 | 1/1 | describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | . Total: | 5/6 | 6/6 | | . Reflection: . Me and college board were on the same page for most of the rows and agreed that this person did a really good job. College gave them a 6 but I gave them a 5, because for the second row, one of the criteria was that the second piece of code was to show the list being used in the program, but I didn&#39;t see the name of the list in that program but another list, which was not shown, so I thought that they failed to meet that part of the criteria, but they didn&#39;t. | . Project 9 . Video | Written Response | College Board Grading | . Category My score College Board Score Criteria (My scoring) . Program Purpose and Function | 1/1 | 0/1 | Program has input, Program functionality, and output describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | . Data Abstraction | 1/1 | 1/1 | includes two program code segments: 1) one that shows how data has been stored in this list (or other collection type). 2) one that shows the data in this same list being used as part of fulfilling the program’s purpose identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | . Managing Complexity | 1/1 | 1/1 | includes a program code segment that shows a list being used to manage complexity in the program explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . Procedural Abstraction | 1/1 | 1/1 | includes two program code segments: 1) one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. 2) one showing where the student-developed procedure is being called. describes what the identified procedure does and how it contributes to the overall functionality of the program. | . Algorithm Implentation | 1/1 | 1/1 | includes a program code segment of a student-developed algorithm that includes: sequencing, selection, and iteration explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . Testing | 1/1 | 1/1 | describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | . Total: | 6/6 | 5/6 | | . Reflection: . Once again me and college board are on the same page except when it comes to row one. I thought that the program looked fine and showed the input and output and functioned well. But according to college board, the person did not describe the purpose and only described the function so it got no points overall. | . Project 10 . Video | Written Response | College Board Grading | . Category My score College Board Score Criteria (My scoring) . Program Purpose and Function | 1/1 | 1/1 | Program has input, Program functionality, and output describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | . Data Abstraction | 1/1 | 0/1 | includes two program code segments: 1) one that shows how data has been stored in this list (or other collection type). 2) one that shows the data in this same list being used as part of fulfilling the program’s purpose identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | . Managing Complexity | 0/1 | 0/1 | includes a program code segment that shows a list being used to manage complexity in the program explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . Procedural Abstraction | 1/1 | 1/1 | includes two program code segments: 1) one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. 2) one showing where the student-developed procedure is being called. describes what the identified procedure does and how it contributes to the overall functionality of the program. | . Algorithm Implentation | 0/1 | 1/1 | includes a program code segment of a student-developed algorithm that includes: sequencing, selection, and iteration explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . Testing | 1/1 | 0/1 | describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | . Total: | 4/6 | 3/6 | | . Reflection: . For the second row, College Board took points off because in the second code segment, it didn&#39;t provide the list in the the program when that was a requirement, so it makes sense. We both didn&#39;t give points for the third row because their response for one of the criteria did not adress the fact of why the program would be inefficient without the list that they used, so no points for that. For the sixth row, college board didn&#39;t give them the point because they described two conditions of the program instead of two arguments. I did not see that part thoroughly enough so I gave them the point. | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Project/Grading",
            "relUrl": "/Project/Grading",
            "date": " • Jan 6, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Vocabulary From The Lessons",
            "content": "| Vocabulary From The Lessons | Unit 3 Sections 14 and 15 | Lesson 3.12 and 3.13 | Lesson 3.16 | Unit 3 Sections 8 and 10 | Unit 3.17-3.18 Group Lesson Period 4 | . . Collatz . The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . ### Hailstone numbers . | The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples: Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No. . ### Iteration . | The action or a process of iterating or repeating: such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . ### Undecidable problems . | An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . ### Unsolvable problems . | An unsolvable problem is one for which no algorithm can ever be written to find the solution. | . Iteration: . a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | . Iteration Statements: . change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met | . Repeat Until: . if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop. | . Traversing Lists: . where all elements in the list are accessed, or a partial traversal, where only a portion of elements are accessed (can be a complete traversal) | . A procedure: . is a named set of instructions that can take in parameters and return values. | May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . Parameters: . are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | Procedures can be classified as sequencing, selection, and iteration. How? | . Modularity . the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | . Abstraction . the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | . Duplication . having multiple duplicate code blocks, often decreasing readability and efficiency | . Logic . the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . Procedure . a module of code that is created to complete a certain task, this is basically a function | . Procedure Name . the name that is given to a function/procedure | . Parameters . a variable that is used in a function to allow for data to be imported into a function | . Arguments . a way to provide information to a function, usually defined outside a function and then imported into a function with parameters | . Selection: . A selection is a decision or a question. At some point in the program, the computer may need to ask a question because it has reached a point where there are one or more options available | . Algorithm: . It is like a recipe. It is lines of codes that a computer follows to solve a problem | . Condition: . They are basically a decision making statement in code. | . Operators: . AND: . returns true if both of the values being compared are true and returns false if either of the values are false. | . OR: . Returns true if either of the conditions are true. And returns false if both of the conditions are false. | . NOT: . Returns true if the following condition is false. Returns false if it is true. | . Bits . It is a binary digit such as 1,2,4,8 and so on | . Bytes . A byte is a unit of memory data equal to either seven or eight bits | . Hexadecimal / Nibbles . Hexadecimal is a base/positional number system used in mathematics and computer science. They are used to denote colors as well. | . Binary Numbers: Unsigned Integer . An unsigned integer, has a non negative numeric integer value, and it has an encoding. | . Signed Integer . Signed integers are numbers with a “+” or “-“ sign. | . Floating Point . The floating-point family of data types represents number values with fractional parts. | . Binary Data Abstractions: Boolean . A boolean is basically a true or false thing. | . ASCII . The ASCII code table consists of a comprehensive structure consisting of three sections: . Non-printable: Non-printable codes consist of system codes between 0 and 31. | Lower ASCII: Lower ASCII consists of system codes from 32 to 127. ... | Higher ASCII: Higher ASCII consists of codes from 128 to 255. This is the portion of the ASCII table that is programmable. | . Unicode . Unicode Standard provides a unique number for every character, no matter what platform, device, application or language | . RGB . Programming - Colors Colors or RGB RGB Colors All colors on a computer are made up by combining the light from three colors (red, blue, and green). Black is [0,0,0], and White is [255, 255, 255]; Gray is any [x,x,x] where all the numbers are the same | . Data Compression: Lossy . Lossy data compression is used to compress larger files into smaller files | . Lossless . Lossless compression reduces a file&#39;s size with no loss of quality | . Variables . variables are basically anything that can be assigned to a value | . Data Types . A data type is a classification of data which tells the compiler or interpreter how the programmer intends to use the data. | . Assignment Operators . Assignment operators are used to assign the result of an expression to a variable. | . Managing Complexity with Variables: Lists . Managing complexity is all about being able to absorb the complexity and chaos around you while operating with clarity and focus | . 2D Lists . The 2D list refers to a list of lists, i.e. each row of the list is another list | . Dictionaries . A dictionary is a general-purpose data structure for storing a group of objects. A dictionary has a set of keys and each key has a single associated value. When presented with a key, the dictionary will return the associated value. | . Class . A class is nothing but a template or a blueprint for a data type. | . Algorithms . An algorithm is a set of commands that must be followed for a computer to perform calculations or other problem-solving operations. | . Expressions . In programming, an expression is any legal combination of symbols that represents a value. | . Comparison Operators . Just like Arithmetic Operators, we also have comparison operators or Relational Operators. These are just two names of the same thing. The comparison operators compare two operands and return a boolean value (True or False). | . Booleans Expressions and Selection . Boolean logic is used in selection to test conditions. | . Booleans Expressions and Iteration . Boolean logic is a form of algebra where all values are either True or False. | . Truth Tables . A truth table is a tabular representation of all the combinations of values for inputs and their corresponding outputs | . Characters . characters are simple alphabets like a,b,c,d etc. but with exception that numbers can also be characters if they are put in quotation marks. | . Strings . A string is any series of characters that are interpreted literally by a script. For example, &quot;hello world&quot; and &quot;LKJH019283&quot; are both examples of strings. | . Length . length is the number of elements | . Concatenation . concatentation is the operation of joining two strings together | . Upper . upper () method returns the uppercase string from the given string. | . Lower . lower () method returns the lowercase string from the given string. | . Traversing Strings . Traversing a String refers to going through the characters of the string | . Python If . If statement in Python is an eminent conditional loop statement that can be described as an entry-level conditional loop, where the condition is defined initially before executing the code. | . Elif . It is the same thing as the function if and then else in python but combined into one word. | . Else conditionals . else statement The else statement is the default statement of all the conditional expressions, in all programming languages | . Nested Selection Statements . Nested selection When using selection, the number of possible paths at a decision point can be increased by including one selection within another. | . Python For . Python For loop is used for sequential traversal i.e. it is used for iterating over an iterable like String, Tuple, List, Set or Dictionary | . While loops with Range with List . Similar to for loops, you can use while loops to iterate over iterables, such as lists of numbers | . Combining loops with conditionals to Break . The most common use for break is when some external condition is triggered (usually by testing with an if statement), requiring a hasty exit from a loop | . Continue . It helps skip the remaining part of the loop. | . Procedural Abstraction . Procedural abstraction is all about generalising doing some action. A procedure is called, performs the action, and is then finished. | . Python Def procedures . defines what the function or the lines of code that follows it | . Return Values . A return value is a result of the function&#39;s execution | . All of these definitions and Vocab can be seen in my Notes and/or Hacks. But having all of them in one place helps me find them easily and I can access them quickly without having to look for it a lot and wasting time :) .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Vocab",
            "relUrl": "/Vocab",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Lesson Notes 3.17 and 3.18",
            "content": "| Lesson Notes 3.17 and 3.18 | Lesson Notes 3.14 and 3.15 | Lesson Notes 3.12 and 3.13 | Lesson Notes 3.9-3.11 | Lesson Notes 3.8 and 3.10 | Lesson Notes 3.5-3.7 | Lesson Notes 3.1 and 3.2 | Lesson Notes 3.3 and 3.4 | . . Notes . Hailstone numbers are basically numbers that appear in a sequence of an iteration . | The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . | The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples: Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No. . | The action or a process of iterating or repeating: such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . | An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . | An unsolvable problem is one for which no algorithm can ever be written to find the solution. . | . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(i) else: i = (i / 2) list_.append(i) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) print(&quot;Histone Numbers&quot;, list_) . Please enter a number: Number of iterations: 2 Histone Numbers [4, 2.0, 1.0] . This is one of the hacks where we combined two pieces of code and we were able to print both the hail stone numbers and the number of iterations it takes the program to get to the number. . The next two codes are for algorithm efficiency. The first code is inefficient because the programer has to right the same code over and over again, only with using different numbers, which gets messy and annoying. The second code, however, puts all the values in a list and takes the square root all at once. So that way, all you have to do is add numbers, not functions, which is way more convenient. . import math num1 = 4 num2 = 9 num3 = 16 num4 = 25 print(math.sqrt(num1)) print(math.sqrt(num2)) print(math.sqrt(num3)) print(math.sqrt(num4)) . 2.0 3.0 4.0 5.0 . import math values = [4, 9, 16, 25, 36, 49] squareroots = [math.sqrt(number) for number in values] print(&quot;The Original Values: n&quot;, values) print(&quot;The Square Root Values: n&quot;, squareroots) . The Original Values: [4, 9, 16, 25, 36, 49] The Square Root Values: [2.0, 3.0, 4.0, 5.0, 6.0, 7.0] .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Notes/17and18",
            "relUrl": "/Notes/17and18",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Lesson Notes 3.14 and 3.15",
            "content": "| Lesson Notes 3.17 and 3.18 | Lesson Notes 3.14 and 3.15 | Lesson Notes 3.12 and 3.13 | Lesson Notes 3.9-3.11 | Lesson Notes 3.8 and 3.10 | Lesson Notes 3.5-3.7 | Lesson Notes 3.1 and 3.2 | Lesson Notes 3.3 and 3.4 | . . import math math.sqrt(64) . 8.0 . This is an example of using the library math. It is mind of like the square root function was already existing, which made it easier to use and we didn&#39;t have to code much . import random flip = random.randint(1,2) if flip == 1: print(&quot;Heads&quot;) else: print(&quot;Tails&quot;) # Try this code for yourself! . Heads . This is an example of a random library that is used to randomly generate the output, which makes sure that the output is different every time. . Define what an import random function do: It basically provides function that are already there instead of having to type in a bunch of code to compensate for that same function. | List a few other things that we can import other than random | import math | import flask | import numpy | . import random spin = random.randint(1,8) if spin &lt;= 3: print(&quot;green&quot;) elif spin &lt;= 5: print(&quot;blue&quot;) elif spin &lt;= 6: print(&quot;purple&quot;) elif spin &lt;= 7: print(&quot;red&quot;) elif spin &lt;= 8: print(&quot;orange&quot;) . blue . This is another example of a random generator and it will print these colors randomly .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Notes/14and15",
            "relUrl": "/Notes/14and15",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Lesson Notes 3.12 and 3.13",
            "content": "| Lesson Notes 3.17 and 3.18 | Lesson Notes 3.14 and 3.15 | Lesson Notes 3.12 and 3.13 | Lesson Notes 3.9-3.11 | Lesson Notes 3.8 and 3.10 | Lesson Notes 3.5-3.7 | Lesson Notes 3.1 and 3.2 | Lesson Notes 3.3 and 3.4 | . . A procedure is a named set of instructions that can take in parameters and return values. . May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. . | Procedures can be classified as sequencing, selection, and iteration. How? . | . x = 5 y = 3 def multiply(x, y): product = x * y return product answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . The product of 5 times 3 is 15 . In this case, above in the code, multiply() is what is called the procedure because it is what performes the function and x and y are the parameters because they are the variable being used by the procedures. . num = 5 def math(x): op1 = x * 2 op2 = op1 - 9 return op2 . Return calls back the procedure output and makes sure that the program keeps running . def function(first_name, last_name): print(first_name + &quot; &quot; + last_name) function(&quot;Peter&quot;,&quot;Parker&quot;) function(&quot;Safin&quot;, &quot;Singh&quot;) . Peter Parker Safin Singh . It is kind of like a more complicated version of printing parameters and in this way, you don&#39;t have to assign a variable to the value. . import math values = [4, 9, 16, 25, 36, 49] squareroots = [math.sqrt(number) for number in values] print(&quot;The Original Values: n&quot;, values) print(&quot;The Square Root Values: n&quot;, squareroots) . The Original Values: [4, 9, 16, 25, 36, 49] The Square Root Values: [2.0, 3.0, 4.0, 5.0, 6.0, 7.0] . This is a way to efficiently take the square root of multiple values at once instead of writing seperate code for each of them and I thought that was really cool and saved a lot of time. .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Notes/12and13",
            "relUrl": "/Notes/12and13",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "3.17 and 3.18 Hacks",
            "content": "| 3.17 and 3.18 Hacks | Lesson 3.14-3.15 Hacks | Lesson 3.12-3.13 Hacks | Lesson 9-11 Hacks | Lesson 8 and 10 Hacks | Lesson 5-7 Hacks | Lesson 3.1 and 3.2 Homework | Lesson 3.3 and 3.4 Homework | . . Hack #1: . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(i) else: i = (i / 2) list_.append(i) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) print(&quot;Histone Numbers&quot;, list_) . Please enter a number: Number of iterations: 7 Histone Numbers [3, 10, 5.0, 16.0, 8.0, 4.0, 2.0, 1.0] . Hack #2: . Write 2 algorithms: One is efficent and one is innefficent, then explain why one is efficent while the other isn&#39;t. (.25) | . This is very tedious and is a less efficient way to write code . import math num1 = 4 num2 = 9 num3 = 16 num4 = 25 print(math.sqrt(num1)) print(math.sqrt(num2)) print(math.sqrt(num3)) print(math.sqrt(num4)) . 2.0 3.0 4.0 5.0 . The one below is a more efficient program than the one above . import math values = [4, 9, 16, 25, 36, 49] squareroots = [math.sqrt(number) for number in values] print(&quot;The Original Values: n&quot;, values) print(&quot;The Square Root Values: n&quot;, squareroots) . Explain why one algorithm is more efficient than another using mathematical and/or formal reasoning. (.25) | The first code is inefficient because the programer has to right the same code over and over again, only with using different numbers, which gets messy and annoying. The second code, however, puts all the values in a list and takes the square root all at once. So that way, all you have to do is add numbers, not functions, which is way more convenient. | . use variables, if statements, and loops to program your algorithm and upload to jupyter notebooks/ fastpages. (.25) | I used a list and variables for both of my codes. | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Hacks/17and18",
            "relUrl": "/Hacks/17and18",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Comp Sci Panel Notes",
            "content": "| Comp Sci Panel Notes | The Good Life Notes | APCSP Panel Notes | . . Kathyleen Beveridge . Born in Vietnam :D | She didn’t have the traditional education like most people | Undergrad at Santa Clara | NBA at USC (not traditional since she waited to get NBA) | Studied abroad in Spain | she lived in the Bay Area and had the opportunity to live abroad | Maya angelou: my mission in life is not nearly to survive, but to thrive, and share my passion | She worked at 3 companies for a long time | Create technology that makes life better for everyone everywhere | She like working with people like us to make an impact on the world | A priority is doing something that the world wants | What she did in her companies had a macro impact on the world | She is senior director of marketing and sales and works closely with the R&amp;D director | . Finance degree | Maya Angelou poet | First job = Investment banker w Wells Fargo (didn’t enjoy it) | Switched careers to high tech | First tech job was at HP | Took six months off and worked at Qualcomm | Works at Thermo Fisher Scientific (25,000 employees upping to 125,000) &lt; she is senior director of marketing and sales | Similarities in mission statements= tech for good of the people, use tech to help people | Loves high tech because she loves the impact (global/macro effect) in producing products for people in the world | Her role: senior director of marketing and commercial sales= works with rnd director (stage gates = voice of customers) | People in her team work w the “scrum master” and uses “scrum process/team” (frontend/backend/etc) to create plan and promote products . | HP: “Create technology that makes life better for everyone, everywhere” . | Qualcomm: “Inventing tech the world loves” . | Thermo Fisher Scientific: “Enable our customers to make the world healthier, cleaner and safer” . | . Kris Porter: . Software engineer (SRE, DevOps, Infrastructure) &lt;- not writing code all day | UCLA for Elecrtrical Engineering | Failed first computer science (stay motivated and don’t have to know where in tech degree you want) | Masters degree in electrical engineering from cal state LA | Job where fixed computers/tech | Got job at start up GPM (email marketing automation which was like DevOps) | Worked at NBC Universal (streaming media infrastructure) | He moved down here because his girlfriend moved here | Worked at Qualcomm (forced Mort to hire him LMAO) | Dev ops job, automation | 2 years ago started working at twitter | worked on API which requested from client and retrieve info from all users and resurface important stuff back to client | He has worked at a whole bunch of different places and he was always learning | Data structures/algorithms/Python/etc very important and used a lot rest API slowly moving to Graph QL at Twitter | Data scientists = analyze customer demand/use (also non-technical role) | Most important qualities in tech industry: continuous learning (learning how to learn), resilience (don’t fear stuff in the news), go for it (even if in job for short period of time = still learning and gaining skills), good listener (in normal terms) and then translate into tech . | he moved all around California . | He went to UCLA | He got C’s in his computer classes but still ended up taking it as a career | Learning the Linux operating system is a marketing skill | He started doing Dev Ops stuff, meaning he deployed his software | . Focused on Communication Systems and Computer Networks | (Cs 31) Failed… . | Enjoyed stem classes at Livermore High School . | Master’s degree in Electrical Engineering from Cal State LA | POV if you feel like you’re bad a comp sci = KEEP SLAYING | Researched networked sensors (robot swings between trees and scans/takes data on environment) &lt; deployed in Costa Rica jungle | Learned about Linux here | Was introduced to Qualcolmm in 2014 (Mr. Mort. hired him :0) | Currently works for Twitter (#workedforElonsince2021) | Twitter timeline = API that goes to twitter database and retrieves info from many users) | Twitter used to use all rest APIS but now moving to GraphQL | He continues to learn (doesn’t get bored in industry) | you don’t have to follow one path, you can learn in many different areas | Twitter trains new employees for three weeks | Streaming Media Infrastructure for 2012 Olympic Games. . | Center for Embedded Networked Centers . | Networked Info Mechanical Systems (NIMS) | Twitter Projects | New DataCenter Deployment | Migrating HomeTimeline to GraphQL | . Questions: . Planned in a group with other engineers to coordinate in Agile Methodology | Short sprints | different engineers worked together to plan things | The concept of agile is important because they did projects in a span of 6-12 months | . When you see a company shuffle = look for new jobs DON’T WAIT | Qualcomm uses GitLab = repositories cost money = analyzed download levels to predict when to archive/delete repositories | Kathyleen uses databases and data science to predict sales, weather (wine harvest), etc. Non-technical roles = recommending clients to buy certain things/do things | . Most Important skill to have in the tech industry? . KRIS: . Continuous Learning | Learn multiple programming languages | “Learn how to learn” = always be ready to learn more | . Don’t be super concerned about things you read on the news (resiliance) | The only risk is not learning | . KATHY: . Be adaptive | Career paths won’t always be a straight line | Best technicians: listen and solve technical requirements (can explain in non-technical terms) | Something they had to Learn: | To be adaptive | Be able to pass code tests (code has to work) | . Work/life balance: . Some companies are great with work hours | Some have a lot of hours/deadlines | If you have outside hobbies/necessities = set boundaries | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/CompSci/PanelNotes",
            "relUrl": "/CompSci/PanelNotes",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Lesson 3.14-3.15 Hacks",
            "content": "| 3.17 and 3.18 Hacks | Lesson 3.14-3.15 Hacks | Lesson 3.12-3.13 Hacks | Lesson 9-11 Hacks | Lesson 8 and 10 Hacks | Lesson 5-7 Hacks | Lesson 3.1 and 3.2 Homework | Lesson 3.3 and 3.4 Homework | . . Hack #1: . Import Math allows you to use a library that already exists and use can use it to perform functions like the square root function below. . import math math.sqrt(256) . 16.0 . Hack #2: . Define what an import random function do: It basically provides function that are already there instead of having to type in a bunch of code to compensate for that same function. | List a few other things that we can import other than random | import math | import flask | import numpy | . Write a few lines of code that implements the import function | . import random i = 1 while i &lt; 5: choose = random.randint(1,20) print(choose) i += 1 . 6 3 6 18 . Hack #3: . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? I think number 12-20 will be outputted and every other number other than those numbers will be excluded. . | . import random spin = random.randint(1,8) if spin &lt;= 3: print(&quot;green&quot;) elif spin &lt;= 5: print(&quot;blue&quot;) elif spin &lt;= 6: print(&quot;purple&quot;) elif spin &lt;= 7: print(&quot;red&quot;) elif spin &lt;= 8: print(&quot;orange&quot;) . green .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Hacks/14and15",
            "relUrl": "/Hacks/14and15",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Lesson 3.12- 3.13 Hacks",
            "content": "| 3.17 and 3.18 Hacks | Lesson 3.14-3.15 Hacks | Lesson 3.12-3.13 Hacks | Lesson 9-11 Hacks | Lesson 8 and 10 Hacks | Lesson 5-7 Hacks | Lesson 3.1 and 3.2 Homework | Lesson 3.3 and 3.4 Homework | . . Hack # 1 . Topic 3.12 (3.A): . Define procedure and parameter in your own words | parameters are the variable that you use in code (like name or age) and procedures are kind of a way of telling the program what to do (multiply() or print()). | . Paste a screenshot of completion of the quiz | Define Return Values and Output Parameters in your own words | a return value basically returns whatever the program is running, which means that it keeps the program running. Output parameters are, I think, the values that the program exits, or outputs. So whatever is printed. | . Code a procedure that finds the square root of any given number. (make sure to call and return the function) | x = 64 def sqrt(x): value = x**0.5 return value answer = sqrt(x) print(answer) . 8.0 . Hack #2 . Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | it makes it more user friendly. Since abstraction hides particular details of how a code works, it makes it both manages complexity and make it more easier for people to see and use. | . Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | import math values = [4, 9, 16, 25, 36, 49] squareroots = [math.sqrt(number) for number in values] print(&quot;The Original Values: n&quot;, values) print(&quot;The Square Root Values: n&quot;, squareroots) . The Original Values: [4, 9, 16, 25, 36, 49] The Square Root Values: [2.0, 3.0, 4.0, 5.0, 6.0, 7.0] . The abstraction above is needed, more like prefered, because it makes it easier to take the square root of a bunch of numbers at once, instead of having to type in the square root function for each number. It then becomes really repetative and boring and makes life harder, whereas if we wanted to add a new number to take the square root of, we just add it to the list. . Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | I tried adding a list at the very end. But in this case, it wasn&#39;t very efficient but gets the job done. . # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count def count_words_starting_with_c_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;c&quot;) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) c_count = count_words_starting_with_c_in_string(s) count_letter = [a_count, d_count, c_count] print(&quot;Words starting with a:&quot;, a_count) print(&quot;Words starting with c:&quot;, c_count) . Words starting with a: 1 Words starting with c: 1 . Hack #3 . Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | A procedure name is a that a function has or a procedure has and arguments are information provided to a function | . Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | Multiply Button . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;Multiply Button&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a * b // math } // variables are defined var a = 7 var b = 10 &lt;/script&gt; . I figured out how to do all of the math functions, but it wouldn&#39;t let me do all four of them at the same time. :( .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Hacks/12and13",
            "relUrl": "/Hacks/12and13",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Unit 3 Sections 14 and 15",
            "content": "| Vocabulary From The Lessons | Unit 3 Sections 14 and 15 | Lesson 3.12 and 3.13 | Lesson 3.16 | Unit 3 Sections 8 and 10 | Unit 3.17-3.18 Group Lesson Period 4 | . . Section 3.14.1 - Libraries (Ethan Tran) . Learning Objective . To be able to select appropriate libraries and/or existing code to use in the creation of new programs. . College Board Essential Knowledge . A software library contains procedures that can be used in the creation of new programs. | Existing segments of code can come from internal or external sources, ie. libraries or previously written code. | The use of libraries simplifies the task of creating complex programs. | Application program interfaces (APIs) are specifications for how the procedures in a library behave and can be used. | Documentation for a library or API is necessary in understanding the key behaviors provided by the API/library and how to utilize them in your work. | . Defining a Library . A library is a collection of code from an external source that can be used to add functionality to a program. | Libraries are very useful, as they can be used to save time and effort in the development process. | Libraries are usually included in a program using a special keyword called &quot; .&quot; This keyword tells the program to look for the library and use its code. | . Example . import math math.sqrt(64) . 8.0 . Review Questions (Answer for candy!) . . 1) In your own words, what is a library? . 2) Why are libraries useful when writing a program? . 3) What keyword is used to add a pre-made library? . Hacks . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code | . . . Lesson 3.15.1 . What is randomization? . 1) Randomization generates a value between two numbers. For example RANDOM(1,3) may result as 1 or 2 or 3, either one of those. . 2) Now if we look into our day to day life we can see that randomization is all around us. . Now for a piece of candy does anyone want to tell us an example of randomization during our day to day life. . 3) In order to use the random function we have to first import random at the very beggining. . Now lets look at the code below right here. . import random answer1 = random.randint(0,3) answer2 = random.randint(1,8) answer3 = answer1 + answer2 print(answer3) . 1 . 1) The lowest number that will be generated is 0 for answer 1 and for answer2, the lowest that will be generated is 1 so the lowest number that can be generated for answer 3 would be 1. . 2) The highest number that will be generated to answer1 is 3 and the highest number that will be generated for answer 2 is 8 so the highest number for answer 3 would be 11. . 3) The range of numbers that answer 3 could print out would be from 1 to 11. . So a normal dice contains six sides with 1-6 on the individual sides. Which of the following code would simulate the result of rolling the dice three times and adds together all the obtained values together? . A. . import random sum = random.randint(1,6) + random.randint(1,6) + random.randint(1,6) print(sum) . 12 . B. . import random sum = random.randint(1,18) print(sum) . 17 . C. . import random sum = 3*random.randint(1,6) print(sum) . 12 . 1) Its not B because B is saying that it is going to choose one number between the range of 1 and 18 and not the sum of 3 diff numbers. . 2) C is not correct also because C is saying that the computer is choosing one random between 1 and 6 and multiplying that 3 times but we want the sum of three different numbers between 1 and 6. . 3) So the answer is A. . . For the last example: . import random i = 1 while i &lt; 4: choose = random.randint(1,10) print(choose) i += 1 . 6 9 8 . Which answers could not be possible for the code above? . A. 4 7 6 . B. 9 1 8 . C. 2 11 5 . D. 5 10 2 . Random can also have different methods, in the above examples we only used one example, randint which returns a random number between the given range. Down below I have created a table of all the methods with the description of what it is used for with the random function. . Method | Description . seed() | Initialize the random number generator . getstate() | Returns the current internal state of the random number generator . setstate() | Restores the internal state of the random number generator . getrandbits() | Returns a number representing the random bits . randrange() | Returns a random number between the given range . randint() | Returns a random number between the given range . choice() | Returns a random element from the given sequence . choices() | Returns a list with a random selection from the given sequence . shuffle() | Takes a sequence and returns the sequence in a random order . sample() | Returns a given sample of a sequence . random() | Returns a random float number between 0 and 1 . uniform() | Returns a random float number between two given parameters . betavariate() | Returns a random float number between 0 and 1 based on the Beta distribution (used in statistics) . expovariate() | Returns a random float number based on the Exponential distribution (used in statistics) . gammavariate() | Returns a random float number based on the Gamma distribution (used in statistics) . gauss() | Returns a random float number based on the Gaussian distribution (used in probability theories) . lognormvariate() | Returns a random float number based on a log-normal distribution (used in probability theories) . normalvariate() | Returns a random float number based on the normal distribution (used in probability theories) . vonmisesvariate() | Returns a random float number based on the von Mises distribution (used in directional statistics) . paretovariate() | Returns a random float number based on the Pareto distribution (used in probability theories) . weibullvariate() | Returns a random float number based on the Weibull distribution (used in statistics) . Lesson Recap: 1) random function generates a random number from a to b (range of two numbers) . 2) You need to import random in order to use the random function . 3) Every result from an import function is equally likely to occur . Hacks for lesson 3.15.1 . Write a few lines of code that implements the import function . | Define what an import random function do . | List a few other things that we can import other than random . | . . . 3.15.2 Lesson . Some Essential Knowledge that you need to know | RANDOM (a,b) will provide you with a random integer between the numbers a-b | Ex. RANDOM (7,18) can provide you with the number 13. | Using a random generator means each result can come out as different. | . Lets Try an Example Scenario . Try and formulate a way to write a segment of code that can simulate the flipping of a coin. | You have to use a random generator and assign the output of &quot;Heads&quot; or &quot;Tails&quot; to a specified result. | . import random flip = random.randint(1,2) if flip == 1: print(&quot;Heads&quot;) else: print(&quot;Tails&quot;) # Try this code for yourself! . Tails . This is a pretty simple code to understand. | First we use the randomization here between the 1 and 2 to determine which side of the coin we get. | If we get 1 then we get heads. If we get 2 or anything else than 2, then we get Tails. | . Now let&#39;s answer questions using your knowledge. . If you want yes to show up 50% of the time, which of the code segments can you use? | . random(1,100) &lt;= 50 random(1,100) == 50 random(1,10) &lt;= 5 random(1,10) &gt;= 5 . The answer is A,C, and D! | . Why isn&#39;t the answer B? . This because when you are saying equal to 50, you are saying only when this one number shows up the output will be yes. | You want it to come up 50 percent of the time not just when that one number shows up. | . Hacks 3.15.2 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . | . Hacks Summary . Hacks 3.14.1 . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code | . Hacks 3.15.1 . Write a few lines of code that implements the import function . | Define what an import random function do . | List a few other things that we can import other than random . | . Hacks 3.15.2 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Lesson/14and15",
            "relUrl": "/Lesson/14and15",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Lesson Notes 3.9-3.11",
            "content": "| Lesson Notes 3.17 and 3.18 | Lesson Notes 3.14 and 3.15 | Lesson Notes 3.12 and 3.13 | Lesson Notes 3.9-3.11 | Lesson Notes 3.8 and 3.10 | Lesson Notes 3.5-3.7 | Lesson Notes 3.1 and 3.2 | Lesson Notes 3.3 and 3.4 | . . why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results? It is important to know that algorithms look different because that way you know that there is more than one way to solve the problem and you know how to approach the code if there is something wrong with it and you can start fixing it. | . . This is a binary tree and it works by taking the middle value and then putting the sides after that. The list for this is [92,43,74,66,30,12,1] . b. [-1, 2, 6, 9, 19] . Binary cannot have any negative numbers or signs, so this example would not work in a binary search. | . When collaborating or working on group projects, two people might come up with two different ways to solve a problem, and that happens a lot. . know that same goal can be achieved in many ways (the possibilities are endless) | make notes in you code! (explain how it works to others or you future self) | . am_sick = False am_not_sick = True # setting variables here (same as above to make comparison easier) driveSchool = not(am_sick) and am_not_sick if driveSchool == False: print(&quot;I don&#39;t want to go to school&quot;) if driveSchool == True: print(&quot;I&#39;ll go to school&quot;) . I&#39;ll go to school . I think the code above is a Boolean because it had true or false. .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Notes/9thru11",
            "relUrl": "/Notes/9thru11",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Lesson Notes 3.8 and 3.10",
            "content": "| Lesson Notes 3.17 and 3.18 | Lesson Notes 3.14 and 3.15 | Lesson Notes 3.12 and 3.13 | Lesson Notes 3.9-3.11 | Lesson Notes 3.8 and 3.10 | Lesson Notes 3.5-3.7 | Lesson Notes 3.1 and 3.2 | Lesson Notes 3.3 and 3.4 | . . iterable = [1, 2, 3, 4] for num in iterable: print(num) . 1 2 3 4 . The code above is an example of iteration, which is basically going over and over until the condition is met, then it stops. Or in this case it spits out everything that is in that list in order, and then stops . procedures and Procedure calls . It takes zero or more arguments . | The procedures in college board are block statements . | The return statemen may appear at any point inside the procedure and causes an immediate retrn from the procedure back to the calling statement . | . Robot . It basically gives directions to move left or right. Or rotate it 90 degrees or something like that. Then I think it is kind of like the turtle function where you can actually see a figure moving to those commands | . Listing Operations . there are several ways that you can list things: . | [value1, value2, value3] . | there are a few more ways to do a list but the one above is the most common way to do it. . | . Relational and Boolean Operators . It evaluates true if the condition is false; otherwise evaluates to false . | Boolean are true and false statements . | the AND and OR statements compare the two conditions and that is a boolean statement because it is a true or false comparison type of statement. . | . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met . | Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met . | Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop . | . Lists examples: . append() - adding element to the end of the list . names = [&#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # add element to the end of the list names.append(&#39;luna&#39;) # start with empty list names = [] names.append(&#39;taiyo&#39;) names.append(&#39;ethan&#39;) names.append(&#39;parav&#39;) names. append(&#39;nikhil&#39;) . insert() - adding an element in a specific position . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # adding in a specific position names.insert(0, &#39;taiyo&#39;) names.insert(3, &#39;ethan&#39;) . remove() - remove an item from the list . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # deleting by value names.remove(&#39;parav&#39;) # by position del names[-1] . pop() - takes the item off the top of the &quot;stack&quot; (by default it returns the last element of the list but you can also pop from any position) . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # pop last item of list most_recent_name = names.pop() print(most_recent_name) # pop first item of list first_name = names.pop(0) print(first_name) . nikhil luna . len() - returns the number of items in a list . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # find length of list num_names = len(names) print(&quot;There are &quot; + str(num_names) + &quot; names.&quot;) . There are 5 names. . sorted() - returns a copy of the list which leaves the original copy unchanged . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # sort permanently names.sort() # sort permanently in reverse alphabetical order names.sort(reverse=True) # temp. sort print(sorted(names)) print(sorted(names, reverse=True)) # reversing the order of a list names.reverse() . [&#39;ethan&#39;, &#39;luna&#39;, &#39;nikhil&#39;, &#39;parav&#39;, &#39;taiyo&#39;] [&#39;taiyo&#39;, &#39;parav&#39;, &#39;nikhil&#39;, &#39;luna&#39;, &#39;ethan&#39;] . range() - use to work with number efficiently . for number in range(11): print(number) # making list of numbers 1 to 10 # using the list() value can generate a large list of numbers numbers = list(range(1, 10)) . 0 1 2 3 4 5 6 7 8 9 10 . min() - find the least value in list . nums = [10, 30, 40, 60, 70, 60] least = min(nums) print(min(nums)) . 10 . max() - find the highest value in list . nums = [10, 30, 40, 60, 70, 60] highest = max(nums) print(max(nums)) . 70 . sum() - sum of all in list . nums = [10, 30, 40, 60, 70, 60] total = sum(nums) print(sum(nums)) . 270 .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Notes/8and10",
            "relUrl": "/Notes/8and10",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Lesson Notes 3.5-3.7",
            "content": "| Lesson Notes 3.17 and 3.18 | Lesson Notes 3.14 and 3.15 | Lesson Notes 3.12 and 3.13 | Lesson Notes 3.9-3.11 | Lesson Notes 3.8 and 3.10 | Lesson Notes 3.5-3.7 | Lesson Notes 3.1 and 3.2 | Lesson Notes 3.3 and 3.4 | . . What is a Boolean . The defention of a Boolean is a denoting a system of algebraic notation used to represent logical propositions, especially in computing and electronics. . | A boolean expresions are either true or false. . | Testing if two numbers or variables are equal is a common example. . | For example: The sky is blue = True . | . Operators: . AND: returns true if both of the values being compared are true and returns false if either of the values are false. | OR: Returns true if either of the conditions are true. And returns false if both of the conditions are false. | NOT: Returns true if the following condition is false. Returns false if it is true. | . iswindy = True result = not(iswindy) print(result) . False . This uses the NOT operator and I think that it outputs the oposite of what is said. So if iswindy was False, then the output would be True, because it is the opposite . Selection: A selection is a decision or a question. At some point in the program, the computer may need to ask a question because it has reached a point where there are one or more options available . | Algorithm: It is like a recipe. It is lines of codes that a computer follows to solve a problem . | Condition: They are basically a decision making statement in code. . | . Conditional Statement part 2: The code below is an example of a conditional statement . for i in range(2): password = input(&quot;Please enter the password&quot;) if password == &quot;python&quot; or password == &quot;Python&quot;: print(&quot;Welcome!!&quot;) else: print(&quot;This password is incorrect&quot;) . Welcome!! Welcome!! .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Notes/5thru7",
            "relUrl": "/Notes/5thru7",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Lesson Notes 3.3 and 3.4",
            "content": "| Lesson Notes 3.17 and 3.18 | Lesson Notes 3.14 and 3.15 | Lesson Notes 3.12 and 3.13 | Lesson Notes 3.9-3.11 | Lesson Notes 3.8 and 3.10 | Lesson Notes 3.5-3.7 | Lesson Notes 3.1 and 3.2 | Lesson Notes 3.3 and 3.4 | . . 1.3 and 1.4 . Algorithms are basically sequences of code . | An iteration is a loop that does something over and over until the certain condition is met . | There are also symbols used to calculate math operations. (*) for multiplication, (/) is for division. . | An algorithm is a finite set of instructions that accomplish a task . | Three are three parts of an algorithm; sequencing, selection, and iteration . | Selection allows the algorithm to make decisions based on whether the condition is met . | the function len(str) means that it will return the number of letters, or characters in that string. The len stands for length. . | a substring gives the length of the entire string. That is the output . | the concat funtion is having two strings and addding them together to make one string, or word. . | A sequence is code in order of events . | . . This is an example of using math expressions. I don&#39;t really understand the % symbol, mostly because I don&#39;t really know what MOD meant. I think it means remainder. So for this one I have to figuree out what num2 equals and num3 before I proceed to solving for the result. The answer is three. .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Notes/3and4",
            "relUrl": "/Notes/3and4",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Lesson Notes 3.1 and 3.2",
            "content": "| Lesson Notes 3.17 and 3.18 | Lesson Notes 3.14 and 3.15 | Lesson Notes 3.12 and 3.13 | Lesson Notes 3.9-3.11 | Lesson Notes 3.8 and 3.10 | Lesson Notes 3.5-3.7 | Lesson Notes 3.1 and 3.2 | Lesson Notes 3.3 and 3.4 | . . 1.1 and 1.2 . A variable is an abstraction that is in code that holds a value . | A variable is like a container with a name (the variable) and whatever you put inside should correspond to that variable to make it easier . | College board useless ← instead of = because college board writes in pseudo code . | Boolean is when it lists something as true or false . | Strings are a series of characters that can either be letters or numbers . | Lists are sequences of elements with each element being a variable. An example can be a list of students names . | Data Abstraction is taking code and boiling it down to what you see and making it user friendly . | To list some variables, you can just print out the list of the variables and the output would be the list of whatever the variables equal . | . Example of a string: . &quot;Merry Christmas&quot; or &quot;503-777-7777&quot; | . Example of Data Abstraction (The result): . when using a cell phone, you can figure out how to answer incoming calls and respond to text messages | . Some of the hacks from this particular topic: . This code is an example of why using lists can be useful. You just have to print one variable instead of multiple to get the same result. It also manages complexity and makes a programmers life much simpler. .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Notes/1and2",
            "relUrl": "/Notes/1and2",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Title",
            "content": "def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(roll_results) # remove this line after testing the app . [5, 3, 5] . questions = { &quot;1. Simulations will always have the same result&quot;: { &quot;A&quot;: &quot;True&quot;, &quot;B&quot;: &quot;False&quot; }, &quot;2. A simulation has results that are more accurate than an experiment&quot;: { &quot;A&quot;: &quot;True&quot;, &quot;B&quot;: &quot;False&quot; }, &quot;3. A simulation can model real world events that are not practical for experiments&quot;: { &quot;A&quot;: &quot;True&quot;, &quot;B&quot;: &quot;False&quot; }, &quot;4. Which one of these is FALSE regarding simulations&quot;: { &quot;A&quot;: &quot;Reduces Costs&quot;, &quot;B&quot;: &quot;Is safer than real life experiments&quot;, &quot;C&quot;: &quot;More Efficient&quot;, &quot;D&quot;: &quot;More accurate than real life experiments&quot; }, &quot;5. Which of the following scenarios would be the LEAST beneficial to have as a simulation&quot;: { &quot;A&quot;: &quot;A retail company wants to identify the item which sold the most on their website&quot;, &quot;B&quot;: &quot;A restaurant wants to determine if the use of robots will increase efficiency&quot;, &quot;C&quot;: &quot;An insurance company wants to study the impact of rain on car accidents&quot;, &quot;D&quot;: &quot;A sports car company wants to study design changes to their new bike design &quot; }, &quot;6. Which of the following is better to do as a simulation than as a calculation&quot;: { &quot;A&quot;: &quot;Keeping score at a basketball game&quot;, &quot;B&quot;: &quot;Keeping track of how many games a person has won&quot;, &quot;C&quot;: &quot;Determining the average grade for a group of tests&quot;, &quot;D&quot;: &quot;Studying the impact of carbon emissions on the environment&quot; } } print(&quot; nSimulations Quiz&quot;) prompt = &quot;&gt;&gt;&gt; &quot; correct_options = [&#39;D&#39;, &#39;C&#39;, &#39;D&#39;, &#39;B&#39;, &#39;A&#39;] score_count = 0 for correct_option, (question, options) in zip(correct_options, questions.items()): print(&quot; n&quot;, question, &quot; n&quot;) for option, answer in options.items(): print(option, &quot;:&quot;, answer) choice = str(input(prompt)) if choice.upper() == correct_option: score_count = score_count + 1 print(&quot;Your score is:&quot;) print(score_count) . Simulations Quiz 1. Simulations will always have the same result A : True B : False 2. A simulation has results that are more accurate than an experiment A : True B : False 3. A simulation can model real world events that are not practical for experiments A : True B : False 4. Which one of these is FALSE regarding simulations A : Reduces Costs B : Is safer than real life experiments C : More Efficient D : More accurate than real life experiments 5. Which of the following scenarios would be the LEAST beneficial to have as a simulation A : A retail company wants to identify the item which sold the most on their website B : A restaurant wants to determine if the use of robots will increase efficiency C : An insurance company wants to study the impact of rain on car accidents D : A sports car company wants to study design changes to their new bike design Your score is: 0 .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/2022/12/07/Roll-The-Dice-Simulation.html",
            "relUrl": "/2022/12/07/Roll-The-Dice-Simulation.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Lesson 9-11 Hacks",
            "content": "| 3.17 and 3.18 Hacks | Lesson 3.14-3.15 Hacks | Lesson 3.12-3.13 Hacks | Lesson 9-11 Hacks | Lesson 8 and 10 Hacks | Lesson 5-7 Hacks | Lesson 3.1 and 3.2 Homework | Lesson 3.3 and 3.4 Homework | . . Hack #1: . why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results? It is important to know that algorithms look different because that way you know that there is more than one way to solve the problem and you know how to approach the code if there is something wrong with it and you can start fixing it. | . for the converted conditional to boolean conversion(0.10) | . am_sick = False am_not_sick = True # setting variables here (same as above to make comparison easier) driveSchool = not(am_sick) and am_not_sick if driveSchool == False: print(&quot;I don&#39;t want to go to school&quot;) if driveSchool == True: print(&quot;I&#39;ll go to school&quot;) . I&#39;ll go to school . Hack #2: . countdown = 10 while (countdown &gt; 0): countdown -= 1 print(countdown) if countdown == 0: print(&quot;Times Up!!&quot;) . 9 8 7 6 5 4 3 2 1 0 Times Up!! . . Hack #3: . import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) #print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): #add something here return number #add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if guess &lt; number: print(&quot;You are bad at guessing&quot;) #change this lower_bound = guess elif guess &gt; number: print(&quot;You suck :(&quot;) #change this upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 1 and 100. You guessed 96. Guess a number between 0 and 100. You guessed the number in 1 guesses! . . Hacks #4: . calculate the middle index and create a binary tree for each of these lists | 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . Binary Trees: . . Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? | For the first set, it would be 80. For the second set, it would be 12 and for the third set it would be 84. | . Which of the following lists can NOT a binary search be used in order to find a targeted value? | a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . I think that C is the correct answer because it has to go in acending order. | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Hacks/9thru11",
            "relUrl": "/Hacks/9thru11",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Lesson 8 and 10 Hacks",
            "content": "| 3.17 and 3.18 Hacks | Lesson 3.14-3.15 Hacks | Lesson 3.12-3.13 Hacks | Lesson 9-11 Hacks | Lesson 8 and 10 Hacks | Lesson 5-7 Hacks | Lesson 3.1 and 3.2 Homework | Lesson 3.3 and 3.4 Homework | . . Hacks Unit 3 Section 3.8.1 . Define an Iteration an iteration is a loop that goes on and on until a condition is met. . | Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) An example could be that you do a multiple choice quiz that has unlimited tries and you keep taking the quiz over and over until you get 100%, or at least the score you want. . you take the quiz for the first time | you realize that you get a 70% | you try again | you get an 80% | you try again until you get the score that you want. | | . Program a simple iteration: | iterable = [1, 2, 3, 4] for num in iterable: print(num) . 1 2 3 4 . Hacks Unit 3 Section 3.8.2 . What is an iteration statement, in your own words? An iteration statement is basically a loop that goes on and on until a condition is met | Create a descending list of numbers using for loop | . iterable = [4, 3, 2, 1] for num in iterable: print(num) . 4 3 2 1 . Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 . n = 81 i = 3 while i &lt;= n: print(i) i+=13 . 3 16 29 42 55 68 81 . HACKS Unit 3 Section 10 . Part 1 . nums = [&#39;38&#39;, &#39;45&#39;, &#39;67&#39;, &#39;83&#39;, &#39;78&#39;] minimum = min(nums) print(min(nums)) . 38 . Part 2 . procedures and Procedure calls . It takes zero or more arguments | The procedures in college board are block statements | The return statemen may appear at any point inside the procedure and causes an immediate retrn from the procedure back to the calling statement | . Robot . It basically gives directions to move left or right. Or rotate it 90 degrees or something like that. Then I think it is kind of like the turtle function where you can actually see a figure moving to those commands | . Listing Operations . there are several ways that you can list things: | [value1, value2, value3] | there are a few more ways to do a list but the one above is the most common way to do it. | . Relational and Boolean Operators . It evaluates true if the condition is false; otherwise evaluates to false | Boolean are true and false statements | the AND and OR statements compare the two conditions and that is a boolean statement because it is a true or false comparison type of statement. | . .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Hacks/8and10",
            "relUrl": "/Hacks/8and10",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Lesson 5-7 Hacks",
            "content": "| 3.17 and 3.18 Hacks | Lesson 3.14-3.15 Hacks | Lesson 3.12-3.13 Hacks | Lesson 9-11 Hacks | Lesson 8 and 10 Hacks | Lesson 5-7 Hacks | Lesson 3.1 and 3.2 Homework | Lesson 3.3 and 3.4 Homework | . . Hacks 1: . Explain in your own words what each logical operator does AND: returns true if both of the values being compared are true and returns false if either of the values are false. OR: Returns true if either of the conditions are true. And returns false if both of the conditions are false. NOT: Returns true if the following condition is false. Returns false if it is true. | . Code your own scenario that makes sense for each logical operator: | . iswindy = True result = not(iswindy) print(result) . False . Hack 2: part 1 . Selection: A selection is a decision or a question. At some point in the program, the computer may need to ask a question because it has reached a point where there are one or more options available | Algorithm: It is like a recipe. It is lines of codes that a computer follows to solve a problem | Condition: They are basically a decision making statement in code. | . Conditional Statement part 2 . for i in range(2): password = input(&quot;Please enter the password&quot;) if password == &quot;python&quot; or password == &quot;Python&quot;: print(&quot;Welcome!!&quot;) else: print(&quot;This password is incorrect&quot;) . Welcome!! Welcome!! . Hack 3: . . Create a piece of code that displays four statements instead of three. . def get_week_day(argument): if(argument == 0): day=&quot;Sunday&quot; elif(argument == 1): day=&quot;Monday&quot; elif(argument == 2): day=&quot;Tuesday&quot; elif(argument == 3): day=&quot;Wednesday&quot; elif(argument == 4): day=&quot;Thursday&quot; elif(argument == 5): day=&quot;Friday&quot; elif(argument == 6): day=&quot;Saturday&quot; else: day=&quot;Invalid day&quot; return day # Driver program if __name__ == &quot;__main__&quot;: print (get_week_day(3)) print (get_week_day(1)) print (get_week_day(5)) . Wednesday Monday Friday . Make piece of code that gives three different recommandations for possible classes to take at a scholl based on two different condtions. These conditions could be if the student likes STEM or not. . def get_class(argument): if(argument == 0): subject=&quot;Physics&quot; elif(argument == 1): subject=&quot;Chemistry&quot; elif(argument == 2): subject=&quot;Biology&quot; elif(argument == 3): subject=&quot;AP Calc AB&quot; elif(argument == 4): subject=&quot;Medical Interventions&quot; elif(argument == 5): subject=&quot;AP Phsycology&quot; return subject # Driver program if __name__ == &quot;__main__&quot;: print (get_class(2)) print (get_class(3)) print (get_class(4)) . Biology AP Calc AB Medical Interventions .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Hacks/5thru7",
            "relUrl": "/Hacks/5thru7",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Lesson 3.12 and 3.13",
            "content": "| Vocabulary From The Lessons | Unit 3 Sections 14 and 15 | Lesson 3.12 and 3.13 | Lesson 3.16 | Unit 3 Sections 8 and 10 | Unit 3.17-3.18 Group Lesson Period 4 | . . Topic 3.12 (3.A) Calling &amp; Understanding Procedures - Kaiden &amp; Amay . Overview: Learning Objectives . Basics of Procedures | Calling Procedures | Determine Results of Procedures | . What is a procedure? . Essential Knowledge: . A procedure is a named set of instructions that can take in parameters and return values. May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | Procedures can be classified as sequencing, selection, and iteration. How? | . Example: . What is the procedure&#39;s name? | What are the parameters? | What did the procedure return? | . x = 5 y = 3 def multiply(x, y): product = x * y return product answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . The product of 5 times 3 is 15 . Calling Procedures . To call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure | Procedures do not require parameters, but the parentheses must be there | . Ex: . procedureName(parameter1, parameter2, ...) | How would you call this procedure? | . num = 5 def math(x): op1 = x * 2 op2 = op1 - 9 return op2 . Quiz (Part of Hacks) . Complete this quiz: . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Question: What is are correct names for a procedure? A) Method B) Function C) Both Answer: c Correct :) Question: What is a procedure? A) Sequencing B) Selection C) Iteration D) All Answer: d Correct :) Question: Use this for following question: def inchesToFeet(lengthInches): lengthFeet = lengthInches / 12 return lengthFeet What is the procedure name, the parameter, and what the procedure returns? A) feetToInches, lengthInches, lengthMeters B) inchesToFeet, lengthInches, lengthFeet C) inchesToFeet, lengthFeet, lengthInches D) lengthInches, inchesToFeet, lengthFeet Answer: b Correct :) Score: 3 / 3 . Determining the Result of a Procedure . To determine the result of a procedure or any code, you must follow the code line by line and see what each one does . | Using syntax, you can determine the result by . function parameters | return value and statements | . | . To use return values, you have to write the syntax return followed by the expression you would like to return var | . A return statement exits a function and instructs python to continue executing the program and to return a certain value . | Value can be string, a tuple, or any other type that is being sent back to the main program . | . Ex: . def divide(num1,num2): x = num1/num2 return x . what is x being assigned to inside the function? . | As a reminder, to use function parameters, you would have to write the syntax name of the function followed by the parameters needed in parentheses . | Function parameters are the parameters that are used when calling the function in order to get a result. . | . What are the function parameters in this procedure? . What values are being passed to the function? . def function(first_name, last_name): print(first_name + &quot; &quot; + last_name) function(&quot;Peter&quot;,&quot;Parker&quot;) function(&quot;Safin&quot;, &quot;Singh&quot;) . Peter Parker Safin Singh . In the cell above, the function is being called twice, which shows the importance of function in order to accomplish the same thing with different parameters. . What is wrong with the function? . Can you translate the binary numbers into decimal notation? . def find_cube(num): result = bin(num * num * num) cube = find_cube(3) cube2 = find_cube(4) print(&#39;Cube:&#39;,cube) print(&#39;Cube:&#39;,cube2 ) . Cube: None Cube: None . Once again, I called the function twice, which is useful, because it allows the coder to do the same thing multiple times with different arguments. . Topic 3.13 (3.B) Managing Complexity - Safin . Overview: Learning Objectives . increasing code modularity using procedures abstracting large problems into smaller ones | extract shared features to reduce code duplication | . | using parameters to reuse procedures | improving code readability with procedures | manipulating procedure logic and preserving outputEssentially, we&#39;ll learn how and when it is appropriate to construct a function (procedural abstraction) and what its benefits are . | . Vocabulary: . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . Parameters . As we saw above, parameters can be used to make functions work with multiple different inputs. Let&#39;s review the following code . # these parameters are the inputs to the function, and they are used # inside the function to perform some operation def add(x, y): # inside the function, we can use the x and y parameters just like # we would use any other variable result = x + y return result # to call the function and pass in values for the x and y parameters, # we simply provide the values as arguments in the function call result = add(2, 3) print(result) # should output 5 # we can also use variables as arguments in the function call x = 5 y = 10 result = add(x, y) print(result) # should output 15 # we can even use the result of one function call as an argument # in another function call result = add(add(2, 3), add(4, 5)) print(result) # should output 14 . 5 15 14 . In the above example, parameters were used to create a function that could be called multiple times without code duplication. . Modularity . In the following example, we will use specialized functions and explain their benefits: . import math def hypotenuse(leg1, leg2): # notice we&#39;re using this &lt;var&gt; * &lt;var&gt; syntax multiple times? # this has multiple drawbacks: # - it&#39;s repetitive and makes the code longer # - if we wanted to change the operator being # applied to `leg1` and `leg2`, we&#39;d have to do it twice! leg1_squared = leg1 * leg1 leg2_squared = leg2 * leg2 return math.sqrt(leg1_squared + leg2_squared) ## VERSUS ## # this works, but let&#39;s try to write the &quot;squared&quot; variable assignment statements more concisely... def square(a): return a * a def hypotenuse_abstracted(leg1, leg2): # not only is this shorter, but we can now: # - better understand the code at a glance--we know exactly # what `square` should do # - change the operator in a single place (`square`) rather than # multiple times within this hypotenuse function leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) ## EXTRA CHALLENGE ## # is it possible to write the `hypotenuse` function in a single line? def hypotenuse_abstracted2(leg1, leg2): # ... pass assert hypotenuse(3, 4) == hypotenuse_abstracted(3, 4) == 5 . Abstracting Shared Features . Say we want to create a set of functions that count the number of words in a sentence that start with a certain character. We want to create... . count_words_starting_with_a_in_string(sentence) | count_words_starting_with_d_in_string(sentence) | . In order to count words starting with a certain character, we&#39;ll first need to split up the sentence into words. This behavior will be shared across both functions we intend to create, so procedural abstraction is appropriate here. . # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words starting with a:&quot;, a_count) print(&quot;Words starting with d:&quot;, d_count) . Words starting with a: 1 Words starting with d: 1 . In the above example, we have: . defined several functions that perform different tasks related to processing a string | abstracted away shared behavior for both functions that count the number of words starting with a specific character in a string | . Topic 3.13 (3.C) Developing Procedures - David &amp; Alex . Overview: Learning Objectives . parameters being used to manage complexity parameters storing variables | parameters storing arguments | . | calling functions with procedure names choosing procedure names | calling procedures in python and javascript | . | . Vocabulary: . Procedure - a module of code that is created to complete a certain task, this is basically a function | Procedure Name - the name that is given to a function/procedure | Parameters - a variable that is used in a function to allow for data to be imported into a function | Arguments - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters | . Functions - Basic Structure . Functions can be created in many different languages. Below are some examples in Collegeboard&#39;s format, Python, and Javascript. . Collegeboard . Above, the function is defined as PROCEDURE, which tells the coder that this is a function. The function is then named with procName, which is simply how the function is identified. parameter1, parameter2,... are variables that can be predefined elsewhere and repeatedly used in the same function. This will be gone over later in the lesson so don&#39;t worry if you don&#39;t get it. block of statements are just things that you would place inside a function to complete a certain task, such as print() in Python. . Python . def function(a,b): # function is defined print(a+b) # prints output of variables function(1,2) # one instance that it can be used function(2,3) # another instance . 3 5 . Python is similar to the Collegeboard example, where def defines the function, function, and then is followed by parameters a,b, which can later be interchanged with any numbers as shown with function(1,2). The numbers are called arguments, which are information provided to the function with parameters. In this case, the parameters are being added within the function and then printed. . Javascript . function Function(a,b) { return a + b; } Function(1,2) Function(2,3) . 3 5 . Javascript in this case is almost the exact same as Python, the only differences being that function is called with function and that the formatting is a little different. Otherwise, it does the exact same thing as the Python example. . Example . function div(a,b) { return (a+b)/2 } div(3,7) . What is the procedure name? | What are the parameters? | What operation is being done? | what would the output of this code be? | . Parameters . In functions, there are sometimes parameters that the functions have in which you can call to the function giving arguements that will provide input to the function For example: | . def function(num1, num2): if num1 &gt; num2: print(&quot;num1 is greater than num2&quot;) elif num1 &lt;num2: print(&quot;num1 is less than num 2&quot;) num1= 6 num2 = 8 function(num1,num2) . num1 is less than num 2 . In this function, it takes in two parameters num1 and num2 | Whithin this function it uses conditionals to determine if num 1 is larger or smaller than num2 | When calling to this function we must put in two arguements, num1 and num2 respectively | We put in 6 for num1 and 8 for num2 and the algorithm runs and gives us an outcome | . This basic function in python can be recreated in Javasript . function compare(a,b) { if(a&gt;b) { console.log(&quot;a is greater than b&quot;) } else if (a&lt;b) { console.log(&quot;a is less than b&quot;) } } // How do you call to this function? . what are the parameters? | What is the output? | what are the arguements? | . Calling functions . When calling functions, you have to ask yourself some questions Does the function have any parameters? | does the parameter have output? | . | Depending on these answers, the way you will call to a function will be different | . Example where it does does have parameters and gives output . def InchestoFeet(inches): Feet = 0 Feet = inches / 12 return Feet result = InchestoFeet(24) print(result) . 2 . If you look closely, there is a return at the end of the function, this returns a value when you call the function | This is why we have to set a variable, in this case result equal to the output of the function. | Also one thing to notice is that this function also takes in a parameter called inches | . Here&#39;s an example of calling functions in HTML with Javascript: . HI . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;HI&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a + b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; . Hacks . Topic 3.12 (3.A): . Define procedure and parameter in your own words | Paste a screenshot of completion of the quiz | Define Return Values and Output Parameters in your own words | Code a procedure that finds the square root of any given number. (make sure to call and return the function) | Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | Rubric . Each hack is worth 0.3 points . To get 0.3 points for each hack you must: Complete each hack correctly and completely | Submit by 11:59PM on Monday, December 12 | . | The last 0.1 points are if you do a good job on the binary calculator. | Anything missing or submitted late will have points deducted. | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Unit/12and13",
            "relUrl": "/Unit/12and13",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Lesson 3.16",
            "content": "| Vocabulary From The Lessons | Unit 3 Sections 14 and 15 | Lesson 3.12 and 3.13 | Lesson 3.16 | Unit 3 Sections 8 and 10 | Unit 3.17-3.18 Group Lesson Period 4 | . . 3.16 Intro to Simulations - Alexa . What is a simulation? A simulation is an imitation of a situation or process | Aka a virtual experiment | . | . Guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Examples of Simulations: . Simulations are used all the time over many different industries . testing safety of a car | games | testing the efficiency of a parking lot | testing a new train route | . Simulation vs. Experiment . Experiment definition: procedure undertaken to make a discovery, test a hypothesis, or demonstrate a known fact | . So, why use a simulation? . Advantages: Can be safer | More cost-effective | More efficient | More data in less time | . | Disadvantages: Not as accurate as experiments | outside factors not included (ex: in rolling dice simulation gravity and air resistance) | . | . leads into real life game example: . A Real Life Example - Lydia &amp; Ava . four corners game here | explain how person who chooses a corner is the random.randint | | . DEBRIEF: why is it better to code simulations than experiement in real life? . import random status = &quot;in&quot; while status != &quot;out&quot;: chooseCorner = input(&quot;What corner do you choose?&quot;) corner = random.randint(1,4) if int(chooseCorner) == corner: status = &quot;out&quot; print(&quot;You chose corner number &quot; + chooseCorner + &quot; and you&#39;re OUT&quot;) else: print(&quot;You chose corner number &quot; + chooseCorner + &quot; and are still in!&quot;) . You chose corner number 2 and are still in! You chose corner number 3 and are still in! You chose corner number 4 and you&#39;re OUT . Hack #1 . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 . Simulations Quiz (either screenshot or paste quiz in your notebook): | . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . Rolling a Dice Example - Sri . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(&quot;you rolled:&quot;, roll_results) . you rolled: [5, 1, 2] . . Remix of Game of Life . start step Hack #3 . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . Hacks Overview . Use these guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Hack #1 (0.3) . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (0.1) . Simulations Quiz (either screenshot or paste quiz in your notebook) | . Hack #3 (0.2) . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 (0.3) . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . Extra Credit (0.1) . For the extra 0.1: try coding a simple simulation and describe it (guiding question) | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/studentlesson/simulations",
            "relUrl": "/studentlesson/simulations",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Lesson 3.3 and 3.4 Homework",
            "content": "| 3.17 and 3.18 Hacks | Lesson 3.14-3.15 Hacks | Lesson 3.12-3.13 Hacks | Lesson 9-11 Hacks | Lesson 8 and 10 Hacks | Lesson 5-7 Hacks | Lesson 3.1 and 3.2 Homework | Lesson 3.3 and 3.4 Homework | . Hack 1: sequencing: Set item to number to search for Selection: display “item not found”. iteration: get next number in the list . Hack 2: . Hack 3 cross word: . iterations | selection | sequences | Hack 4: .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Lesson/3and4",
            "relUrl": "/Lesson/3and4",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Unit 3 Sections 8 and 10",
            "content": "| Vocabulary From The Lessons | Unit 3 Sections 14 and 15 | Lesson 3.12 and 3.13 | Lesson 3.16 | Unit 3 Sections 8 and 10 | Unit 3.17-3.18 Group Lesson Period 4 | . . Section 8 - Iteration . Section Objectives: . Express an algorithm that uses iteration without using a programming language | Determine the result or side effect of iteration statements | Write iteration statement | . Section Vocabulary: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met . Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met . Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop. . . Unit 3 Section 8.1 . Unit 3 Section 8.1 - Taiyo Iwazaki . Lesson Objectives: . Express an algorithm that uses iteration without using a programming language | Define an iteration | The Basics Of Iteration | Examples | LESSON Vocab: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | Before we dive deeper, we need to understand that an iteration is a part of an algorithm. And in that iteration is a set of instructions that need to be followed until a certain desired output is met. . Examples . Here is an example using online shopping: . Lets say you are looking for a lost item inside of your house... What steps would you take? . Suppose there are n rooms to search... number the rooms 1-n . | Start by searching in room number 1 . | Search each room thoroughly for you item. . | Change the room number to the next highest number . | Repeat steps 3 and 4 until you have found your lost item. . | Enjoy the lost item. . | WAIT! There is a flaw in the program. . This is where a stopping condition is useful for when the iteration already meets the desired requirement and gets out of the loop. . Programming Examples . i = 0 while (i &lt; 5): print(&quot;Hello, World!&quot;) i = i + 1 . Hello, World! Hello, World! Hello, World! Hello, World! Hello, World! . i = 0 while (i &lt; 5): #Try changing the 5 and see what happens! print(&quot;Hello, World!&quot;) i = i + 1 if (i == 3): #Try Changing the 3 and see what happens! break . Hello, World! Hello, World! Hello, World! . These are just a few examples of what you can do with iteration. . Summary: . An Iteration is a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | We can use stopping conditions to stop an iteration if a condition is already met | . Unit 3 Section 3.8.2 . Unit 3 Section 3.8.2 - Parav Salaniwal . Lesson Objectives . Determine the result or side effect of iteration statements | Learn how to use iterations with for loops and while loops | Creating code to learn how to incrementally list numbers | Learn the range function and using variables in code | . Definition: Iteration Statement - cause statements to be executed zero or more times, subject to some loop-termination criteria . The first function we will learn is the range function, which we will use with for loop. As you may be able to guess, this will give us the sum based on the input provided. We always use a variable, such as i, to represent what the range of numbers the output will show. For example, if I wanted to list the numbers from 1-10 using the range function, it would look like this: . for i in range(11): print(i) . 0 1 2 3 4 5 6 7 8 9 10 . Now the first thing you may notice is my input for the range was 11, and you may wonder why is it not 10? This is because when using the range function, the last number, or the ending value, is not included in the output, therefore we would have to add 1 to receive the correct output. Now if we were looking to include a starting value to have it start from 1 and end at 10, the code would look like this: . for i in range(1,11): print(i) . 1 2 3 4 5 6 7 8 9 10 . When using the range with for loop, the you can list much more than just a increment of one, would anyone like to guess how we could include a change in the incremented value? Try making a change in the python code above to change the incremented value. When using the range function: . for i in range(starting value, ending value, incremented value): print(i) . Now with while loops, we can provide a similar output with a variation in the input. Similar to for loops, it requires a variable which is the starting value. . i=1 while i&lt;=10: print(i) i=i+1 . 1 2 3 4 5 6 7 8 9 10 . Based on your knowledge from for loops, which values in the code above are the starting, incrementing, and ending values? . LESSON . . Unit 3 Section 3.8.3 . Unit 3 Section 3.8.3 - Nikhil . Here is some basic code I have created, let&#39;s first look into this one: I created a list of pets, cat, dog, fish, and snake. Then I created a for loop, &quot;for i in pets&quot; and this looks at every element/value in pets, so &quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot; and &quot;snake&quot;. This next if statmenets checks if the element in the list is &quot;fish&quot; and if it is, it breaks the loop. The statement would just print, cat and dog since the loop breaks at fish. . pets = [&quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot;, &quot;snake&quot;] for i in pets: if i == &quot;fish&quot;: break print(i) . cat dog . This while loop checks if number less than 10 is even and if so, it will print out the even numbers. We set a starting value of number = 0, then while the number is less than 10, the percent sign means modulus so meaning if there is a remaninder when we dvide. So if number divided by 2 has no remainder then it will print number. Then after that it will add 1 to the number and repeat the process untill it reaches 10. So let&#39;s check for 0, while 0 is less than ten, then it moves to next statement, since 0 divded by 2 has a remainder of 0 it will print the value of 0. Now it will add 1 to zero. Then it will see that 1 is less than ten, and then check if 1 divided by 2 has a remainder of 0 which it does not, so it skips the print, and goes straight to addding one, so on so forth. . number = 0 while number &lt; 10: if number % 2 == 0: print(number) number += 1 . 0 2 4 6 8 . The purpose of this code is to find the sum of all the even numbers between and any number of your choosing. The integer input asks for the minimum and maximum value. The next statement puts a starting sum value set to 0. The for i in range (minimum,maximum+1) looks at every number between those two values, in this case 1 and 100. Then the if i modulus 2 checks if any numbers that are divisible by 2 and the remainder comes to 0. If there is a number that has a remainder of 0 when divided by 2, it adds that number to the sum. Then the last print statement, prints out the final sum of all even numbers between the two numbers of your choosing. . minimum = int(input(&quot;please enter a minimum number you want your range to be&quot;)) maximum = int(input(&quot;please enter a number that you want to be the maximum value&quot;)) sum = 0 for i in range(minimum,maximum+1): if i % 2 == 0: sum += i print(&quot;The sum of all the even numbers between&quot;, minimum, &quot;and&quot;, maximum, &quot;:&quot;, sum) . The sum of all the even numbers between 1 and 3 : 2 . LESSON . . HACKS Unit 3 Section 8 . Hacks Unit 3 Section 3.8.1 . Define an Iteration | Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) | Program a simple iteration. | Hacks Unit 3 Section 3.8.2 . What is an iteration statement, in your own words? | Create a descending list of numbers using for loop | Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 | . Section 10 - Lists - Luna Iwazaki, Ethan Tran . Section Objectives: . For list operations, write expressions that use list indexing and list procedures | For algorithms involving elements of a list, write iteration statements to traverse a list | For list operations, evaluate expression that use list indexing and list procedures | For algorithms involving elements of a list, determine the result of an algorithm that includes list traversals | . Section Vocabulary: . Traversing Lists: where all elements in the list are accessed, or a partial traversal, where only a portion of elements are accessed (can be a complete traversal) . Essential Knowledge: . List procedures are implemented in accordance with the syntax rules of the programming language . | Iteration Statements can be used to traverse a list . | !!! AP EXAM provides pseudocode for loops | Knowledge of existing algorithms that use iteration can help in constructing new algorithms: | . Unit 3 Section 10 . Section 10 - Lists . Lists Recap . append() - adding element to the end of the list . names = [&#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # add element to the end of the list names.append(&#39;luna&#39;) # start with empty list names = [] names.append(&#39;taiyo&#39;) names.append(&#39;ethan&#39;) names.append(&#39;parav&#39;) names. append(&#39;nikhil&#39;) . insert() - adding an element in a specific position . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # adding in a specific position names.insert(0, &#39;taiyo&#39;) names.insert(3, &#39;ethan&#39;) . remove() - remove an item from the list . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # deleting by value names.remove(&#39;parav&#39;) # by position del names[-1] . pop() - takes the item off the top of the &quot;stack&quot; (by default it returns the last element of the list but you can also pop from any position) . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # pop last item of list most_recent_name = names.pop() print(most_recent_name) # pop first item of list first_name = names.pop(0) print(first_name) . len() - returns the number of items in a list . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # find length of list num_names = len(names) print(&quot;There are&quot; + str(num_names) + &quot;names.&quot;) . sort() - changes order of list permanently . sorted() - returns a copy of the list which leaves the original copy unchanged . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # sort permanently names.sort() # sort permanently in reverse alphabetical order names.sort(reverse=True) # temp. sort print(sorted(names)) print(sorted(names, reverse=True)) # reversing the order of a list names.reverse() . range() - use to work with number efficiently . for number in range(11): print(number) # making list of numbers 1 to 10 # using the list() value can generate a large list of numbers numbers = list(range(1, 10)) . min() - find the least value in list . nums = [10, 30, 40, 60, 70, 60] least = min(nums) print(min(nums)) . max() - find the highest value in list . nums = [10, 30, 40, 60, 70, 60] highest = max(nums) print(max(nums)) . sum() - sum of all in list . nums = [10, 30, 40, 60, 70, 60] total = sum(nums) print(sum(nums)) . Practice Question . Using the information above fill in the missing code . nums = [] nums.#missing code &#39;15&#39; nums.#missing code &#39;43&#39; nums.#missing code &#39;81&#39; nums.#missing code &#39;25&#39; least = #missing code print(#missing code) . AP Exam Reference Sheet . Since CS is taught in different languages the pseudocode represents fundamental programming concepts. . provides basic operations on lists | provides pseudocode for loops | helps you understand code used in questions | students can use this reference sheet in the AP Exam | . APCSP Testing Reference Sheet . If you looked at the reference sheet and seem to not understand some concepts here is a Khan Academy resource which can help you understand specific topics. . Khan Academy Resource . Practice Question . If the list words contain [&#39;song&#39;, &#39;book&#39;, &#39;video&#39;, &#39;book&#39;] what will be the following code output . Unit 3.10 (Ethan Tran) . Traversing a list is the process of visiting each element in a list in a sequential order. It can be used to access, search for, and modify elements in the list. | . Traversing Lists . 1) Complete Traversal: All elements in a list are assessed . 2) Partial Traversal: Only a given portion of elements are assessed . 3) Iterative Traversal: When loops are used to iterate through a list and to access each single element at a time. . Quick Lists Reference Sheet . A given element of a list can be evaluated using index, [ ] | . 1) Ex. listName[i] 2) Ex. listName[3] . insert( ) allows a value to be inserted into a list at index i | append( ) allows a value to be added at the end of a list | remove( ) allows an element at index i to be deleted from a list | length( ) returns the number of elements currently in a specific list | . . A loop such as the example above allows a user to access each item within the list . College Board Example Question . . . HACKS Unit 3 Section 10 . Find the lowest value in a list (Luna Iwazaki) . Part 1 . Use the list made bellow | Make a variable to hold the minimum and set it to potential minimum value | Loop | Check each element to see if it is less than the minimum variable | If the element is less than the minimum variable, update the minimum | After all the elements of the list have been checked, display the minimum value | . nums = [&#39;38&#39;, &#39;45&#39;, &#39;67&#39;, &#39;83&#39;, &#39;78&#39;] minimum = min(nums) print(min(nums)) . 38 . Part 2 . look at the apcsp reference sheet and take notes about ones you don&#39;t understand (at least 4) . Lists Quiz (Ethan Tran) . Take a screenshot of your score on put it on your review ticket! . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . What allows an element at index i to be deleted from a list? remove() Correct! What allows a value to be added at the end of a list? append() Correct! What allows a value to be inserted into a list at index i? index() Correct! What returns the number of elements currently in a specific list? length() Correct! 100.00% Your total score is: 4 out of 4. Not too bad, keep on studying! . . . College Board Reference Sheets . List Operations . .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Unit/8and10",
            "relUrl": "/Unit/8and10",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Unit 3.17-3.18 Group Lesson Period 4",
            "content": "| Vocabulary From The Lessons | Unit 3 Sections 14 and 15 | Lesson 3.12 and 3.13 | Lesson 3.16 | Unit 3 Sections 8 and 10 | Unit 3.17-3.18 Group Lesson Period 4 | . . Hailstone numbers . def collatz(i): while i &gt; 1: print(i, end=&#39; &#39;) if (i % 2): # i is odd i = 3*i + 1 else: # i is even i = i//2 print(1, end=&#39;&#39;) i = int(input(&#39;Enter i: &#39;)) print(&#39;Sequence: &#39;, end=&#39;&#39;) collatz(i) . Sequence: 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 . Number of iterations . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(i) else: i = (i / 2) list_.append(i) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Please enter a number: Number of iterations: 16 . Vocab . Collatz . The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . Hailstone numbers . The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples:Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No.&gt; ### Iteration The action or a process of iterating or repeating:such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . Undecidable problems . An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . Unsolvable problems . An unsolvable problem is one for which no algorithm can ever be written to find the solution. . Additional information . A problem posed by L. Collatz in 1937, also called the 3x+1 mapping, 3n+1 problem, Hasse&#39;s algorithm, Kakutani&#39;s problem, Syracuse algorithm, Syracuse problem, Thwaites conjecture, and Ulam&#39;s problem (Lagarias 1985). Thwaites (1996) has offered a £1000 reward for resolving the conjecture. Let a_0 be an integer. Then one form of Collatz problem asks if iterating . always returns to 1 for positive a_0. (If negative numbers are included, there are four known cycles (excluding the trivial 0 cycle): (4, 2, 1), (-2, -1), (-5, -14, -7, -20, -10), and (-17, -50, -25, -74, -37, -110, -55, -164, -82, -41, -122, -61, -182, -91, -272, -136, -68, -34).) . The members of the sequence produced by the Collatz are sometimes known as hailstone numbers. Conway proved that the original Collatz problem has no nontrivial cycles of length &lt;400. Lagarias (1985) showed that there are no nontrivial cycles with length &lt;275000. Conway (1972) also proved that Collatz-type problems can be formally undecidable. Kurtz and Simon (2007) proved that a natural generalization of the Collatz problem is undecidable; unfortunately, this proof cannot be applied to the original Collatz problem. . The Collatz algorithm has been tested and found to always reach 1 for all numbers &lt;=19·2^(58) approx 5.48×10^(18) (Oliveira e Silva 2008), improving the earlier results of 10^(15) (Vardi 1991, p. 129) and 5.6×10^(13) (Leavens and Vermeulen 1992). Because of the difficulty in solving this problem, Erdős commented that &quot;mathematics is not yet ready for such problems&quot; (Lagarias 1985). . The numbers of steps required for the algorithm to reach 1 for a_0=1, 2, ... are 0, 1, 7, 2, 5, 8, 16, 3, 19, 6, 14, 9, 9, 17, 17, 4, 12, 20, 20, 7, ... (OEIS A006577; illustrated above). Of these, the numbers of tripling steps are 0, 0, 2, 0, 1, 2, 5, 0, 6, ... (OEIS A006667), and the number of halving steps are 0, 1, 5, 2, 4, 6, 11, 3, 13, ... (OEIS A006666). The smallest starting values of a_0 that yields a Collatz sequence containing n=1, 2, ... are 1, 2, 3, 3, 3, 6, 7, 3, 9, 3, 7, 12, 7, 9, 15, 3, 7, 18, 19, ... (OEIS A070167). . The Collatz problem can be implemented as an 8-register machine (Wolfram 2002, p. 100), quasi-cellular automaton (Cloney et al. 1987, Bruschi 2005), or 6-color one-dimensional quasi-cellular automaton with local rules but which wraps first and last digits around (Zeleny). In general, the difficulty in constructing true local-rule cellular automata arises from the necessity of a carry operation when multiplying by 3 which, in the worst case, can extend the entire length of the base-b representation of digits (and thus require propagating information at faster than the CA&#39;s speed of light). . More information . Hacks/Assignment . Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. The more efficient the code, the higher your grade will be. (Algorithm Efficency) (.25) . Unit 3, Section 17: Algorithm Efficiency - Kush &amp; Yasha . What is Algorithm Efficiency? . Yasha - Algorithmic efficiency is an aspect of algorithmic programming that measures the number of steps needed to solve a problem. For instance, If I wanted to create a sorting algorithm that sorts numbers the numbers [2,4,5,1,3]from least to greatest, rather than having an algorithm that compares itself to the next number and swaps accordingly it would be more efficient if you had a program that scans through all the numbers and checks whether a number is smaller or bigger than the rest than and sorts accordingly. Both of the algorithms had the same objective, but one runs more efficiently than the other. . Here is an example of an inefficient algorithm: . def inefficientWay(numbers): # Then it loops over the numbers for i in range(len(numbers)): # Now it finds the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # Then it swaps the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(inefficientWay([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - This algorithm is inefficent because it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. This is an inefficient way to sort a list. . Kush - Here is an efficent way to sort a list: . def efficient_sort(numbers): # loop over the numbers for i in range(len(numbers)): # find the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # swap the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(efficient_sort([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - The difference in this algorithm is that it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. . How can you use algorithms to better your life: Mini activity . Yasha - Just for a second, think about all the tasks in your life that would work so much better automated. The sky&#39;s the limit. For an activity, write down or take a mental note of a task that you encounter in your day to day life, and think of ways where you can automate that task. An example of this would be me creating an algorithm for my morning routine. . tasks = [&quot;wake up&quot;, &quot;eat breakfast&quot;, &quot;brush teeth&quot;, &quot;go to school&quot;] def complete_tasks(tasks): for task in tasks: # code to complete each task goes here if task == &quot;wake up&quot;: print(&quot;Waking up now!&quot;) elif task == &quot;eat breakfast&quot;: print(&quot;Eating breakfast now!&quot;) elif task == &quot;go to school&quot;: print(&quot;Going to school now!&quot;) # and so on for each task in the list # call the function to complete the tasks complete_tasks(tasks) . Waking up now! Eating breakfast now! Going to school now! . Taking a heuristic approach to problems P1 . Kush - Sometimes when a problem has too many possibilities, a heuristic approach would be taken. let&#39;s use planes as an example. Imagine you were a musician on tour. You have shows in New Zealand, United States, Canada, and Russia. Well, what would be the shortest flight route so you can arrive at those destinations as fast as possible? You start in the United States. . Taking a heuristic approach to problems P2 . Kush - Well, since there are multiple possibilities, I chose to pick the countries closest to each other. The reason I chose this algorithm in particular is that it made the most sense. I had to start at United States, but then I went on to Canada, Russia, New Zealand, and then back to the United States. . Visual Representation . Hacks/assignment . Write 2 algorithms: One is efficent and one is innefficent, then explain why one is efficent while the other isn&#39;t. (.25) | Explain why one algorithm is more efficient than another using mathematical and/or formal reasoning. (.25) | use variables, if statements, and loops to program your algorithm and upload to jupyter notebooks/ fastpages. (.25) | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Unit/17and18",
            "relUrl": "/Unit/17and18",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Lesson 3.1 and 3.2 Homework",
            "content": "| 3.17 and 3.18 Hacks | Lesson 3.14-3.15 Hacks | Lesson 3.12-3.13 Hacks | Lesson 9-11 Hacks | Lesson 8 and 10 Hacks | Lesson 5-7 Hacks | Lesson 3.1 and 3.2 Homework | Lesson 3.3 and 3.4 Homework | . Hack 1: . Hack 2: In your own words, briefly explain by writing down what an assignment operator is . an operator is a procedure that gives an output. | . In Collegeboard pseudocode, what symbol is used to assign values to variables? . the symbol &lt;– is used to assign a variable for college board (or in pseudo code). | . A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? . If you print x, then the value will be changed to 22 because the computer takes the variable that has been assigned the latest. Since assigning x to 22 is the most recent line of code, more recent than x = 15, the program will output 22. | . Hack 3: What is a list? . a list is a series of variables. | . What is an element . a smaller component in a larger system of code | . What is an easy way to reference the elements in a list or string? . it is easier to reference the elements in a list because that way they are all in one place and are in one line of code instead of multiple. | . What is an example of a string . 123-456-7890 (a phone number) | . List: . Index: . Hack 4: . Hack 5: Python Quiz . Before: . Simplified version: . Why are using lists better for a program, rather than writing out each line of code? . lists are better because that way you have all your variables in one place instead of multiple lines of code. It also manages complexity. | . My own version of a list (both the long way and the simple way :) .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Lesson/1and2",
            "relUrl": "/Lesson/1and2",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Final Exam Reflection (Trimester 1)",
            "content": "| Test | Project Grading | Final Exam Reflection (Trimester 1) | College Board Questions | . . Question 1: I thought that the answer was C because the function is being repeated three times, but I realize that C says that is being repeated 5 times, which is not what is happening. If you were to write out the function, it would be: 2 x 5 x 5 x 5, which is the same thing as 2(5)^3, hence why we limit it to C and D. But the correct answer is D because we multiply the result by 5 and that happens three times (repeats 3 times), that is why the Answer is D . . Question 4: I thought all three was correct because Alejandra would need their contacts in order to set up the meal. But as it turns out, onlly the user needs to give the contact, which when I see it, the question does say that. So only one and two are correct because they need the location of Alejandra to see what places are nearby and they need to know what are the dietary restrictions of each person in the group. . . Question 6: The answer is B because It will continue to repeat until the procedure has reached the max, whatever number that may be. The count starts at one, and since it hasn&#39;t reached the max yet, it will add two to it, making it the next odd integer and it will repeat through that cycle until it reaches the max, making it less than or equal to the max, printing only positive odd integers. When I first did this, I didn&#39;t understand what the first part of the code was doing. Now I do. . . Question 8: Since the numlist k and the numlist j were assigned to each other, they have been swapped, their values have been swapped. But what I couldn&#39;t understand is why it had to be between 1 and the length of the list. I think it is because one is the starting of the list in this case, and not 0, and obviously the end had to be the length of the list, so in a way it makes sense that j and k have to be in between those two numbers. . . Question 11: The j + 1 make it so that the program compares with all of the values that follow right after, not just one value that follows after, that is why C is wrong and why D must be wrong to because it doesn&#39;t only compare values that preceed it. B makes the most sense because it means that the program will compare the values in order, which makes more sense than the program comparing all the values randommly. . . Question 13: What the question was asking, and I didn&#39;t get this, was which one of the lists provided in the answer choices would give a different result than expected of the program. It makes sense that the answer is C because if you plug in A in the procedure, then it will return false for all the values, which is what we want to happen because it contains no positive values, the same goes for B, so we can cross them out. Then comes D, where all of the values will return true because they are positve, which is true because the entire list has positive values, so the program works for that list, so we can eliminate D. But when we get to C, the program says false for the first to numbers, but then true for 1, which shouldn&#39;t be true because in order for it to be true, the entire list would have to be full of positive integers, which is not the case. . . Question 18: C has to be the correct answer because the internet is a network, which C is the only option that mentions that. But also, the World Wide Web has to be several linked pages in programs and not just one because you can get all sorts of information from them and they are not apart of the same page, so C has to be the right answer. D isn&#39;t because I am pretty sure that the internet uses protocols and is not a protocol itself. . . Question 23: Analog data can be measured by samples, and a sequence of bits, which is why D makes the most sense. I didn&#39;t know that when I thought of the answer to this question, but now I do. . . Question 25: This was a simple mistake. since age was a word, I thought that it was a string, but it turns out that age is usually represented as a number. Maybe because we usually asign it to a number so that is probably why. . . Question 27: Student name is a string, because it is a word, but the absent part being a boolean confused me a litte. But it makes sense now because a boolean value is a value that either true of false. So, you can either be absent or not and that is why it is a boolean value. . . Question 35: The part with if else statement I got because it is pretty straightforward. But the other answer, A and B, I couldn&#39;t decide where to put the maxPS &lt;--50, on the top of the bottom. It is on the top, I think, because if that requirent is not met, then it will go down to the next line of code instead of the other way around. . . Question 36: It was the same problem I had with the previous question. I knew either C or D was the correct answer but I didn&#39;t know whether the APPEND function went first or not. Now I know that in this case it does. . . Question 45: I think it is B because since the value has to be greater than 0 for both, you can&#39;t start at 0. So then you got the next number, which is 1, and then the line of code starts to execute and that is why you get those numbers. . . What I did when I got stuck: . The first thing I did when I got stuck on these questions is that I looked at the question closely and see if there were any hints as to what the topic the question was directing to. Luckily, the question would say something like binary numbers or data abstraction, so that gave me a clue as to what topic I needed to look at. Then I would find that topic on college board (one of the topics straight up said Binary Numbers, or something like that) and then I would look at the videos on that topic to get a better idea of what that topic was, because I had no idea what that topic was. And then after that I would take that information and answer the question, which was a lot easier after seeing the college board videos. There were also questions that were more vocab based. One question asked something about Boolean values, and I didn&#39;t know what boolean meant, so then I would search it up on the internet to know what boolean meant and then approach the question. After submitting the test, the college board explanations for the questions that I didn&#39;t understand also helped me to better understand why one answer was better than the other, and If it didn&#39;t make sense, then I would search up and see if there was a response on the internet that would make more sense to me. This what I did to better help me understand these questions. | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Final/Reflectiontri1",
            "relUrl": "/Final/Reflectiontri1",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Unit Notes",
            "content": "| Unit Notes | Identifying and Correcting Errors | . . Unit 1.1 Notes: . A computing innovation includes a program as an integral part of its function | One person is “the driver” where they type out the code. And the other person is “the navigator” who looks over the driver and monitors what they are doing | Sharing ideas with each other is important because then you get more idea | Leaving comments in code is helpful so you or your partner know where you left off or if there is something that needs fixing. | Ask people to test drive your program so that way you get more feedback. | . Unit 1.2 Notes: . There are physical devices such as watches and phones and pacemakers. There are applications such as media and games. And there are systems that are not stored on our local server. | Computers programs accept input in different forms | Computers can take in tactile, audio, visual and text “Events” are triggered by some action which send input to the program | Input effects the output | A statement is a single command and a group of statements are called code segments. | And code segments are different for different programming languages. | Program is often referred to as software | . Unit 1.3 Notes: . All programming starts with an idea and they are developed with a specific program in mind | There are several steps in the process. Both on what you should do and what you should not do | Once we have an idea, then we need to think on how we can turn this idea into reality. | There are time constraints too, so you have to understand how much time you have and plan accordingly. | Then brainstorm on what you have already figured out and it is another form of planning. | After brainstorming they will organize their ideas into modules and divide up the work so it is not too much work. | There is always testing after every step of the programming so they can monitor if the program is working correctly and if the user is able to interact with the program as intended. They also use user feedback to better their program. | . Unit 1.4 Notes: . Errors and programming go hand-in-hand and it is impossible to write a program without encountering at least one error. | A logic error is a mistake that the programmer makes when typing the line of code. | Syntax error is when a programmer makes a typo and the language doesn’t recognize it and the program fails to run. | A run-time error is when the program fails in the midst of running. This is commonly referred to as a bug | Overflow error results when the program is asked to calculate a problem that is outside the range of values | Use a number of test cases to make sure that your program works | Borderline cases should also be tested. | . Unit 4.1 Notes: . Computers are capable of sending and receiving data | A computer network is a group of interconnected computing devices capable of sending and receiving data. | Packet Switching: the message (file) is broken up into packets and sent in any order. | The packets are then reassembled by the recipient&#39;s device. | Bandwidth is the amount of data that can be sent in a fixed amount of time. | Protocols establish a common standard for how to send messages between devices on the internet | A packet contains data that is being transmitted as well as metadata containing information used for routing information. | The internet was designed to be scalable - able to change in size in order to meet new demands | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Unit/Notes",
            "relUrl": "/Unit/Notes",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "College Board Questions",
            "content": "| Test | Project Grading | Final Exam Reflection (Trimester 1) | College Board Questions | . . I got some things right, and some things wrong. | The ones that I got right were a little easy for me because it kind of had some math in it. the only thing I had to do was figure out what the program was trying to do and that wasn&#39;t so bad | The ones that I got wrong, I guess I didn&#39;t understand how it worked. But when I saw the answers I understood why the correct answer was a better answer then what I had picked. | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Collegeboard/Questions",
            "relUrl": "/Collegeboard/Questions",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Identifying and Correcting Errors",
            "content": "| Unit Notes | Identifying and Correcting Errors | . . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter c is the 3 letter in the alphabet . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . evens = [] i = 0 while i &lt; 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8] . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . menu = {&quot;burger&quot;:3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) #print(item) #code should add the price of the menu items selected by the user if item in menu: total = total =+ menu[item] print(total) if item not in menu: print(item, &quot;not found on menu&quot;) . Menu burger $3.99 fries $1.99 drink $0.99 donut not found on menu .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Python/Errors",
            "relUrl": "/Python/Errors",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Python RapidAPI",
            "content": "| Python RapidAPI | Biology Quiz | Bio Quiz 2.0 | Python Lists | . . import requests url = &quot;https://simple-elegant-translation-service.p.rapidapi.com/getSupportedLanguages&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;730331016fmsh1b9032a0b3ed8d7p143fa3jsn4f2e6f068f2f&quot;, &quot;X-RapidAPI-Host&quot;: &quot;simple-elegant-translation-service.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) #print(response.text) print(&quot;Language&quot;) languages = response.json().get(&#39;languages&#39;) for key, value in languages.items(): print(key,value) . Language af afrikaans am amharic ar arabic az azerbaijani be belarusian bg bulgarian bn bengali bs bosnian ca catalan ceb cebuano co corsican cs czech cy welsh da danish de german el greek en english eo esperanto es spanish et estonian eu basque fa persian fi finnish fil Filipino fr french fy frisian ga irish gd scots gaelic gl galician gu gujarati ha hausa haw hawaiian he Hebrew hi hindi hmn hmong hr croatian ht haitian creole hu hungarian hy armenian id indonesian ig igbo is icelandic it italian iw hebrew ja japanese jw javanese ka georgian kk kazakh km khmer kn kannada ko korean ku kurdish (kurmanji) ky kyrgyz la latin lb luxembourgish lo lao lt lithuanian lv latvian mg malagasy mi maori mk macedonian ml malayalam mn mongolian mr marathi ms malay mt maltese my myanmar (burmese) ne nepali nl dutch no norwegian ny chichewa pa punjabi pl polish ps pashto pt portuguese ro romanian ru russian sd sindhi si sinhala sk slovak sl slovenian sm samoan sn shona so somali sq albanian sr serbian st sesotho su sundanese sv swedish sw swahili ta tamil te telugu tg tajik th thai tl filipino tr turkish uk ukrainian ur urdu uz uzbek vi vietnamese xh xhosa yi yiddish yo yoruba zh-cn chinese (simplified) zh-tw chinese (traditional) zu zulu .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Python/RapidAPI",
            "relUrl": "/Python/RapidAPI",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Team Project",
            "content": "| Team Project | App Lab Game | . . Ideas . Our idea is to make a page where you can find a bunch of games that each one of us has created. We choose what games we want to create and we will put it on a blog for all to see and try! | . Now we started to brainstorm what games we could add to our blog. Games that weren&#39;t too complicated but also fit all the Collegeboard criteria. | Games such as Snake, Tetris, Pong, etc. | We decided that we would each pick a game to do and that would add up to multiple games. | .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Team/Project",
            "relUrl": "/Team/Project",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Javascript Tutorial",
            "content": "| N@tM | My Part in the CPT Project | Model and Object-Oriented Programming | Javascript Tutorial | Back Checks | . . . console.log(&quot;Hello!&quot;); . var msg = &quot;Hello, World!&quot;; console.log(msg); . function logIt(output) { console.log(output); } logIt(msg); . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); logItType(2020); logItType([1, 2, 3]); . var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;unknown&quot;, 2024) ]; function Classroom(teacher, students){ teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } compsci = new Classroom(teacher, students); logItType(compsci.classroom); logItType(compsci.classroom[0].name); logItType(compsci.json[0]); logItType(JSON.parse(compsci.json[0])); . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Period&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Room #&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Javascript/Tutorial",
            "relUrl": "/Javascript/Tutorial",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "The Good Life Notes",
            "content": "| Comp Sci Panel Notes | The Good Life Notes | APCSP Panel Notes | . . Key Points . You can know the science of what makes you happy, but unless you practice it, you won&#39;t get any happier. | What we predict is going to make us happy, doesn&#39;t actually make us as happy as we think it will. | If you desire happiness, it requires perminent changes and effort everyday of your life. | Our mind lies to us when we think that something will make us happy (like money), when it really doesn&#39;t | Happy people prioritize people they care about first, and they are very social | Connecting with other people increases your wellbeing | Helping others hhelps us more then we expect | . .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/notes/Goodlife",
            "relUrl": "/notes/Goodlife",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "APCSP Panel Notes",
            "content": "| Comp Sci Panel Notes | The Good Life Notes | APCSP Panel Notes | . . Notes: How did you realize you wanted to do computers? . A few of the people said that they took it because they liked problem solving, others said thhey liked it because they were good at it, and one more said she didn&#39;t like it but it was useful for many things and doing a few internships solidified her choice. | . What is the biggest challenge you&#39;ve encountered in computers? . Starting sucks | There is a solution to everything and you just have to have enough patience | It is hard finding motivation to continue | Fighting the temptation to copy work just to get over it | always getting a syntax error is super frustrating and hard | . Are there any PBL scenarios in college computer science classes? . There are a few projects, one that you do in Freshman year and another you do in Senior year. | Both in class and out of class, a lot of people study in groups and work with other people to learn better because the Professor has too many students and won&#39;t always be able to answer your questions. | Finding a good group is important because you rely on them to learn | . Have you applied CS in your major? . Coding will be everywhere and it can be used for pretty much anything | It can be used for all of your assignments and is really useful | What we are now learning is applicable to pretty much everything | . For existing college students, have you had a job for school or with a professor? . They recommend resumes | Doing internships and jobs | Some professors have clubs and others have research labs, and you can ask if there is a spot available and join | There are path finding algorithms everywhere | . KEY TAKEAWAYS: Computer Science can be used for anything and coding is used for everything so it is an important skill to learn. There are also many jobs that use the things/tools that we are learning in class so the more we learn, the more we can put it to use. And yes, computers can be frustrating, but they are worth the hardwork and patience and when you get through it, the output is most of the time rewarding. So this class is important and it is important to always try our best and learn as much as possible. .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/APCSP/Panelnotes",
            "relUrl": "/APCSP/Panelnotes",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Biology Quiz",
            "content": "| Python RapidAPI | Biology Quiz | Bio Quiz 2.0 | Python Lists | . . def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 10 correct = 0 print(&#39;Hello,&#39; + getpass.getuser()) print(&quot;You will be asked &quot; + str(questions) +&quot; questions. &quot;) questions = [&quot;Are you ready to take the Quiz?&quot;, &quot;What are nitrogenous bases in DNA?&quot;, &quot;What does DNA stand for?&quot;, &quot;Who was the person who came up with the theory of Evolution?&quot;,&quot;In what cell does photosynthesis take place?&quot;, &quot;What is the name of the relationship in which both sides benefit?&quot;, &quot;Glycogen is a polymer of what?&quot;, &quot;How many chromosomes do humans have?&quot;, &quot;What are the weak bonds between water molecules called?&quot;, &quot;What is the division of body cells called?&quot;, &quot;What is the division of gametes called?&quot;] answers = [&quot;yes&quot;, &quot;Adenine, Guanine, Cytosine, Thymine&quot;, &quot;Deoxyribonucleic Acid&quot;, &quot;Charles Darwin&quot;,&quot;Chloroplast&quot;, &quot;Mutualism&quot;, &quot;Glucose&quot;, &quot;46&quot;, &quot;Hydrogen bonds&quot;, &quot;Mitosis&quot;, &quot;Meiosis&quot;] for i in range(len(questions)): rsp = question_with_response(questions[i]) if rsp == answers[i]: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect&quot;) print(&quot;The correct answer is &quot; + answers[i]) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/10&quot;) . Hello,srihitak You will be asked 10 questions. Question: Are you ready to take the Quiz? yes is correct! Question: What are nitrogenous bases in DNA? thymine is incorrect The correct answer is Adenine, Guanine, Cytosine, Thymine Question: What does DNA stand for? Deoyribonucleic Acid is incorrect The correct answer is Deoxyribonucleic Acid Question: Who was the person who came up with the theory of Evolution? Charles Darwin is correct! Question: In what cell does photosynthesis take place? Chloroplast is correct! Question: What is the name of the relationship in which both sides benefit? Mutualism is correct! Question: Glycogen is a polymer of what? Glycogen is incorrect The correct answer is Glucose Question: How many chromosomes do humans have? 46 is correct! Question: What are the weak bonds between water molecules called? Hydrogen bonds is correct! Question: What is the division of body cells called? Mitosis is correct! Question: What is the division of gametes called? Meiosis is correct! srihitak you scored 8/10 .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Biology/Quiz",
            "relUrl": "/Biology/Quiz",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Bio  Quiz 2.0",
            "content": "| Python RapidAPI | Biology Quiz | Bio Quiz 2.0 | Python Lists | . . # variable of type string print(&quot;What medicine do people use when they are sick?&quot;) name = &quot;Anti-biotics&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;How do you know which person got the illness first?&quot;) answer = &quot;You know if the person has a lot of antigens in their system. it means they were fighting the disease longer.&quot; print(&quot;answer&quot;, answer, type(answer)) print() # variable of type float print(&quot;What is my ideal score in any class?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;There are many types of antibiotics.&quot;) print(&quot;What are the names of some of them?&quot;) pills = [&quot;amoxicillin&quot;, &quot;Penicillin&quot;, &quot;cephalexin&quot;] print(&quot;pills&quot;, pills, type(pills), &quot;length&quot;, len(pills)) print(&quot;- pills[0]&quot;, pills[0], type(pills[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) questions_and_answers = { &quot;name&quot;: name, &quot;answer&quot;: answer, &quot;score&quot;: score, &quot;pills&quot;: pills } print(&quot;Question and answers&quot;, questions_and_answers, type(questions_and_answers), &quot;length&quot;, len(questions_and_answers)) print(&#39;- questions and answers[&quot;name&quot;]&#39;, questions_and_answers[&quot;name&quot;], type(questions_and_answers[&quot;name&quot;])) . What medicine do people use when they are sick? name Anti-biotics &lt;class &#39;str&#39;&gt; How do you know which person got the illness first? answer You know if the person has a lot of antigens in their system. it means they were fighting the disease longer. &lt;class &#39;str&#39;&gt; What is my ideal score in any class? score 90.0 &lt;class &#39;float&#39;&gt; There are many types of antibiotics. What are the names of some of them? pills [&#39;amoxicillin&#39;, &#39;Penicillin&#39;, &#39;cephalexin&#39;] &lt;class &#39;list&#39;&gt; length 3 - pills[0] amoxicillin &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? Question and answers {&#39;name&#39;: &#39;Anti-biotics&#39;, &#39;answer&#39;: &#39;You know if the person has a lot of antigens in their system. it means they were fighting the disease longer.&#39;, &#39;score&#39;: 90.0, &#39;pills&#39;: [&#39;amoxicillin&#39;, &#39;Penicillin&#39;, &#39;cephalexin&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - questions and answers[&#34;name&#34;] Anti-biotics &lt;class &#39;str&#39;&gt; .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Bioquiz/2",
            "relUrl": "/Bioquiz/2",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Python Lists",
            "content": "| Python RapidAPI | Biology Quiz | Bio Quiz 2.0 | Python Lists | . . # variable of type string name = &quot;Sri Kotturi&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;, &quot;html&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[2]&quot;, langs[2], type(langs[2])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Sri Kotturi &lt;class &#39;str&#39;&gt; age 16 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;html&#39;] &lt;class &#39;list&#39;&gt; - langs[2] Java &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Sri Kotturi&#39;, &#39;age&#39;: 16, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;html&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Sri Kotturi &lt;class &#39;str&#39;&gt; . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Srihita&quot;, &quot;LastName&quot;: &quot;Kotturi&quot;, &quot;DOB&quot;: &quot;December 13&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;srihita.kotturi@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Hundai Accent&quot;], &quot;Favorite_Activity&quot;: &quot;Watching TV!&quot; }) print(InfoDb) . [{&#39;FirstName&#39;: &#39;Srihita&#39;, &#39;LastName&#39;: &#39;Kotturi&#39;, &#39;DOB&#39;: &#39;December 13&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;srihita.kotturi@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Hundai Accent&#39;], &#39;Favorite_Activity&#39;: &#39;Watching TV!&#39;}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Srihita Kotturi Residence: San Diego Birth Day: December 13 Cars: Hundai Accent . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Srihita Kotturi Residence: San Diego Birth Day: December 13 Cars: Hundai Accent . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Srihita Kotturi Residence: San Diego Birth Day: December 13 Cars: Hundai Accent .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Python/Lists",
            "relUrl": "/Python/Lists",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Back Checks",
            "content": "| N@tM | My Part in the CPT Project | Model and Object-Oriented Programming | Javascript Tutorial | Back Checks | . . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode-SRIHITAKOTT1213 # change vscode to different name to test git clone export project=$project_dir/APCSP-Blog-Assignment # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/SRIHITAKOTT1213/APCSP-Blog-Assignment.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts . echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks # _notebooks is inside project cd $notebooks # this should exist per fastpages pwd # present working directory ls -l # list notebooks . echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images # this should exist per fastpages pwd ls -l . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project echo &quot;show the contents of README.md&quot; echo &quot;&quot; cat README.md # show contents of file, in this case markdown echo &quot;&quot; echo &quot;end of README.md&quot; . echo &quot;Show the shell environment variables, key on left of equal value on right&quot; echo &quot;&quot; env . cd $project echo &quot;&quot; echo &quot;show the secrets of .git&quot; cd .git ls -l echo &quot;&quot; echo &quot;look at config file&quot; cat config .",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/Bash/Checks",
            "relUrl": "/Bash/Checks",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Shift Left Plus Binary Octal Hexadecimal Decimal Minus . &lt;- | +1 | 00000000 | 0 | 0 | 0 | -1 | . 16 | 8 | 4 | 2 | 1 | . Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | . . Byte Binary Hexadecimal . 00000000 | # 000000 | . Red&emsp;&emsp; Blue&emsp;&emsp; Black&emsp;&emsp; Gray&emsp;&emsp; White&emsp;&emsp; Orange&emsp;&emsp;",
            "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Schedule",
          "content": "Introduction to Tools and Resources . This is where all my assignments that are posted on my blog can be found . Week Work . 3 | App Lab Game | . 2 🚧 | Python Lists Bio Quiz 2.0 Panel Notes | . 1 💰 | Biology Quiz Bash Checks | . 0 💰 | Build a Website | .",
          "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/schedule",
          "relUrl": "/schedule",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Frontend",
          "content": "",
          "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/frontend",
          "relUrl": "/frontend",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "API",
          "content": "| Test | Project Grading | Final Exam Reflection (Trimester 1) | College Board Questions | .",
          "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/api/overview",
          "relUrl": "/api/overview",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "About Me",
          "content": "This website is powered by APCSP 1. . A blog for computer science principles. &#8617; . |",
          "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://srihitakott1213.github.io/APCSP-Blog-Assignment/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}